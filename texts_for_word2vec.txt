Иску́сственный интелле́кт (ИИ; англ. artificial intelligence, AI) — свойство искусственных интеллектуальных систем выполнять творческие функции, которые традиционно считаются прерогативой человека[1] (не следует путать с искусственным сознанием); наука и технология создания интеллектуальных машин, особенно интеллектуальных компьютерных программ. Искусственный интеллект связан со сходной задачей использования компьютеров для понимания человеческого интеллекта, но не обязательно ограничивается биологически правдоподобными методами[2]. Существующие на сегодня интеллектуальные системы имеют довольно узкие области применения. Например, программы, способные обыграть человека в шахматы, как правило, не могут отвечать на вопросы[3]. Процитированное в преамбуле определение искусственного интеллекта, данное Джоном Маккарти в 1956 году на семинаре в Дартмутском университете, не связано напрямую с пониманием интеллекта у человека. Согласно Маккарти, исследователи вольны использовать методы, которые не наблюдаются у людей, если это необходимо для решения конкретных проблем[2]. Поясняя своё определение, Джон Маккарти указывает: «Проблема состоит в том, что пока мы не можем в целом определить, какие вычислительные процедуры мы хотим называть интеллектуальными. Мы понимаем некоторые механизмы интеллекта и не понимаем остальные. Поэтому под интеллектом в пределах этой науки понимается только вычислительная составляющая способности достигать целей в мире»[2]. В то же время существует и точка зрения, согласно которой интеллект может быть только биологическим феноменом[4]. В английском языке словосочетание artificial intelligence не имеет антропоморфной окраски, которую оно приобрело в традиционном русском переводе: слово intelligence в используемом контексте скорее означает «умение рассуждать разумно», а вовсе не «интеллект» (для которого есть английский аналог intellect)[5]. Даются следующие определения искусственного интеллекта: Одно из частных определений интеллекта, общее для человека и «машины», можно сформулировать так: «Интеллект — способность системы создавать в ходе самообучения программы (в первую очередь эвристические) для решения задач определённого класса сложности и решать эти задачи»[8]. История искусственного интеллекта как нового научного направления начинается в середине XX века. К этому времени уже было сформировано множество предпосылок его зарождения: среди философов давно шли споры о природе человека и процессе познания мира, нейрофизиологи и психологи разработали ряд теорий относительно работы человеческого мозга и мышления, экономисты и математики задавались вопросами оптимальных расчётов и представления знаний о мире в формализованном виде; наконец, зародился фундамент математической теории вычислений — теории алгоритмов — и были созданы первые компьютеры. Возможности новых машин в плане скорости вычислений оказались больше человеческих, поэтому в учёном сообществе зародился вопрос: каковы границы возможностей компьютеров и достигнут ли машины уровня развития человека? В 1950 году один из пионеров в области вычислительной техники, английский учёный Алан Тьюринг, пишет статью под названием «Может ли машина мыслить?»[9]. В ней он описывает процедуру, получившую название теста Тьюринга, которая позволит определить момент, когда машина сравняется в плане разумности с человеком. Коллежский советник Семён Николаевич Корсаков (1787—1853) ставил задачу усиления возможностей разума посредством разработки научных методов и устройств, перекликающуюся с современной концепцией искусственного интеллекта, как усилителя естественного. В 1832 году С. Н. Корсаков опубликовал описание пяти изобретённых им механических устройств, так называемых «интеллектуальных машин», для частичной механизации умственной деятельности в задачах поиска, сравнения и классификации. В конструкции своих машин Корсаков впервые в истории информатики применил перфорированные карты, игравшие у него своего рода роль баз знаний, а сами машины по существу являлись предтечами экспертных систем[10][11]. В СССР работы в области искусственного интеллекта начались в 1960-х годах[6]. В Московском университете и Академии наук был выполнен ряд пионерских исследований, возглавленных Вениамином Пушкиным и Д. А. Поспеловым. С начала 1960-х М. Л. Цетлин с коллегами разрабатывали вопросы, связанные с обучением конечных автоматов. Начиная с 1960-х годов в СССР проводили исследования применения искусственного интеллекта для игры в шахматы. «Каисса» — шахматная программа, разработанная в СССР в 1960-х годах[12], в августе 1974 года программа стала первым чемпионом мира по шахматам среди компьютерных программ[13]. В 1968 году вышла книга советского философа Э. В. Ильенкова «Об идолах и идеалах», в которой обосновывалась невозможность создания машины умнее человека[14]. По инициативе Г. С. Поспелова 10 сентября 1986 года при Президиуме АН СССР был создан Научный совет по проблеме «Искусственный интеллект» (председателем совета стал Г. С. Поспелов, его заместителями — Д. А. Поспелов и Э. В. Попов). Позже этот совет сыграл важную роль в развитии исследований по искусственному интеллекту в СССР и в России. В России 30 мая 2019 года на совещании по развитию цифровой экономики под председательством В.В. Путина было принято решение о подготовке национальной стратегии по искусственному интеллекту. В её рамках готовится федеральная программа с выделением 90 млрд рублей[15][16]. 10 октября 2019 года В. В. Путин своим указом утвердил национальную стратегию развития искусственного интеллекта в России до 2030 года[17]. В ноябре 2019 года «Яндекс», Mail.ru Group, Сбербанк, «Газпром нефть», МТС и РФПИ создали Альянс в сфере искусственного интеллекта[18] (к лету 2023 года в состав Альянса входили также Уралхим, Русагро, Сибур, Северсталь и Группа «Самолёт»)[19]. 27 августа 2020 года был утверждён национальный проект «Искусственный интеллект», руководителем которого была назначена заместитель министра экономического развития Оксана Тарасенко[20][21]. В декабре 2020 года вторая конференция по искусственному интеллекту Artificial Intelligence Journey (AI Journey) вошла в топ-3 аналогичных форумов в мире. В ней участвовало (онлайн) более 20000 человек из 80 стран, в работе конференции принял участие Владимир Путин[22][23]. Весной 2021 года председатель Правительства Михаил Мишустин утвердил правила выделения финансовой поддержки компаний, занятых в сфере искусственного интеллекта, в размере 1,4 млрд руб (на 2021 год)[24]. В 2023 году президент России Владимир Путин поручил обновить Национальную стратегию развития искусственного интеллекта до 2030 года, а также обеспечить поддержку центрам исследований в сфере ИИ. По данным правительства РФ, объём рынка ИИ в 2022 году в РФ при росте 18 % составил 650 млрд рублей. На 2023 год уровень внедрения технологий искусственного интеллекта в России достиг 20 %. На разработки в области ИИ в 2024 году правительство РФ запланировало выделить около 5,2 млрд рублей. По оценке вице-премьера РФ Дмитрия Чернышенко, к 2025 году внедрение технологий ИИ принесёт компаниям РФ около 1 трлн рублей, а дополнительный прирост ВВП при максимальных инвестициях в эту отрасль через пять лет может составить 11 трлн рублей[25][26]. Единого ответа на вопрос, чем занимается искусственный интеллект, не существует. Почти каждый автор, пишущий книгу об искусственном интеллекте, отталкивается в ней от какого-либо определения, рассматривая в его свете достижения этой науки. В философии не решён вопрос о природе и статусе человеческого интеллекта. Нет и точного критерия достижения компьютерами «разумности», хотя на заре искусственного интеллекта был предложен ряд гипотез, например, тест Тьюринга или гипотеза Ньюэлла — Саймона. Поэтому, несмотря на наличие множества подходов как к пониманию задач искусственного интеллекта, так и созданию интеллектуальных информационных систем, можно выделить два основных подхода к разработке искусственного интеллекта[27]: Последний подход, строго говоря, не относится к науке об искусственном интеллекте в смысле, данном Джоном Маккарти, — их объединяет только общая конечная цель. Эмпирический тест был предложен Аланом Тьюрингом в статье «Вычислительные машины и разум» (англ. Computing Machinery and Intelligence)[28], опубликованной в 1950 году в философском журнале «Mind». Целью данного теста является определение возможности искусственного мышления, близкого к человеческому. Стандартная интерпретация этого теста звучит следующим образом: «Человек взаимодействует с одним компьютером и одним человеком. На основании ответов на вопросы он должен определить, с кем он разговаривает: с человеком или компьютерной программой. Задача компьютерной программы — ввести человека в заблуждение, заставив сделать неверный выбор». Все участники теста не видят друг друга. Самый общий подход предполагает, что искусственный интеллект будет способен проявлять поведение, не отличающееся от человеческого, причём в нормальных ситуациях. Эта идея является обобщением подхода теста Тьюринга, который утверждает, что машина станет разумной тогда, когда будет способна поддерживать разговор с обычным человеком, и тот не сможет понять, что говорит с машиной (разговор идёт по переписке). Писатели-фантасты часто предлагают ещё один подход: искусственный интеллект возникнет тогда, когда машина будет способна чувствовать и творить. Так, хозяин Эндрю Мартина из «Двухсотлетнего человека» начинает относиться к нему как к человеку, когда тот создаёт игрушку по собственному проекту. Дейта из «Звёздного пути», будучи способным к коммуникации и обучению, мечтает обрести эмоции и интуицию.
Однако последний подход вряд ли выдерживает критику при более детальном рассмотрении. К примеру, несложно создать механизм, который будет оценивать некоторые параметры внешней или внутренней среды и реагировать на их неблагоприятные значения. Про такую систему можно сказать, что у неё есть чувства («боль» — реакция на срабатывание датчика удара, «голод» — реакция на низкий заряд аккумулятора, и т. п.). Кластеры, создаваемые картами Кохонена, и многие другие продукты «интеллектуальных» систем можно рассматривать как вид творчества. Исторически символьный подход был первым в эпоху цифровых машин, так как именно после создания Лисп, первого языка символьных вычислений, у его автора возникла уверенность в возможности практически приступить к реализации этими средствами интеллекта. Символьный подход позволяет оперировать слабоформализованными представлениями и их смыслами. Успешность и эффективность решения новых задач зависит от умения выделять только существенную информацию, что требует гибкости в методах абстрагирования. Обычная программа, в свою очередь, устанавливает один способ интерпретации данных, из-за чего её работа выглядит предвзятой и чисто механической. Интеллектуальную задачу в этом случае решает только человек, аналитик или программист, не умея доверить этого машине. В результате создается единственная модель абстрагирования, система конструктивных сущностей и алгоритмов. А гибкость и универсальность выливается в значительные затраты ресурсов для не типичных задач, то есть система от интеллекта возвращается к грубой силе. Основная особенность символьных вычислений — создание новых правил в процессе выполнения программы. Тогда как возможности не интеллектуальных систем завершаются как раз перед способностью хотя бы обозначать вновь возникающие трудности. Тем более, эти трудности не решаются и наконец компьютер не совершенствует такие способности самостоятельно. Недостатком символьного подхода является то, что такие открытые возможности воспринимаются не подготовленными людьми как отсутствие инструментов. Эту, скорее культурную проблему, отчасти решает логическое программирование. Логический подход к созданию систем искусственного интеллекта основан на моделировании рассуждений. Теоретической основой служит логика. Логический подход может быть проиллюстрирован применением для этих целей языка и системы логического программирования Пролог. Программы, записанные на языке Пролог, представляют наборы фактов и правил логического вывода без жесткого задания алгоритма как последовательности действий, приводящих к необходимому результату. Последний подход, развиваемый с начала 1990-х годов, называется агентно-ориентированным подходом, или подходом, основанным на использовании интеллектуальных (рациональных) агентов. Согласно этому подходу, интеллект — это вычислительная часть (грубо говоря, планирование) способности достигать поставленных перед интеллектуальной машиной целей. Сама такая машина будет интеллектуальным агентом, воспринимающим окружающий его мир с помощью датчиков, и способной воздействовать на объекты в окружающей среде с помощью исполнительных механизмов. Этот подход акцентирует внимание на тех методах и алгоритмах, которые помогут интеллектуальному агенту выживать в окружающей среде при выполнении его задачи. Так, здесь значительно тщательнее изучаются алгоритмы поиска пути и принятия решений. Гибридный подход предполагает, что только синергийная комбинация нейронных и символьных моделей достигает полного спектра когнитивных и вычислительных возможностей. Например, экспертные правила умозаключений могут генерироваться нейронными сетями, а порождающие правила получают с помощью статистического обучения. Сторонники данного подхода считают, что гибридные информационные системы будут значительно более сильными, чем сумма различных концепций по отдельности. Выделяется такое обширное направление как моделирование рассуждений[29]. Долгие годы развитие этой науки двигалось именно по этому пути, и теперь это одна из самых развитых областей в современном искусственном интеллекте. Моделирование рассуждений подразумевает создание символьных систем, на входе которых поставлена некая задача, а на выходе требуется её решение. Как правило, предлагаемая задача уже формализована, то есть переведена в математическую форму, но либо не имеет алгоритма решения, либо он слишком сложен, трудоёмок и т. п. В это направление входят: доказательство теорем, принятие решений и теория игр, планирование и диспетчеризация, прогнозирование. Немаловажным направлением является обработка естественного языка[30], в рамках которого проводится анализ возможностей понимания, обработки и генерации текстов на «человеческом» языке. В рамках этого направления ставится цель такой обработки естественного языка, которая была бы в состоянии приобрести знание самостоятельно, читая существующий текст, доступный по Интернету. Некоторые прямые применения обработки естественного языка включают информационный поиск (в том числе глубокий анализ текста) и машинный перевод[31]. Направление инженерия знаний объединяет задачи получения знаний из простой информации, их систематизации и использования. Это направление исторически связано с созданием экспертных систем — программ, использующих специализированные базы знаний для получения достоверных заключений по какой-либо проблеме. Производство знаний из данных — одна из базовых проблем интеллектуального анализа данных. Существуют различные подходы к решению этой проблемы, в том числе — на основе нейросетевой технологии[32], использующие процедуры вербализации нейронных сетей. Проблематика машинного обучения[33] касается процесса самостоятельного получения знаний интеллектуальной системой в процессе её работы. Это направление было центральным с самого начала развития искусственного интеллекта[34]. В 1956 году, на Дартмундской летней конференции, Рей Соломонофф написал отчёт о вероятностной машине, обучающейся без учителя, назвав её: «Индуктивная машина вывода»[35]. Обучение без учителя — позволяет распознать образы во входном потоке. Обучение с учителем включает также классификацию и регрессионный анализ. Классификация используется, чтобы определить, к какой категории принадлежит образ. Регрессионный анализ используется, чтобы в рядах числовых примеров входа/выхода и обнаружить непрерывную функцию, на основании которой можно было бы прогнозировать выход. При обучении агент вознаграждается за хорошие ответы и наказывается за плохие. Они могут быть проанализированы с точки зрения теории решений, используя такие понятия как полезность. Математический анализ машинных алгоритмов изучения — это раздел теоретической информатики, известный как вычислительная теория обучения (англ. Computational learning theory). К области машинного обучения относится большой класс задач на распознавание образов. Например, это распознавание символов, рукописного текста, речи, анализ текстов. Многие задачи успешно решаются с помощью биологического моделирования (см. след. пункт). Особо стоит упомянуть компьютерное зрение, которое связано ещё и с робототехникой. Отличается от понимания искусственного интеллекта по Джону Маккарти, когда исходят из положения о том, что искусственные системы не обязаны повторять в своей структуре и функционировании структуру и протекающие в ней процессы, присущие биологическим системам. Сторонники данного подхода считают, что феномены человеческого поведения, его способность к обучению и адаптации есть следствие именно биологической структуры и особенностей её функционирования. Сюда можно отнести несколько направлений. Нейронные сети используются для решения нечётких и сложных проблем, таких как распознавание геометрических фигур или кластеризация объектов. Генетический подход основан на идее, что некий алгоритм может стать более эффективным, если позаимствует лучшие характеристики у других алгоритмов («родителей»). Относительно новый подход, где ставится задача создания автономной программы — агента, взаимодействующей с внешней средой, называется агентным подходом. Области робототехники[36] и искусственного интеллекта тесно связаны друг с другом. Интегрирование этих двух наук, создание интеллектуальных роботов составляют ещё одно направление искусственного интеллекта. Интеллектуальность требуется роботам, чтобы манипулировать объектами[37], выполнять навигацию с проблемами локализации (определять местонахождение, изучать ближайшие области) и планировать движение (как добраться до цели)[38]. Примером интеллектуальной робототехники могут служить игрушки-роботы Pleo, AIBO, QRIO. Природа человеческого творчества ещё менее изучена, чем природа интеллекта. Тем не менее, эта область существует, и здесь поставлены проблемы написания компьютером музыки[39], литературных произведений (часто — стихов или сказок), художественное творчество.
Создание реалистичных образов широко используется в кино[уточнить] и индустрии компьютерных игр. Отдельно выделяется изучение проблем технического творчества систем искусственного интеллекта. Теория решения изобретательских задач, предложенная в 1946 году Г. С. Альтшуллером, положила начало таким исследованиям. Добавление данной возможности к любой интеллектуальной системе позволяет весьма наглядно продемонстрировать, что именно система воспринимает и как это понимает. Добавлением шума вместо недостающей информации или фильтрация шума имеющимися в системе знаниями производит из абстрактных знаний конкретные образы, легко воспринимаемые человеком, особенно это полезно для интуитивных и малоценных знаний, проверка которых в формальном виде требует значительных умственных усилий. Наконец, существует масса приложений искусственного интеллекта, каждое из которых образует почти самостоятельное направление. В качестве примеров можно привести программирование интеллекта в компьютерных играх, нелинейное управление, интеллектуальные системы информационной безопасности. В перспективе предполагается тесная связь развития искусственного интеллекта с разработкой квантового компьютера, так как некоторые свойства искусственного интеллекта имеют схожие принципы действия с квантовыми компьютерами[40][41]. Можно заметить, что многие области исследований пересекаются. Но в искусственном интеллекте взаимосвязь между, казалось бы, различными направлениями выражена особенно сильно, и это связано с философским спором о сильном и слабом искусственном интеллекте. Известный американский нейрофизиолог Майкл Грациано отмечает принципиальную разницу между ИИ и искусственным сознанием (ИС). По мнению Грациано именно сознание, а не интеллект является существенным отличием высших млекопитающих, включая человека разумного. Моделирование сознания является нерешенной научной задачей[42]. Можно выделить два направления развития искусственного интеллекта: Но в настоящий момент[когда?] в области искусственного интеллекта наблюдается вовлечение многих предметных областей, имеющих скорее практическое отношение к искусственному интеллекту, а не фундаментальное. Многие подходы были опробованы, но к возникновению искусственного разума ни одна исследовательская группа пока так и не подошла. Ниже представлены лишь некоторые наиболее известные разработки в области искусственного интеллекта. Некоторые из самых известных систем: Разработчики компьютерных игр применяют технологии искусственного интеллекта, направление обозначается как «игровой искусственный интеллект». Стандартными задачами искусственного интеллекта в играх являются нахождение пути в двумерном или трёхмерном пространстве, имитация поведения боевой единицы, расчёт верной экономической стратегии и так далее. Наиболее крупные научные и исследовательские центры в области искусственного интеллекта: Финансовые учреждения давно используют нейронные сети для выявления подозрительных событий и действий[47]. Использование ИИ в банковской сфере началось ещё в 1987 году, когда Security Pacific National Bank[англ.] в США создал целевую группу по противодействию мошенничеству и несанкционированному использованию дебетовых карт[48]. Алгоритмическая торговля предполагает использование сложных систем искусственного интеллекта для принятия торговых решений со скоростью, превышающей скорость, на которую способен человеческий организм. Это позволяет делать миллионы сделок в день без какого-либо вмешательства человека. Автоматизированные торговые системы обычно используются крупными институциональными инвесторами[49]. Вместе с тем, результаты отдельных исследований свидетельствуют о том, что, хотя искусственный интеллект и может предсказывать тенденции цен на акции или общие настроения относительно движения финансовых рынков, его точность недостаточна. Модель инвестирования, основанная на искусственном интеллекте, не может быть использована для долгосрочных инвестиций. Точность таких алгоритмов прогнозирования покупки, продажи или владения акциями может привести к потере капитала. Основываясь на этих результатах, исследователи пришли к выводу, что искусственный интеллект пока не способен предсказывать движение фондового рынка с надежной и достоверной точностью[50]. Несколько крупных финансовых учреждений вложили средства в развитие ИИ, чтобы использовать его в их инвестиционной практике. Разработки Aladdin (BlackRock)[англ.], используются как внутри компании, так и для клиентов компании, ассистируя в принятии инвестиционных решений. Широкий спектр функциональных возможностей данной системы включает обработку естественного языка для чтения текста, такого как новости, отчёты брокеров и каналы социальных сетей. Затем система оценивает настроения в упомянутых компаниях и присваивает им оценку. Банки, такие как UBS и Deutsche Bank, используют систему ИИ под названием Sqreem (Sequential Quantum Reduction and Extraction Model, Модель Последовательной Квантовой Редукции и Экстракции), которая может обрабатывать данные для разработки профилей потребителей и сопоставлять их с продуктами, которые они, скорее всего, захотят[51]. Goldman Sachs использует Kensho, платформу аналитики рынка, которая объединяет статистические вычисления с большими данными и обработкой естественного языка. Его системы машинного обучения используют данные в Интернете и оценивают корреляции между мировыми событиями и их влиянием на цены финансовых активов[52]. Информация, извлечённая системой ИИ из прямой трансляции новостей, используется в принятии инвестиционных решений. Существуют продукты, которые используют ИИ для помощи людям в управлении их личными финансами. Например, Digit — это приложение, основанное на искусственном интеллекте, которое автоматически помогает потребителям оптимизировать свои расходы и сбережения, основываясь на своих личных привычках и целях. Приложение может анализировать такие факторы, как ежемесячный доход, текущий баланс и привычки к расходам, затем принимать собственные решения и переводить деньги на отдельный сберегательный счёт[53]. Wallet.AI, развивающийся в Сан-Франциско старт-ап, создаёт агентов, которые анализируют данные, которые генерирует потребитель, при взаимодействии со смартфонами и социальными сетями, чтобы проинформировать потребителя о своих расходах[54]. Автоматизированные помощники-советчики становятся все более широко используемыми в отрасли управления инвестициями. Автоматизированные системы предоставляют финансовые консультации и советы в управлении финансовым портфелем с минимальным вмешательством человека. Этот класс финансовых консультантов работает на основе алгоритмов, созданных для автоматического развития финансового портфеля в соответствии с инвестиционными целями и склонностью к риску клиентов. Он может корректировать изменения в реальном времени на рынке и калибровать портфель в соответствии с пожеланиями клиента[55]. Онлайн-кредитор Upstart анализирует огромное количество потребительских данных и использует алгоритмы машинного обучения для построения моделей кредитного риска, которые прогнозируют вероятность дефолта. Их технология будет лицензирована для банков, чтобы они могли использовать её для оценки своих процессов[56]. ZestFinance разработала платформу Zest Automated Machine Learning (ZAML) специально для кредитного андеррайтинга. Эта платформа использует компьютерное обучение для анализа десятков тысяч традиционных и нетрадиционных переменных (от транзакций покупки до того, каким образом клиент заполняет форму), используемых в кредитной индустрии, для оценки заемщиков. Платформа особенно полезна для присвоения кредитных баллов клиентам с небольшой кредитной историей, таким как миллениалы[57]. Использование искусственного интеллекта позволило «Сбербанку» в 2019 году заработать дополнительно $700 млн, в 2020 году планировалось довести эту сумму до $1 млрд[58]. В конце октября 2021 года премьер-министр РФ Михаил Мишустин утвердил план мероприятий в сфере цифровой трансформации госуправления до 2031 года. Искусственный интеллект был признан ключевой технологией (наряду с большими данными и интернетом вещей), подлежащей широкому внедрению[59].  Применение искусственного интеллекта является важным трендом в создании перспективных систем управления поля боя и вооружением[61]. С помощью искусственного интеллекта возможно обеспечить оптимальный и адаптивный к угрозам выбор комбинации сенсоров и средств поражения, скоординировать их совместное функционирование, обнаруживать и идентифицировать угрозы, оценивать намерения противника[61]. Существенную роль искусственный интеллект играет в реализации тактических систем дополненной реальности, например, позволяет обеспечить классификацию и семантическую сегментацию изображений, локализацию и идентификацию мобильных объектов для эффективного целеуказания[61]. 1 марта 2021 года Комитет по безопасности применения искусственного интеллекта[англ.])[62] направил Президенту США и Конгрессу США доклад, в котором рекомендуется отвергнуть всемирный запрет на применение автономных систем вооружения на основе искусственного интеллекта. В докладе говорится, что использование искусственного интеллекта позволит «сократить время принятия решений» в тех случаях, когда человек не способен действовать достаточно быстро. Комитет также высказал опасение, что Китай и Россия вряд ли станут соблюдать договор о запрете на применение ИИ в военном деле[63]. По данным Минобороны США, Китай принял решение о разработке методов внедрения искусственного интеллекта в будущие системы вооружений. Академия военных наук Китая получила задание на реализацию этой программы путем объединения усилий ВПК и частных компаний[64]. Британские спецслужбы будут бороться с российскими фейковыми новостями при помощи искусственного интеллекта, который будет распознавать активность «фабрики троллей». По информации Центра правительственной связи Великобритании, искусственный интеллект будет бороться с фейками, сверяя данные с надёжными источниками, выявляя манипуляции с изображениями и видео и блокируя подозрительных ботов[65]. Роботы стали распространены во многих отраслях промышленности и часто занимаются работой, которая считается опасной для людей. Роботы оказались эффективными на рабочих местах, связанных с повторяющимися рутинными заданиями, которые могут привести к ошибкам или несчастным случаям из-за снижения концентрации с течением времени. Также широкое применение роботы получили в работе, которую люди могут найти унизительной. В 2014 году Китай, Япония, Соединённые Штаты, Республика Корея и Германия вместе составили 70 % от мирового объёма продаж роботов. В автомобильной промышленности, секторе с особенно высокой степенью автоматизации, в Японии была самая высокая плотность промышленных роботов в мире: 1414 роботов на 10 000 сотрудников. Искусственные нейронные сети, такие как технология Concept processing[англ.] в программном обеспечении Электронная медицинская карта, используются в качестве клинических систем принятия решений для медицинской диагностики. Другие задачи в медицине, которые потенциально могут выполняться искусственным интеллектом и начинают разрабатываться, включают: В настоящее время[когда?] в отрасли здравоохранения работает более 90 стартапов, основанных на применении искусственного интеллекта[70]. Технологии искусственного интеллекта применяются в управлении человеческими ресурсами и рекрутинге: для просмотра резюме и ранжирования кандидатов в соответствии с их уровнем квалификации, для прогнозирования успеха кандидата в заданных ролях через платформы сопоставления должностей, для создания чат-ботов, которые могут автоматизировать повторяющиеся коммуникационные задачи. В частности, с 2016 по 2017 год корпорация Unilever использовала искусственный интеллект для отбора персонала начального уровня. Unilever использовал игры, основанные на нейробиологии, записанные интервью и анализ лицевых и речевых сигналов, чтобы предсказать успех кандидата в компании. Unilever сотрудничала с Pymetrics и HireVue, чтобы создать новую систему анализа на основе искусственного интеллекта и увеличить число рассматриваемых кандидатов с 15 тыс. до 30 тыс. в течение одного года. Unilever также сократил время на обработку заявлений от 4 месяцев до 4 недель и сэкономил более 50 тыс. часов времени рекрутеров. Хотя эволюция музыки всегда была затронута технологией, искусственный интеллект позволил с помощью научных достижений подражать, в какой-то мере, человекоподобной композиции. Среди известных ранних результатов — система Дэвида Коупа «Эмили Хауэлл», ставшая известной в области алгоритмической компьютерной музыки. Алгоритм, лежащий в основе Эмили Хауэлл, зарегистрирован как патент США[71]. Другие разработки, такие как AIVA[англ.], сосредоточены на сочинении симфоний, в основном классической музыки для фильмов. Эта разработка достигла известности, став первым виртуальным композитором, который был признан музыкальной профессиональной ассоциацией[72]. Искусственный интеллект может даже создавать музыку, пригодную для использования в медицинских условиях, например, Melomics использует компьютерную музыку для снятия стресса и боли[73]. Более того, такие инициативы, как Google Magenta, проводимые командой Google Brain, хотят узнать, способен ли искусственный интеллект создавать неотразимое искусство. В исследовательской лаборатории Sony CSL их программное обеспечение Flow Machines создаёт поп-песни, изучая стили музыки из огромной базы данных песен. Анализируя уникальные комбинации стилей и методы оптимизации, искусственный интеллект может сочинять музыку в любом существующем стиле. В декабре 2020 года в России, в рамках конференции AI Journey (организатор Сбербанк, модератор Александр Ведяхин) российские исполнители Zivert, Рахим, Егор Шип и Даня Милохин выступали вместе с искусственным интеллектом[74]. Компания Narrative Science[англ.] делает компьютерные новости и отчёты коммерчески доступными, включая обобщение спортивных событий на основе статистических данных из игры на английском языке. Она также создаёт финансовые отчёты и анализ недвижимости. Аналогично, компания Automated Insights[англ.] генерирует персонализированные сводки и превью для Yahoo Sports Fantasy Football. Предполагается, что к 2014 году компания будет создавать миллиард историй в год, по сравнению с 350 миллионами в 2013 году[75].
Ведущие медиа-компании, такие как Associated Press, Forbes, The New York Times, Los Angeles Times и ProPublica[англ.], начали автоматизировать новостной контент. Появилось такое понятие, как автоматизированная журналистика[76]. Echobox — компания, разрабатывающая программное обеспечение, которая помогает издателям увеличивать трафик путём «разумного» размещения статей на платформах социальных сетей, таких как Facebook и Twitter. Анализируя большие объёмы данных, искусственный интеллект узнаёт, как конкретные аудитории реагируют на разные статьи в разное время суток. Затем он выбирает лучшие истории для публикации и лучшее время, чтобы опубликовать их. Он использует как исторические данные, так и данные в реальном времени, чтобы понять, что сработало хорошо в прошлом, а также то, что в настоящее время имеет тенденцию в Интернете. Другая компания, называемая Yseop[англ.], использует искусственный интеллект, чтобы превратить структурированные данные в интеллектуальные комментарии и рекомендации на естественном языке. Yseop может писать финансовые отчёты, исполнительные резюме, персонализированные продажи или маркетинговые документы и многое другое со скоростью тысяч страниц в секунду и на нескольких языках, включая английский, испанский, французский и немецкий[77]. Существует также возможность того, что в будущем искусственный интеллект будет писать литературные произведения. В 2016 году японская система написала небольшой рассказ, номинированый на литературную премию[78]. Искусственный интеллект реализуется в автоматизированных онлайн-помощниках, которые можно рассматривать как чат-боты на веб-страницах. Это может помочь предприятиям снизить затраты на наем и обучение сотрудников. Основной технологией для таких систем является естественная обработка языка. Pypestream[англ.] использует автоматизированное обслуживание клиентов для своего мобильного приложения, предназначенного для упрощения связи с клиентами[79]. Многие телекоммуникационные компании используют эвристический поиск в управлении своими сотрудниками, например, BT Group развернула эвристический поиск в приложении для планирования, которое обеспечивает рабочие графики 20 000 инженеров. Большие надежды возлагаются на использование систем искусственного интеллекта для управления сетями сотовой связи 6G[80]. В 1990-х годах были предприняты первые попытки массового производства ориентированных на дом типов базового искусственного интеллекта для образования или отдыха. Это значительно продвинулось с цифровой революцией и помогло людям, особенно детям, познакомиться с различными типами искусственного интеллекта, в частности, в виде тамагочи и домашних животных, iPod Touch, Интернета и первого широко распространённого робота, Furby. Год спустя улучшенный тип домашнего робота был выпущен в виде Aibo, роботизированной собаки с интеллектуальными функциями и автономией. Такие компании, как Mattel, создают ассортимент игрушек с поддержкой искусственного интеллекта для детей в возрасте трёх лет. Используя запатентованные системы и средства распознавания речи, они могут понимать разговоры, давать интеллектуальные ответы и быстро учиться[81]. Искусственный интеллект также используется в индустрии игр, например, в видеоиграх используются боты, которые предназначены для того, чтобы играть роль противников, где люди недоступны или нежелательны. В 2018 году исследователи из Корнеллского университета создали пару генеративно-состязательных сетей и обучили их на примере игры-шутера Doom. В процессе обучения нейронные сети определили основные принципы построения уровней этой игры и после этого они стали способны генерировать новые уровни без помощи со стороны людей[82]. Для автоматических коробок передач в автомобилях были разработаны контроллеры нечеткой логики. Например, в 2006 Audi TT, VW Touareg и VW Caravell используют DSG коробку передач, которая основана на нечеткой логике. Ряд моделей Škoda (Škoda Fabia) также в настоящее время включает контроллер на основе нечеткой логики. Сегодняшние[уточнить] автомобили имеют вспомогательные функции, основанные на искусственном интеллекте, такие как самозаряд[уточнить] и расширенные средства круиз-контроля. Искусственный интеллект используется для оптимизации приложений управления дорожным трафиком, что, в свою очередь, сокращает время ожидания, потребление энергии и вредные выбросы на целых 25 %[83]. В будущем будут разработаны полностью автономные автомобили. Ожидается, что искусственный интеллект на транспорте обеспечит безопасную, эффективную и надежную транспортировку, минимизируя пагубное воздействие на окружающую среду и общество. Основной проблемой для развития этого направления является тот факт, что транспортные системы по своей сути являются сложными системами, включающими очень большое количество компонентов и разных сторон, каждый из которых имеет разные и часто противоречивые цели[84]. В июне 2019 года прошло тестирование программно-аппаратного комплекса, работающего по технологии технического зрения, на тепловозе ЧМЭ3-1562 приписки депо Лоста Северной железной дороги. В случае опасности (неправильно поставленная стрелка, препятствие на дороге, запрещающий сигнал светофора) система сначала подаёт светозвуковой сигнал машинисту а затем включает торможение[85]. Комплекс, получивший обозначение ПАК-ПМЛ (программно-аппаратный комплекс помощи машинисту локомотива), использует искусственный интеллект, накапливая данные о уже совершённых поездках и используя их при оценке обстановки. В начале сентября 2020 года на станции Лоста начался опытный пробег уже двух ЧМЭ3, оснащённых ПАК-ПМЛ. Пробег является частью пилотного проекта ОАО «РЖД» «Внедрение технологии технического зрения для управления и мониторинга подвижного состава». В свою очередь, этот проект является важным этапом глобального корпоративного проекта «Цифровой локомотив»[86]. В традиционном сельском хозяйстве из-за неоптимальных действий человека случаются потери зерна при сборе урожая, перерасход топлива из-за неоптимального движения комбайна, неоправданно долгая уборка урожая. ИИ решает эти задачи путём автономного управления комбайнами, тракторами и опрыскивателями. В России по состоянию на 2023 год работает более 1000 «умных» комбайнов (разработчик системы — Cognitive Pilot)[87]. В Концепции развития уголовно-исполнительной системы РФ на период до 2030 года, утвержденной распоряжением Правительства РФ в мае 2021 года, использованию ИИ отводилось довольно большое место[88]. В частности, предполагалось ...создание и развитие систем сбора и обработки данных и принятия решений на основе результатов применения искусственного интеллекта в части расположения учреждений уголовно-исполнительной системы, обеспечения безопасности (в том числе с использованием видеоаналитики и прогнозирования поведения осужденных и сотрудников уголовно-исполнительной системы), контроля за лицами, в отношении которых применены меры пресечения, не связанные с заключением под стражу, и контроля за поведением освобожденных.[88] В исправительной колонии № 6 (ИК-6) в Астраханской области до 2025 года планируется запустить пилотный проект по внедрению системы, которая смогла бы отслеживать Система должна распознавать около 60 правонарушений в штрафном изоляторе, в столовой, в отряде строгого режима и других структурах колонии. Также ФСИН собирается интегрировать систему безопасности персонала: например, определять одиночное передвижение сотрудников-женщин, «вступление в неслужебные связи со спецконтингентом» и прочее. В колонии предполагается организовать пропускной режим по биометрическим данным минимум на 50 тысяч шаблонов лиц и отпечатков ладони[89]. Различные средства искусственного интеллекта также широко используются в области обеспечения безопасности, распознавании речи и текста, интеллектуального анализа данных и фильтрации спама в электронной почте. Также разрабатываются приложения для распознавания жестов (понимание языка жестов машинами), индивидуальное распознавание голоса, глобальное распознавание голоса (от множества людей в шумной комнате), распознавание лица для интерпретации эмоций и невербальных сигналов. Другие приложения — это роботизированная навигация, преодоление препятствий и распознавание объектов. Объединение искусственного интеллекта с экспериментальными данными ускорило создание новой разновидности металлического стекла в 200 раз. Стеклянная природа нового материала делает его более прочным, легким и коррозионно-стойким, чем современная сталь. Группа, возглавляемая учёными Национальной ускорительной лаборатории SLAC Министерства энергетики, Национального института стандартов и технологий и Северо-западного университета США, сообщила о сокращении затрат для обнаружения и улучшения металлического стекла на долю времени и стоимости. Как сообщил представитель группы разработчиков Апурва Мехта[90], «Мы смогли сделать и отобрать 20 000 вариантов за один год»[91]. В феврале 2021 года в США провели испытания искусственного интеллекта в воздушном бою «двое против одного». Новый этап испытаний, который получил название Scrimmage 1, проводился в лаборатории прикладной физики Университета Джонса Хопкинса. В этом воздушном бою два истребителя F-16 Fighting Falcon под управлением искусственного интеллекта действовали в группе и вели бой против одного такого же самолёта. Во время нового этапа испытаний нейросетевые алгоритмы вели не только ближний маневренный воздушный бой, но и действовали на расстоянии от противника, выявляя его с помощью радаров и поражая ракетами на расстоянии[92]. Искусственный интеллект и нейрофизиология, эпистемология, когнитивная психология образуют более общую науку, называемую когнитология. Важную роль в искусственном интеллекте играет философия. Также с проблемами искусственного интеллекта тесно связана эпистемология — наука о знании в рамках философии. Философы, занимающиеся данной проблематикой, решают вопросы, схожие с теми, которые решаются инженерами о том, как лучше представлять и использовать знания и информацию. Методология когнитивного моделирования предназначена для анализа и принятия решений в плохо определённых ситуациях. Была предложена Робертом Аксельродом[93]. Основана на моделировании субъективных представлений экспертов о ситуации и включает: методологию структуризации ситуации: модель представления знаний эксперта в виде знакового орграфа (когнитивной карты) (F, W), где F — множество факторов ситуации, W — множество причинно-следственных отношений между факторами ситуации; методы анализа ситуации. В настоящее время методология когнитивного моделирования развивается в направлении совершенствования аппарата анализа и моделирования ситуации. Здесь предложены модели прогноза развития ситуации; методы решения обратных задач. Наука «о создании искусственного разума» не могла не привлечь внимание философов. С появлением первых интеллектуальных систем были затронуты фундаментальные вопросы о человеке и знании, а отчасти о мироустройстве. Философские проблемы создания искусственного интеллекта можно разделить на две группы, условно говоря, «до и после разработки искусственного интеллекта». Первая группа отвечает на вопрос: «Что такое искусственный интеллект, возможно ли его создание, и, если возможно, то как это сделать?» Вторая группа (этика искусственного интеллекта) задаётся вопросом: «Каковы последствия создания искусственного интеллекта для человечества?». Течение трансгуманизма считает создание искусственного интеллекта одной из важнейших задач человечества. Среди исследователей до сих пор не существует какой-либо доминирующей точки зрения на критерии интеллектуальности, систематизацию решаемых целей и задач, нет даже строгого определения науки. Существуют разные точки зрения на вопрос, что считать интеллектом. Наиболее горячие споры в философии искусственного интеллекта вызывает вопрос возможности мышления творения человеческих рук. Вопрос «Может ли машина мыслить?», который подтолкнул исследователей к созданию науки о моделировании человеческого разума, был поставлен Аланом Тьюрингом в 1950 году. Две основных точки зрения на этот вопрос носят названия гипотез сильного и слабого искусственного интеллекта. Термин «сильный искусственный интеллект» ввёл Джон Сёрль, его же словами подход и характеризуется: Более того, такая программа будет не просто моделью разума; она в буквальном смысле слова сама и будет разумом, в том же смысле, в котором человеческий разум — это разум[94]. Мысленный эксперимент «Китайская комната» Джона Сёрля — аргумент в пользу того, что прохождение теста Тьюринга не является критерием наличия у машины подлинного процесса мышления. Аналогичную позицию занимает и Роджер Пенроуз, который в своей книге «Новый ум короля» аргументирует невозможность получения процесса мышления на основе формальных систем[95]. Мэтью Хатсон в статье, опубликованной в журнале Science в 2018 году, показывает, что область искусственного интеллекта на момент публикации находится в кризисе воспроизводимости результатов[96]. По мнению автора и проинтервьюированных им специалистов кризис связан со сложившейся в области практикой закрытости кода и данных. Елиезер Юдковски исследует в Исследовательском институте машинного интеллекта (SIAI) в США проблемы глобального риска, которые может создать будущий сверхчеловеческий искусственный интеллект, если его не запрограммировать на дружественность к человеку[97]. В 2004 году SIAI был создан сайт AsimovLaws.com, созданный для обсуждения этики искусственного интеллекта в контексте проблем, затронутых в фильме «Я, робот». На этом сайте они хотели показать, что законы робототехники Азимова небезопасны, поскольку, например, могут побудить искусственный интеллект захватить власть на Земле, чтобы «защитить» людей от вреда. Ученые[какие?] предупредили о риске гибели человечества из-за развития искусственного интеллекта[98][значимость факта?] Далай-лама XIV считает, что нельзя утверждать, что машины обладают сознанием или способностью к познаванию, а утверждение о том, что сознание появляется в силу материальных причин, с точки зрения буддизма неприемлемо[99]. Другие традиционные конфессии достаточно редко описывают проблематику искусственного интеллекта. Отдельные богословы обращают внимание на предмет, например, протоиерей Михаил Захаров[100], рассуждая с точки зрения христианского мировоззрения, ставит следующий вопрос: «Человек есть разумно-свободное существо, сотворенное Богом по Его образу и подобию. Мы привыкли все эти определения относить к биологическому виду Homo Sapiens. Но насколько это обосновано?»[101]. Отвечает он на этот вопрос так:  Если предположить, что исследования в области искусственного интеллекта когда-либо приведут к появлению искусственного существа, превосходящего человека по интеллекту, обладающего свободой воли, будет ли это означать, что это существо — человек? … человек есть творение Божие. Можем ли мы это существо назвать творением Божиим? На первый взгляд, оно есть творение человека. Но и при сотворении человека вряд ли стоит буквально понимать, что Бог Своими руками из глины вылепил первого человека. Вероятно это иносказание, указывающее на материальность человеческого тела, созданного по воле Божией. Но без воли Божией ничего не происходит в этом мире. Человек, как сотворец этого мира, может, исполняя волю Божию, создавать новые твари. Такие твари, созданные руками человека по Божией воле, вероятно можно назвать творениями Божиими. Ведь человек создает новые виды животных и растений. А мы считаем растения и животных творениями Божиими. Так же можно относиться и к искусственному существу не биологической природы. В научно-фантастической литературе искусственный интеллект чаще всего изображается как сила, которая пытается свергнуть власть человека (Омниус, HAL 9000 в «Космической одиссее 2001 года», Превосходство, Скайнет, Colossus[англ.], «Матрица» и репликант в «Бегущий по лезвию», ИскИны в «Гиперион»), Альтрон, или обслуживающий гуманоид (C-3PO, Дейта, KITT и КАРР, «Двухсотлетний человек»). Неизбежность доминирования над миром искусственного интеллекта, вышедшего из-под контроля, оспаривается такими его исследователями, как фантаст Айзек Азимов и кибернетик Кевин Уорик, известный множественными экспериментами по интеграции машин и живых существ. В романе «Выбор по Тьюрингу» писателя-фантаста Гарри Гаррисона и учёного Марвина Мински[102] поднимется вопрос утраты человечности у человека, в мозг которого была вживлена ЭВМ, и появления человечности у машины с искусственным интеллектом, в память которой была скопирована информация из головного мозга человека. Некоторые научные фантасты, например Вернор Виндж, также размышляли над последствиями появления искусственного интеллекта, которое, по-видимому, вызовет резкие драматические изменения в обществе. Такой период называют технологической сингулярностью. Тема искусственного интеллекта рассматривается под разными углами в творчестве Роберта Хайнлайна: гипотеза возникновения самоосознания при усложнении структуры далее определённого критического уровня и наличии взаимодействия с окружающим миром и другими носителями разума («The Moon Is a Harsh Mistress», «Time Enough For Love», персонажи Майкрофт, Дора и Ая в цикле «История будущего»), проблемы развития после гипотетического самоосознания и некоторые социально-этические вопросы («Friday»). Социально-психологические проблемы взаимодействия человека с искусственным интеллектом рассматривает и роман Филипа К. Дика «Снятся ли андроидам электроовцы?», известный также по экранизации «Бегущий по лезвию». В творчестве фантаста и философа Станислава Лема описано и во многом предвосхищено создание виртуальной реальности, искусственного интеллекта, нанороботов и многих других проблем философии искусственного интеллекта. Особенно стоит отметить футурологию «Сумма технологии». Кроме того, в приключениях Ийона Тихого неоднократно описываются взаимоотношения живых существ и машин: бунт бортового компьютера с последующими неожиданными событиями (11 путешествие), адаптация роботов в человеческом обществе («Стиральная трагедия» из «Воспоминаний Ийона Тихого»), построение абсолютного порядка на планете путём переработки живых жителей (24-е путешествие), изобретения Коркорана и Диагора («Воспоминания Ийона Тихого»), психиатрическая клиника для роботов («Воспоминания Ийона Тихого»). Кроме того, существует целый цикл повестей и рассказов «Кибериада», где почти всеми персонажами являются роботы, которые являются далёкими потомками роботов, сбежавших от людей (людей они именуют бледнотиками и считают их мифическими существами). Начиная практически с 1960-х годов вместе с написанием фантастических рассказов и повестей снимаются фильмы об искусственном интеллекте. Многие повести авторов, признанных во всём мире, экранизируются и становятся классикой жанра, другие становятся вехой в развитии кинофантастики, например, Бегущий по лезвию, Терминатор, Матрица, Звёздные Войны и так далее. Применение искусственного интеллекта в некоторых случаях создает правовые вопросы. Так, Стивен Тейлер (Stephen Thaler) изобрел «машину, назначение которой — делать изобретения», которую он назвал DABUS (Device for Autonomous Bootstraping of Unified Sentience с англ. — «устройство для автономного создания объединённого сознания»). Она «изобрела» пищевой контейнер и сигнальный фонарик оригинальной конструкции. Стивен Тейлер подал в Великобритании заявки для получения патентов на эти изобретения. Однако регистрирующий орган отказался принять эти заявки к рассмотрению. Стивен Тейлер обжаловал этот отказ, и дело в 2021 году дошло до Апелляционного Суда Англии и Уэльса. В итоге Стивен Тейлер проиграл это дело, однако в ЮАР он смог получить патенты на изобретения, сделанные при помощи DABUS[103]. Американская художница Кристина Каштанова создала комикс Zarya of the Dawn. Иллюстрации были сгенерированы по запросам художницы нейросетью Midjourney, тексты она писала сама. На обложке книги авторами значатся Kashtanova и Midjourney. Каштанова направила в Бюро авторского права США запрос на регистрацию своего авторского права на книгу (это не является обязательным для признания авторского права, но желательно на случай будущих судебных разбирательств). Бюро авторского права США сначала зарегистрировало авторское право, но затем в 2023 году объявило о своём намерении аннулировать ранее выданный сертификат и выдать новый, согласно которому авторское право будет покрывать только подбор и расположение картинок, а также сопроводительный текст[104]. 13 марта 2024 года Европейский парламент одобрил первый в мире комплексный закон по регулированию искусственного интеллекта[105]. Закон классифицирует все основанные на ИИ системы и инструменты по уровню риска — от низкого до неприемлемого. Он предусматривает запрет на использование систем распознавания лиц и других систем «удаленной биометрической идентификации» в режиме реального времени в общественных местах, а также систем распознавания эмоций. Также запрещено будет использование полицией систем предиктивной аналитики для профилактики правонарушений и т. д. Кроме того, закон довольно жестко регулирует генеративный ИИ (такой как ChatGPT) и «высокорисковые системы, основанные на ИИ», среди которых беспилотные автомобили и медицинское оборудование[106]. В РФ вопросы, связанные с искусственным интеллектом отражаются в положениях ряда указов Президента и законов Российской Федерации[107]. Задачи искусственного интеллекта сформированы в Указе Президента Российской Федерации «О развитии искусственного интеллекта в Российской Федерации»[108]. Задача создания комплексной системы регулирования общественных отношений, возникающих в связи с развитием и использованием технологий искусственного интеллекта, а также определение понятия «искусственный интеллект» как комплекса технологических решений, позволяющего имитировать когнитивные функции человека (включая самообучение и поиск решений без заранее заданного алгоритма) и получать при выполнении конкретных задач результаты, сопоставимые, как минимум, с результатами интеллектуальной деятельности человека, представлены в Федеральном законе «О проведении эксперимента по установлению специального регулирования в целях создания необходимых условий для разработки и внедрения технологий искусственного интеллекта в субъекте Российской Федерации — городе федерального значения Москве»[109]. В распоряжении Правительства Российской Федерации «Об утверждении Концепции развития регулирования отношений в сфере технологий искусственного интеллекта и робототехники на период до 2024 г.»[110] указано, что одной из основных проблем в правовом регулировании является правовой режим результатов интеллектуальной деятельности, созданных с использованием систем искусственного интеллекта. Автором произведения в соответствии с Гражданским кодексом является гражданин, творческим трудом которого создано произведение. Также в Постановлении Пленума Верховного Суда Российской Федерации «О применении части четвёртой Гражданского кодекса Российской Федерации»[111] указывается, что творческий характер создания произведения не зависит от того, создано произведение автором собственноручно или с использованием технических средств. Таким образом, искусственный интеллект на настоящий момент не наделяется авторскими правами в России. Исходя из норм российского права, искусственный интеллект рассматривают только в качестве инструмента при создании объекта авторских прав. 1 Происхождение и смысл термина 2 Предпосылки развития науки искусственного интеллекта

2.1 История развития искусственного интеллекта в СССР и России

2.1.1 Российская империя
2.1.2 СССР
2.1.3 Россия 2.1 История развития искусственного интеллекта в СССР и России

2.1.1 Российская империя
2.1.2 СССР
2.1.3 Россия 2.1.1 Российская империя 2.1.2 СССР 2.1.3 Россия 3 Подходы и направления

3.1 Подходы к пониманию проблемы

3.1.1 Тест Тьюринга и интуитивный подход
3.1.2 Символьный подход
3.1.3 Логический подход
3.1.4 Агентно-ориентированный подход
3.1.5 Гибридный подход
3.1.6 Символьное моделирование мыслительных процессов
3.1.7 Работа с естественными языками
3.1.8 Представление и использование знаний
3.1.9 Машинное обучение
3.1.10 Биологическое моделирование искусственного интеллекта
3.1.11 Робототехника
3.1.12 Машинное творчество
3.1.13 Другие области исследований 3.1 Подходы к пониманию проблемы

3.1.1 Тест Тьюринга и интуитивный подход
3.1.2 Символьный подход
3.1.3 Логический подход
3.1.4 Агентно-ориентированный подход
3.1.5 Гибридный подход
3.1.6 Символьное моделирование мыслительных процессов
3.1.7 Работа с естественными языками
3.1.8 Представление и использование знаний
3.1.9 Машинное обучение
3.1.10 Биологическое моделирование искусственного интеллекта
3.1.11 Робототехника
3.1.12 Машинное творчество
3.1.13 Другие области исследований 3.1.1 Тест Тьюринга и интуитивный подход 3.1.2 Символьный подход 3.1.3 Логический подход 3.1.4 Агентно-ориентированный подход 3.1.5 Гибридный подход 3.1.6 Символьное моделирование мыслительных процессов 3.1.7 Работа с естественными языками 3.1.8 Представление и использование знаний 3.1.9 Машинное обучение 3.1.10 Биологическое моделирование искусственного интеллекта 3.1.11 Робототехника 3.1.12 Машинное творчество 3.1.13 Другие области исследований 4 Современный искусственный интеллект

4.1 Известные системы искусственного интеллекта
4.2 Исследовательские центры 4.1 Известные системы искусственного интеллекта 4.2 Исследовательские центры 5 Области применения искусственного интеллекта

5.1 Финансы

5.1.1 Алгоритмическая торговля
5.1.2 Исследования рынка и интеллектуальный анализ данных
5.1.3 Управление личными финансами
5.1.4 Управление финансовым портфелем
5.1.5 Андеррайтинг
5.1.6 Банкинг


5.2 Государственное управление
5.3 Военное дело
5.4 Спецслужбы
5.5 Тяжёлая промышленность
5.6 Медицина
5.7 Управление человеческими ресурсами и рекрутинг
5.8 Музыка
5.9 Новости, издательство и писательство
5.10 Онлайн и телефонные службы поддержки клиентов
5.11 Техническое обслуживание телекоммуникаций
5.12 Развлечение и игры
5.13 Транспорт

5.13.1 Автомобильный транспорт
5.13.2 Железнодорожный транспорт
5.13.3 Сельхозтехника


5.14 Пенитенциарная система
5.15 Иные области применения 5.1 Финансы

5.1.1 Алгоритмическая торговля
5.1.2 Исследования рынка и интеллектуальный анализ данных
5.1.3 Управление личными финансами
5.1.4 Управление финансовым портфелем
5.1.5 Андеррайтинг
5.1.6 Банкинг 5.1.1 Алгоритмическая торговля 5.1.2 Исследования рынка и интеллектуальный анализ данных 5.1.3 Управление личными финансами 5.1.4 Управление финансовым портфелем 5.1.5 Андеррайтинг 5.1.6 Банкинг 5.2 Государственное управление 5.3 Военное дело 5.4 Спецслужбы 5.5 Тяжёлая промышленность 5.6 Медицина 5.7 Управление человеческими ресурсами и рекрутинг 5.8 Музыка 5.9 Новости, издательство и писательство 5.10 Онлайн и телефонные службы поддержки клиентов 5.11 Техническое обслуживание телекоммуникаций 5.12 Развлечение и игры 5.13 Транспорт

5.13.1 Автомобильный транспорт
5.13.2 Железнодорожный транспорт
5.13.3 Сельхозтехника 5.13.1 Автомобильный транспорт 5.13.2 Железнодорожный транспорт 5.13.3 Сельхозтехника 5.14 Пенитенциарная система 5.15 Иные области применения 6 Связь с другими науками и явлениями культуры

6.1 Психология и когнитология
6.2 Философия

6.2.1 Вопросы создания искусственного интеллекта
6.2.2 Этика


6.3 Религия
6.4 Научная фантастика

6.4.1 Фильмы 6.1 Психология и когнитология 6.2 Философия

6.2.1 Вопросы создания искусственного интеллекта
6.2.2 Этика 6.2.1 Вопросы создания искусственного интеллекта 6.2.2 Этика 6.3 Религия 6.4 Научная фантастика

6.4.1 Фильмы 6.4.1 Фильмы 7 Правовые вопросы

7.1 Регулирование ИИ в РФ 7.1 Регулирование ИИ в РФ 8 См. также 9 Примечания 10 Литература 11 Ссылки Научное направление, в рамках которого ставятся и решаются задачи аппаратного или программного моделирования тех видов человеческой деятельности, которые традиционно считаются интеллектуальными[1]. Свойство интеллектуальных систем выполнять функции (творческие), которые традиционно считаются прерогативой человека. При этом интеллектуальная система — это техническая или программная система, способная решать задачи, традиционно считающиеся творческими, принадлежащие конкретной предметной области, знания о которой хранятся в памяти такой системы. Структура интеллектуальной системы включает три основных блока — базу знаний, решатель и интеллектуальный интерфейс, позволяющий вести общение с ЭВМ без специальных программ для ввода данных[1]. Направление в информатике и информационных технологиях, задачей которого является воссоздание с помощью вычислительных систем и иных искусственных устройств разумных рассуждений и действий[6]. Способность системы правильно интерпретировать внешние данные, извлекать уроки из таких данных и использовать полученные знания для достижения конкретных целей и задач при помощи гибкой адаптации[7]. нисходящий (англ. Top-Down AI), семиотический — создание экспертных систем, баз знаний и систем логического вывода, имитирующих высокоуровневые психические процессы: мышление, рассуждение, речь, эмоции, творчество и тому подобные; восходящий (англ. Bottom-Up AI), биологический — изучение нейронных сетей и эволюционных вычислений, моделирующих интеллектуальное поведение на основе биологических элементов, а также создание соответствующих вычислительных систем, таких как нейрокомпьютер или биокомпьютер. решение проблем, связанных с приближением специализированных систем искусственного интеллекта к возможностям человека, и их интеграции, которая реализована природой человека (см. Усиление интеллекта); создание искусственного разума, представляющего интеграцию уже созданных систем искусственного интеллекта в единую систему, способную решать проблемы человечества. ChatGPT — чат-бот с искусственным интеллектом от компании OpenAI, основанный на большой языковой модели GPT-3.5; способен работать в диалоговом режиме на естественных языках[43]; Deep Blue — шахматная программа разработки IBM, победила чемпиона мира по шахматам[44]; AlphaGo — программа игры в го разработки Google DeepMind, выиграла матч в го у корейского профессионала 9 дана Ли Седоля; Watson — перспективная разработка IBM, способная воспринимать человеческую речь и производить вероятностный поиск, с применением большого количества алгоритмов; для демонстрации работы приняла участие в американской игре «Jeopardy!», где системе удалось выиграть в обеих играх[45]; MYCIN — одна из ранних экспертных систем, которая могла диагностировать небольшой набор заболеваний, причём часто так же точно, как и доктора; 20Q — проект по мотивам классической игры «20 вопросов», основанный на идеях искусственного интеллекта; стал очень популярен после появления в Интернете на сайте 20q.net[46]; ViaVoice — система распознавания речи, способная обслуживать потребителей. Midjourney — сервис, генерирующий изображения на основе текстовых запросов. Соединённые Штаты Америки
Массачусетский технологический институт
Исследовательский институт машинного интеллекта Массачусетский технологический институт Исследовательский институт машинного интеллекта Германия
Немецкий исследовательский центр по искусственному интеллекту Немецкий исследовательский центр по искусственному интеллекту Япония
Национальный институт современной промышленной науки и технологии (AIST) Национальный институт современной промышленной науки и технологии (AIST) Россия
Научный совет по методологии искусственного интеллекта Российской академии наук Научный совет по методологии искусственного интеллекта Российской академии наук Индия
Индийский технологический институт в Мадрасе Индийский технологический институт в Мадрасе Компьютерная интерпретация медицинских изображений. Такие системы помогают сканировать цифровые изображения, например от компьютерной томографии, для типичных проявлений и для выделения заметных отклонений, таких как возможные заболевания. Типичным применением является обнаружение опухоли. Анализ сердечного ритма[66] Проект Watson — программа вопросов и ответов, которая создана для помощи врачам-онкологам Роботы-помощники для ухода за престарелыми[67] Обработка медицинских записей для предоставления более полезной информации Создание планов лечения Выявление повышенного риска заболеваний Помощь в повторяющихся заданиях, включая управление приёмом медикаментов Предоставление консультаций Создание лекарств[68] Использование человекоподобных манекенов вместо пациентов для клинического обучения[69] факты покидания заключёнными территории, курение в неположенном месте, нарушение распорядка дня, нарушение формы одежды, отказ от посещения массовых мероприятий, невыполнение требований администрации и др. Применение искусственного интеллекта Искусственный интеллект и авторское право Искусственный интеллект в искусстве Дружественный искусственный интеллект Сильный и слабый искусственный интеллект Игровой искусственный интеллект Этика искусственного интеллекта Робот Искусственная нейронная сеть Машинное обучение Глубокое обучение Нейронный процессор Искусственный геном Искусственное воображение ↑ 1 2 3 Аверкин А. Н., Гаазе-Рапопорт М. Г., Поспелов Д. А. Толковый словарь по искусственному интеллекту. — М.:Радио и связь, 1992. — 256 с.  (неопр.) Дата обращения: 26 мая 2010. Архивировано 5 мая 2010 года. ↑ 1 2 3 What is Artificial Intelligence? Архивная копия от 18 ноября 2015 на Wayback Machine FAQ от Джона Маккарти, 2007 ↑ Анатолий Гершман. Заблуждения искусственного интеллекта  (рус.). Postnauka.ru. Дата обращения: 6 октября 2017. Архивировано 6 октября 2017 года. ↑ М. Эндрю. Реальная жизнь и искусственный интеллект // «Новости искусственного интеллекта», РАИИ, 2000 ↑ Гаврилова Т. А. Хорошевский В. Ф. Базы знаний интеллектуальных систем: Учебник для вузов (недоступная ссылка) ↑ 1 2 Г. С. Осипов. Искусственный интеллект: состояние исследований и взгляд в будущее  (неопр.). Дата обращения: 26 мая 2010. Архивировано 11 сентября 2010 года. ↑ Andreas Kaplan; Michael Haenlein (2019) Siri, Siri in my Hand, who’s the Fairest in the Land? On the Interpretations, Illustrations and Implications of Artificial Intelligence, Business Horizons, 62(1)  (неопр.). Дата обращения: 30 декабря 2018. Архивировано 21 ноября 2018 года. ↑ Ильясов Ф. Н. Разум искусственный и естественный // Известия АН Туркменской ССР, серия общественных наук. 1986. № 6. С. 46—54. ↑ Алан Тьюринг, Могут ли машины мыслить?  (неопр.) Дата обращения: 22 августа 2011. Архивировано 24 марта 2012 года. ↑ Изобретения С. Н. Корсакова  (неопр.). Дата обращения: 4 ноября 2013. Архивировано 9 марта 2014 года. ↑ Михайлов А. С. Усиление возможностей разума – изобретения С.Н. Корсакова // Искусственный интеллект и принятие решений. — 2016. — № 2. — С. 5—15. Архивировано 26 июня 2021 года. ↑ М. В. Донской «История Каиссы» Архивная копия от 24 декабря 2014 на Wayback Machine ↑ Е. Гик. Глава 15. ЭВМ и шахматы // Шахматы и математика. — М.: Наука, 1983. — (Библиотечка «Квант»). Архивировано 26 июля 2020 года. ↑ Ильенков Э. В. Об идолах и идеалах. Архивная копия от 3 января 2023 на Wayback Machine — Собрание сочинений. Т. 3. — М.: Канон плюс, 2020. С. 273. ↑ Газета «Коммерсантъ» № 92 от 30.05.2019, стр. 1 Правительству прибавят искусственного интеллекта Архивная копия от 4 июня 2019 на Wayback Machine ↑ Лилит Саркисян, Мария Ефимова. Но властелином быть обязан (рус.) // Новая газета. — 2019. — № 59. — С. 9. Архивировано 4 июня 2019 года. ↑ Указ Президента Российской Федерации О развитии искусственного интеллекта в Российской Федерации  (неопр.). Дата обращения: 28 октября 2019. Архивировано 28 октября 2019 года. ↑ В России создадут альянс в сфере искусственного интеллекта. В задачи альянса войдет контроль за реализацией национальной стратегии развития искусственного интеллекта, утверждённой президентом России Владимиром Путиным в октябре  (рус.). ТАСС (10 ноября 2019). Дата обращения: 2 августа 2023. Архивировано 2 августа 2023 года. ↑ Альянс в сфере искусственного интеллекта (официальный сайт)  (неопр.). Дата обращения: 2 августа 2023. Архивировано 24 ноября 2022 года. ↑ Президиум правкомиссии по цифровому развитию утвердил федеральный проект «Искусственный интеллект» // Экспертный центр электронного государства. — 2020. — 31 августа. — Дата обращения: 11.05.2021. ↑ Александр Кирьянов, Игорь Королёв. Замминистра экономического развития Оксана Тарасенко в интервью CNews — о развитии искусственного интеллекта в России : В России началась реализация федерального проекта «Искусственный интеллект». // CNews. — 2021. — 9 февраля. — Дата обращения: 11.05.2021. ↑ AI Journey вошла в топ-3 мировых конференций по искусственному интеллекту // SberPress : сервис новостей об экосистеме Сбера. — 2021. — 2 декабря. — Дата обращения: 11.05.2021. ↑ Конференция по искусственному интеллекту : Владимир Путин в режиме видеоконференции принял участие в основной дискуссии конференции по искусственному интеллекту Artificial Intelligence Journey (AI Journey 2020) на тему «Искусственный интеллект — главная технология XXI века». // Президент России : сайт администрации президента РФ. — 2020. — 4 декабря. — Дата обращения: 11.05.2021. ↑ Правительство окажет поддержку разработчикам проектов в сфере искусственного интеллекта : Работа ведётся по поручению Президента // сайт Правительства РФ. — 2021. — 29 марта. — Дата обращения: 11.05.2021. ↑ Путин поручил обеспечить поддержку центрам разработки технологий в сфере ИИ  (рус.). Ведомости (7 сентября 2023). Дата обращения: 29 сентября 2023. Архивировано 26 сентября 2023 года. ↑ Михаил Мишустин считает, что ИИ должен работать для защиты интересов и прав людей  (рус.). Российская газета (26 сентября 2023). Дата обращения: 29 сентября 2023. Архивировано 28 сентября 2023 года. ↑ Jack Copeland. What is Artificial Intelligence? Архивная копия от 24 декабря 2008 на Wayback Machine 2000 ↑ Alan Turing, «Computing Machinery and Intelligence Архивная копия от 28 марта 2013 на Wayback Machine», Mind, vol. LIX, no. 236, October 1950, pp. 433—460. ↑ МОДЕЛИРОВАНИЕ РАССУЖДЕНИЙ Поп-математика для взрослых детей :: @дневники: асоциальная сеть  (рус.). www.diary.ru. Дата обращения: 10 сентября 2018. Архивировано 10 сентября 2018 года. ↑ 
Обработка естественного языка:
Russell & Norvig, 2003, pp. 790–831
Poole, Mackworth & Goebel, 1998, pp. 91–104
Luger & Stubblefield, 2004, pp. 591–632 Russell & Norvig, 2003, pp. 790–831 Poole, Mackworth & Goebel, 1998, pp. 91–104 Luger & Stubblefield, 2004, pp. 591–632 ↑ 
Приложения обработки естественного языка, включают информационный поиск (в том числе: анализ текста и машинный перевод):
Russell & Norvig, 2003, pp. 840–857,
Luger & Stubblefield, 2004, pp. 623–630 Russell & Norvig, 2003, pp. 840–857, Luger & Stubblefield, 2004, pp. 623–630 ↑ Горбань П. А. Нейросетевое извлечение знаний из данных и компьютерный психоанализ Архивная копия от 12 декабря 2009 на Wayback Machine ↑ 
Машинное обучение:
Russell & Norvig, 2003, pp. 649–788,
Poole, Mackworth & Goebel, 1998, pp. 397–438,
Luger & Stubblefield, 2004, pp. 385–542,
Nilsson, 1998, chpt. 3.3 , 10.3, 17.5, 20 Russell & Norvig, 2003, pp. 649–788, Poole, Mackworth & Goebel, 1998, pp. 397–438, Luger & Stubblefield, 2004, pp. 385–542, Nilsson, 1998, chpt. 3.3 , 10.3, 17.5, 20 ↑ Алан Тюринг обсуждал как центральную тему уже в 1950, в его классической статье Computing Machinery and Intelligence. (Turing 1950) ↑ (pdf scanned copy of the original) Архивная копия от 26 апреля 2011 на Wayback Machine (version published in 1957, An Inductive Inference Machine, " IRE Convention Record, Section on Information Theory, Part 2, pp. 56-62) ↑ 
Робототехника:
Russell & Norvig, 2003, pp. 901–942,
Poole, Mackworth & Goebel, 1998, pp. 443–460 Russell & Norvig, 2003, pp. 901–942, Poole, Mackworth & Goebel, 1998, pp. 443–460 ↑ Russell & Norvig, 2003, pp. 916–932 ↑ Russell & Norvig, 2003, pp. 908–915 ↑ Музыка искусственного интеллекта Архивная копия от 8 сентября 2022 на Wayback Machine. Нейросеть научилась создавать техно-треки // Коммерсантъ — Наука, 6.09.2022 ↑ Квантовые компьютеры и искусственный интеллект  (неопр.). Дата обращения: 20 марта 2017. Архивировано 20 марта 2017 года. ↑ Квантовый компьютер и искусственный интеллект  (неопр.). Дата обращения: 20 марта 2017. Архивировано 20 марта 2017 года. ↑ Грациано, 2021, Глава 8.. ↑ Introducing ChatGPT  (неопр.). OpenAI. Дата обращения: 4 мая 2023. Архивировано 10 апреля 2023 года. ↑ Проект Blue Brain — Искусственный мозг  (неопр.). Дата обращения: 23 августа 2011. Архивировано из оригинала 4 марта 2016 года. ↑ Mild-Mannered Watson Skewers Human Opponents on Jeopardy  (неопр.). Дата обращения: 17 февраля 2011. Архивировано 22 февраля 2011 года. ↑ 20Q.net Inc  (неопр.). Дата обращения: 15 июня 2020. Архивировано из оригинала 30 ноября 2005 года. ↑ Matthew F. Dixon, Igor Halperin, Paul Bilokon. Machine Learning in Finance: From Theory to Practice. — Springer, 2021. — ISBN 9783030410674. Архивная копия от 2 сентября 2021 на Wayback Machine Источник  (неопр.). Дата обращения: 2 сентября 2021. Архивировано 2 сентября 2021 года. ↑ Christy, Charles A. Impact of Artificial Intelligence on Banking  (неопр.). Los Angeles Times (17 января 1990). Дата обращения: 10 сентября 2019. ↑ Staff, Investopedia (2005-05-18). "Algorithmic Trading". Investopedia (англ.). Архивировано 4 января 2022. Дата обращения: 10 ноября 2017. ↑ Aljazeera: может ли искусственный интеллект предсказывать движение финансовых рынков?  (рус.) The Arabinform Journal. Дата обращения: 10 марта 2022. Архивировано 3 марта 2022 года. ↑ "Beyond Robo-Advisers: How AI Could Rewire Wealth Management". American Banker (англ.). Архивировано 18 января 2019. Дата обращения: 10 ноября 2017. ↑ Gara, Antoine. "Kensho's AI For Investors Just Got Valued At Over $500 Million In Funding Round From Wall Street". Forbes (англ.). Архивировано 28 марта 2019. Дата обращения: 10 ноября 2017. ↑ 5 Best AI-Powered Chatbot Apps (англ.). yalantis.com. Дата обращения: 10 ноября 2017. Архивировано 8 января 2019 года. ↑ Kaushik, Preetam. "Is Artificial Intelligence the Way Forward for Personal Finance?". WIRED (англ.). Архивировано 28 марта 2019. Дата обращения: 10 ноября 2017. ↑ "Machine Learning in Finance - Present and Future Applications". Emerj (англ.). 2016-08-15. Архивировано 15 декабря 2018. Дата обращения: 10 ноября 2017. ↑ "Machine Learning Is the Future of Underwriting, But Startups Won't be Driving It". Bank Innovation (англ.). 2017-04-03. Архивировано 10 ноября 2017. Дата обращения: 10 ноября 2017. ↑ ZestFinance Introduces Machine Learning Platform to Underwrite Millennials and Other Consumers with Limited Credit History (англ.). www.businesswire.com. Дата обращения: 10 ноября 2017. Архивировано 8 февраля 2019 года. ↑ Искусственный интеллект помог Сбербанку заработать за год дополнительные $700 млн : Первый зампред правления банка Александр Ведяхин прогнозирует, что в 2020 году эта цифра достигнет миллиарда долларов // ТАСС. — 2020. — 23 января. — Дата обращения: 04.07.2021. ↑ Татьяна Исакова. ИИ раз, два, взяли : Как оцифровывается российское госуправление // «Коммерсантъ». — 2021. — 12 ноября. — Дата обращения: 10.05.2022. ↑ Юлия Макарова. Александр Ведяхин — о «гонке трансформеров» и будущем нейросетей : Первый зампред правления Сбербанка Александр Ведяхин рассказал в интервью РБК Трендам, какие прорывы совершил ИИ в последнее время и что будут обсуждать на крупнейшей конференции по ИИ и анализу данных AI Journey 2021 // РБК. — 2021. — 9 ноября. — Дата обращения: 10.05.2022. ↑ 1 2 3 Slyusar, Vadym Artificial intelligence as the basis of future control networks.  (неопр.) Coordination problems of military technical and devensive industrial policy in Ukraine. Weapons and military equipment development perspectives/ VII International Scientific and Practical Conference. Abstracts of reports. - October 8–10, 2019. - Kyiv. - Pp. 76 - 77. (2019). Дата обращения: 28 апреля 2020. Архивировано 26 июня 2021 года. doi:10.13140/RG.2.2.30247.50087 ↑ В состав комитета входят: Энди Джесси — генеральный директор корпорации Amazon; Эндрю Мур и Эрик Хорвиц — директора по искусственному интеллекту компаний Google и Microsoft, Сафра Кац — генеральный директор Oracle. Возглавляют комитет Эрик Шмидт — бывший генеральный директор Google и Роберт Уорк — бывший заместитель министра обороны США ↑ Biden urged to back AI weapons to counter China and Russia threats Архивная копия от 2 марта 2021 на Wayback Machine, BBC, 2.03.2021 ↑ Why China could win the new global arms race Архивная копия от 22 декабря 2021 на Wayback Machine, BBC, 22.12.2021 ↑ Искусственный интеллект для борьбы с российской дезинформацией Архивная копия от 26 февраля 2021 на Wayback Machine, BBC, 26.02.2021 ↑ Todd R. Reed, Nancy E. Reed, Peter Fritzson. Heart sound analysis for symptom detection and computer-aided diagnosis (англ.) // Simulation Modelling Practice and Theory. — 2004-05-01. — Vol. 12, iss. 2. — P. 129—146. — doi:10.1016/j.simpat.2003.11.005. Архивировано 28 января 2013 года. ↑ A. Yorita, N. Kubota. Cognitive Development in Partner Robots for Information Support to Elderly People (англ.) // IEEE Transactions on Autonomous Mental Development. — March 2011. — Vol. 3, iss. 1. — P. 64—73. — ISSN 1943-0604. — doi:10.1109/TAMD.2011.2105868. Архивировано 9 июня 2018 года. ↑ "Artificial Intelligence Will Redesign Healthcare - The Medical Futurist". The Medical Futurist (англ.). 2016-08-04. Архивировано 22 января 2019. Дата обращения: 10 ноября 2017. ↑ David D. Luxton. Artificial intelligence in psychological practice: Current and future applications and implications (англ.) // Professional Psychology: Research and Practice. — Vol. 45, iss. 5. — P. 332—339. — doi:10.1037/a0034559. Архивировано 8 мая 2022 года. ↑ "From Virtual Nurses To Drug Discovery: 106 Artificial Intelligence Startups In Healthcare". CB Insights Research (англ.). 2017-02-03. Архивировано 3 января 2018. Дата обращения: 10 ноября 2017. ↑ Recombinant music composition algorithm and method of using the same  (неопр.). Дата обращения: 10 ноября 2017. Архивировано 12 февраля 2018 года. ↑ Résultats de recherche - La Sacem (фр.). repertoire.sacem.fr. Дата обращения: 10 ноября 2017. Архивировано 4 октября 2018 года. ↑ Gloria Requena, Carlos Sánchez, José Luis Corzo-Higueras, Sirenia Reyes-Alvarado, Francisco Rivas-Ruiz. Melomics music medicine (M3) to lessen pain perception during pediatric prick test procedure (англ.) // Pediatric Allergy and Immunology. — 2014-11-01. — Vol. 25, iss. 7. — P. 721—724. — ISSN 1399-3038. — doi:10.1111/pai.12263. Архивировано 11 ноября 2017 года. ↑ Певица Zivert выступит вместе с искусственным интеллектом // Lenta.ru. — 2020. — 2 декабря. — Дата обращения: 11.05.2021. ↑ Smith, Mark (July 22, 2016). "So you think you chose to read this article?"  (неопр.). BBC. Retrieved July 27, 2016.. Дата обращения: 10 ноября 2017. Архивировано из оригинала 24 августа 2014 года. ↑ Tow Центр цифровой журналистики  (неопр.). Дата обращения: 27 июля 2020. Архивировано 4 августа 2020 года. ↑ Artificial Intelligence Software that Writes like a Human Being (англ.). Yseop. Дата обращения: 10 ноября 2017. Архивировано 14 ноября 2017 года. ↑ "A Japanese AI program just wrote a short novel, and it almost won a literary prize". Digital Trends[англ.] (англ.). 2016-03-23. Архивировано 10 ноября 2017. Дата обращения: 10 ноября 2017. ↑ O'Brien, Sara Ashley. "Is Pypestream the call center of the future?". CNNMoney. Архивировано 18 января 2019. Дата обращения: 10 ноября 2017. ↑ Syed Junaid Nawaz, Shree Krishna Sharma, Shurjeel Wyne, Mohammad N. Patwary, Md. Asaduzzaman. Quantum Machine Learning for 6G Communication Networks: State-of-the-Art and Vision for the Future (англ.). Preprint. (апрель 2019). Дата обращения: 1 мая 2022. Архивировано 19 июля 2021 года. ↑ Basulto, Dominic (2015-10-15). "How artificial intelligence is moving from the lab to your kid's playroom". Washington Post (англ.). Архивировано 7 января 2019. Дата обращения: 10 ноября 2017. ↑ «Video game maps made by AI: More DOOM!» Архивная копия от 15 мая 2018 на Wayback Machine SlashGear, May 8, 2018 ↑ United States, National Science and Technology Council – Committee on Technology. Executive Office of the President. (2016). Preparing for the future of artificial intelligence. ↑ Meyer, Michael D. (January 2007). "Artificial Intelligence in Transportation Information for Application"  (неопр.). Transportation Research Circular.. Дата обращения: 10 ноября 2017. Архивировано 2 октября 2018 года. ↑ Николай Порецкий. Локомотив всё видит // «Гудок» : Газета (электронная версия). — ИД «Гудок», 2019. — 3 июля (№ 115 (26724)). Архивировано 16 сентября 2020 года. ↑ Николай Порецкий. Нейросеть следит за безопасностью // «Гудок» : Газета (электронная версия). — ИД «Гудок», 2020. — 11 сентября (№ 169 (27018)). Архивировано 16 сентября 2020 года. ↑ «Умные» фермы: как искусственный интеллект меняет сельское хозяйство  (рус.). РБК (14 июня 2023). Дата обращения: 8 июля 2023. Архивировано 8 июля 2023 года. ↑ 1 2 Искусственный интеллект планируют внедрить в колониях для контроля за осужденными : Инициатива затронет и лиц, выходящих на свободу // ТАСС. — 2021. — 5 мая. — Дата обращения: 15.03.2023. ↑ Тимофей Корнев, Никита Королёв. Искусственный интеллект на вышке : В колонии подсаживают видеоаналитику // «Коммерсантъ». — 2023. — 15 марта. — Дата обращения: 15.03.2023. ↑ Apoorva Mehta (@apoorva_mehta) | Твиттер  (рус.). twitter.com. Дата обращения: 10 сентября 2018. Архивировано 2 мая 2019 года. ↑ «Artificial intelligence accelerates discovery of metallic glass» Архивная копия от 17 апреля 2018 на Wayback Machine ScienceDaily, April 13, 2018 ↑ DARPA тестирует искусственный интеллектуальный воздушный бой в симуляторах "два против одного" (англ.). Flightglobal. Дата обращения: 21 марта 2021. Архивировано 22 марта 2021 года. ↑ Axelrod R. The Structure of Decision: Cognitive Maps of Political Elites. — Princeton. University Press, 1976 ↑ Джон Сёрль. Разум мозга — компьютерная программа? Архивная копия от 8 сентября 2011 на Wayback Machine ↑ Пенроуз Р. Новый ум короля. О компьютерах, мышлении и законах физики. — М.: УРСС, 2005. — ISBN 5-354-00993-6. ↑ Matthew Hutson. Missing data hinder replication of artificial intelligence studies (англ.) // Science. — 2018-02-15. — ISSN 1095-9203 0036-8075, 1095-9203. — doi:10.1126/science.aat3298. Архивировано 22 декабря 2019 года. ↑ ИИ как фактор глобального риска  (неопр.). Дата обращения: 30 марта 2010. Архивировано 10 февраля 2012 года. ↑ Correspondent, Rhys Blakely, Science (2023-12-03). "AI 'could be like an alien invasion' says British professor" (англ.). 0140-0460. Архивировано 3 декабря 2023. Дата обращения: 3 декабря 2023.{{cite news}}:  Википедия:Обслуживание CS1 (множественные имена: authors list) (ссылка) ↑ Ум и жизнь. Начало диалога между буддизмом и наукой. Часть 2.  (неопр.) Дата обращения: 11 ноября 2015. Архивировано 12 января 2018 года. ↑ Московская епархия - Епархия сегодня - Священнослужители и монашествующие  (неопр.). www.mepar.ru. Дата обращения: 10 сентября 2018. Архивировано 10 сентября 2018 года. ↑ 1 2 http://www.rc.edu.ru/rc/s8/intellect/rc_intellect_zaharov_2009.pdf (недоступная ссылка) Православный взгляд на проблему искусственного интеллекта ↑ Гарри Гаррисон. Выбор по Тьюрингу. — М.: Эксмо-Пресс, 1999. — 480 с. — ISBN 5-04-002906-3. ↑ Дело об изобретательной машине, или Охраняются ли результаты интеллектуальной деятельности искусственного интеллекта?  (неопр.) Дата обращения: 28 марта 2023. Архивировано 28 марта 2023 года. ↑ На полпути к копирайту. Авторские права на произведения искусственного интеллекта  (неопр.). Дата обращения: 28 марта 2023. Архивировано 28 марта 2023 года. ↑ Европарламент одобрил первый в истории комплексный закон об ИИ. ↑ Европарламент одобрил первый в мире закон о регулировании ИИ. ↑ К вопросу о наличии авторских прав у искусственного интеллекта. ↑ Указ Президента Российской Федерации от 10 октября 2019 г. № 490. ↑ Федеральный закон от 24 апреля 2020 г. № 123-ФЗ. ↑ Распоряжение Правительства Российской Федерации от 19 августа 2020 г. № 2120-р. ↑ Постановление Пленума Верховного Суда Российской Федерации от 23 апреля 2019 г. № 10. Компьютер учится и рассуждает (ч. 1) // Компьютер обретает разум = Artificial Intelligence Computer Images / под ред. В. Л. Стефанюка. — Москва: Мир, 1990. — 240 с. — 100 000 экз. — ISBN 5-03-001277-X (рус.); ISBN 0705409155 (англ.). Арсеньев А. С., Ильенков Э. В., Давыдов В. В. Машина и человек, кибернетика и философия. — Собрание сочинений. Т. 3. — М.: Канон плюс, 2020. ISBN 978-5-88373-579-9 Бруссард М. Искусственный интеллект. Пределы возможного. — М.: Альпина нон-фикшн, 2020. — ISBN 978-5-00139-080-0. Грациано М. Наука сознания. Современная теория субъективного опыта = Michael S. A. Graziano. Rethinking Consciousness: A Scientific Theory of Subjective Experience. — М.: Альпина нон-фикшн, 2021. — 254 с. — (Книги Политеха). — ISBN 978-5-00139-208-8. Девятков В. В. Системы искусственного интеллекта / Гл. ред. И. Б. Фёдоров. — М.: Изд-во МГТУ им. Н. Э. Баумана, 2001. — 352 с. — (Информатика в техническом университете). — 3000 экз. — ISBN 5-7038-1727-7. Бутл Р. Искусственный интеллект и экономика. Работа, богатство и благополучие в эпоху мыслящих машин = Roger Bootle. The AI Economy: Work, Wealth and Welfare in the Age of the Robot. — М.: Интеллектуальная Литература, 2022. — 432 с. — ISBN 978-5-907394-25-4. Жданов А. А. Автономный искусственный интеллект. — М.: БИНОМ. Лаборатория знаний, 2009. — 359 с. — 20 000 экз. Ильенков Э. В. Об идолах и идеалах. — Собрание сочинений. Т. 3. — М.: Канон плюс, 2020. ISBN 978-5-88373-579-9 Киссинджер Г., Шмидт Э., Хоттенлокер Д. Искусственный разум и новая эра человечества = THE AGE OF AI: AND OUR HUMAN FUTURE. — М.: Альпина ПРО, 2022. — 200 с. — ISBN 978-5-907534-65-0. Корсаков С. Н. Начертание нового способа исследования при помощи машин, сравнивающих идеи / Под ред. А.С. Михайлова. — М.: МИФИ, 2009. — 44 с. — 200 экз. — ISBN 978-5-7262-1108-4. Лорьер Ж.-Л. Системы искусственного интеллекта. — М.: Мир, 1991. — 568 с. — 20 000 экз. — ISBN 5-03-001408-X. Люгер Дж. Ф. Искусственный интеллект: стратегии и методы решения сложных проблем = Artificial Intelligence: Structures and Strategies for Complex Problem Solving / Под ред. Н. Н. Куссуль. — 4-е изд. — М.: Вильямс, 2005. — 864 с. — 2000 экз. — ISBN 5-8459-0437-4. Нильсон Н. Искусственный интеллект. — М.: Мир, 1973. — 273 с. Петрунин Ю. Ю., Рязанов М. А., Савельев А. В. Философия искусственного интеллекта в концепциях нейронаук. (Научная монография). — М.: МАКС Пресс, 2010. — ISBN 978-5-317-03251-7. Рассел С., Норвиг П. Искусственный интеллект: современный подход = Artificial Intelligence: a Modern Approach / Пер. с англ. и ред. К. А. Птицына. — 2-е изд. — М.: Вильямс, 2006. — 1408 с. — 3000 экз. — ISBN 5-8459-0887-6. Смолин Д. В. Введение в искусственный интеллект: конспект лекций. — М.: ФИЗМАТЛИТ. — 208 с. — ISBN 5-9221-0513-2. Хант Э. Искусственный интеллект = Artificial intelligence / Под ред. В. Л. Стефанюка. — М.: Мир, 1978. — 558 с. — 17 700 экз. Crawford K. Atlas of AI: Power, Politics, and the Planetary Costs of Artificial Intelligence. — Yale University Press, 2021. — 336 с. — ISBN 978-0300209570. Luger, George; Stubblefield, William (2004), Artificial Intelligence: Structures and Strategies for Complex Problem Solving (5th ed.), The Benjamin/Cummings Publishing Company, Inc., p. 720, ISBN 0-8053-4780-1 Nilsson, Nils (1998), Artificial Intelligence: A New Synthesis, Morgan Kaufmann Publishers, ISBN 978-1-55860-467-4 Poole, David; Mackworth, Alan; Goebel, Randy (1998), Computational Intelligence: A Logical Approach, New York: Oxford University Press Russell, Stuart J.; Norvig, Peter (2003), Artificial Intelligence: A Modern Approach (2nd ed.), Prentice Hall, ISBN 0-13-790395-2 Turing A. Computing machinery and intelligence (англ.) // Mind : журнал. — Oxford: Oxford University Press, 1950. — No. 59. — P. 433—460. Архивировано 2 июля 2008 года. Цитаты в Викицитатнике Медиафайлы на Викискладе Портал «Искусственный интеллект» Европарламент одобрил первый в истории комплексный закон об ИИ  (неопр.). РИА Новости (13 марта 2024). Дата обращения: 14 марта 2024. Европарламент одобрил первый в мире закон о регулировании ИИ  (неопр.). Коммерсантъ (13 марта 2024). Дата обращения: 14 марта 2024. Анастасия Васильева. К вопросу о наличии авторских прав у искусственного интеллекта  (неопр.). ГАРАНТ.РУ (1 февраля 2023). Дата обращения: 13 марта 2024. Указ Президента Российской Федерации «О развитии искусственного интеллекта в Российской Федерации»  (неопр.). government.ru (10 октября 2019). Дата обращения: 13 марта 2024. Федеральный закон «О проведении эксперимента по установлению специального регулирования в целях создания необходимых условий для разработки и внедрения технологий искусственного интеллекта в субъекте Российской Федерации – городе федерального значения Москве»  (неопр.). kremlin.ru (24 апреля 2020). Дата обращения: 13 марта 2024. Распоряжение Правительства Российской Федерации «Об утверждении Концепции развития регулирования отношений в сфере технологий искусственного интеллекта и робототехники на период до 2024 г.»  (неопр.) economy.gov.ru (19 августа 2020). Дата обращения: 13 марта 2024. Постановлении Пленума Верховного Суда Российской Федерации «О применении части четвертой Гражданского кодекса Российской Федерации»  (неопр.). vsrf.ru (23 апреля 2019). Дата обращения: 13 марта 2024. Савельев А. В. Internet и нейрокомпьютеры как социотехнологические стратегии искусственного мира Искусственный интеллект. Часть первая. Путь к сверхинтеллекту. Европейская комиссия. Ethics guidelines for trustworthy AI (англ.) (8 апреля 2019). Дата обращения: 9 мая 2019. Библиотека РАИИ. Статьи, книги, материалы РАИИ Российская ассоциация искусственного интеллекта (1113 пунктов) Р. В. Шамин. Курс «Машинное обучение и искусственный интеллект в математике и приложениях». НОЦ Математического института им. В. А. Стеклова РАН Дмитрий Леонтьев. «Искусственный интеллект не бывает пьяным» — «мать терминаторов» Ольга Ускова // Москвич Mag. — 2022. — 19 апреля. — Дата обращения: 12.05.2022. Александр Леви. «Искусственный интеллект — это ядерное топливо для нашего будущего» : Первый зампред правления Сбербанка Александр Ведяхин — в интервью «Ъ FM» // «Коммерсантъ». — 2019. — 4 октября. — Дата обращения: 12.05.2022. А. Соловьёв. Ишкушштвенный интеллект А. Соловьёв. Искусственный интеллект давно родился Архивная копия от 7 сентября 2019 на Wayback Machine Большая датская Большая китайская Большая норвежская Большая норвежская Большая российская (старая версия) Кругосвет Ларусса Национальная (Латвия) Стэнфордская философская Britannica (онлайн) De Agostini PWN Treccani BNE: XX4659822 BNF: 11932084t GND: 4033447-8 J9U: 987007294969105171 LCCN: sh85008180 LNB: 000050010 NDL: 00574798 NKC: ph116536 История искусственного интеллекта Зима искусственного интеллекта Дартмутский семинар Регламент ЕС об искусственном интеллекте Тест Тьюринга Китайская комната Сильный и слабый искусственные интеллекты Дружественный искусственный интеллект Этика искусственного интеллекта Проблема контроля Агентный подход Адаптивное управление Инженерия знаний Модель жизнеспособной системы Машинное обучение Нейронная сеть Нечёткая логика Обработка естественного языка Распознавание образов Роевой интеллект Символический ИИ Эволюционные алгоритмы Экспертная система Голосовое управление Задача классификации Классификация документов Кластеризация документов Кластерный анализ Локальный поиск Машинный перевод Оптическое распознавание символов Распознавание речи Распознавание рукописного ввода Игровой ИИ Чарлз Бэббидж Владимир Вапник Джозеф Вейценбаум Норберт Винер Виктор Глушков Владимир Городецкий Ян Лекун Алексей Ляпунов Джон Маккарти Марвин Мински Аллен Ньюэлл Сеймур Пейперт Джуда Перл Гермоген Поспелов Дмитрий Поспелов Фрэнк Розенблатт Герберт Александер Саймон Алан Тьюринг Патрик Уинстон Виктор Финн Сергей Фомин Демис Хассабис Джеффри Хинтон Ноам Хомский Клод Шеннон Эндрю Ын Элиезер Юдковский Искусственный интеллект Википедия:Статьи с нерабочими ссылками Википедия:Cite web (не указан язык) Википедия:Обслуживание CS1 (множественные имена: authors list) Страницы, использующие волшебные ссылки ISBN Википедия:Статьи с разделами без ссылок на источники с декабря 2021 года Википедия:Статьи без источников (тип: отрасль экономики) Википедия:Статьи, требующие уточнения источников Википедия:Статьи с шаблонами недостатков по алфавиту Википедия:Статьи, требующие конкретизации Википедия:Статьи, требующие уточнения времени Википедия:Статьи с утверждениями без значимости Статьи со ссылками на Викицитатник Статьи со ссылками на Викисклад Статьи со ссылками на портал Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Просмотр кода История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад Викиновости Викицитатник Викиверситет Afrikaans Alemannisch አማርኛ Aragonés العربية الدارجة مصرى অসমীয়া Asturianu Azərbaycanca تۆرکجه Башҡортса Boarisch Žemaitėška Bikol Central Беларуская Беларуская (тарашкевіца) Betawi Български বাংলা བོད་ཡིག Brezhoneg Bosanski Буряад Català کوردی Qırımtatarca Čeština Чӑвашла Cymraeg Dansk Deutsch Zazaki Ελληνικά English Esperanto Español Eesti Euskara Estremeñu فارسی Suomi Võro Fɔ̀ngbè Français Nordfriisk Furlan Gaeilge 贛語 Kriyòl gwiyannen Gàidhlig Galego Avañe'ẽ Gaelg Hausa עברית हिन्दी Hrvatski Kreyòl ayisyen Magyar Հայերեն Արեւմտահայերէն Interlingua Bahasa Indonesia Interlingue Igbo Ilokano Ido Íslenska Italiano 日本語 Patois La .lojban. Jawa ქართული Gĩkũyũ Қазақша ಕನ್ನಡ 한국어 कॉशुर / کٲشُر Ripoarisch Кыргызча Latina Lëtzebuergesch Limburgs Lombard Lietuvių Latviešu Madhurâ Malagasy Minangkabau Македонски മലയാളം Монгол मराठी Bahasa Melayu Malti မြန်မာဘာသာ Plattdüütsch Nedersaksies नेपाली नेपाल भाषा Nederlands Norsk nynorsk Norsk bokmål Occitan ଓଡ଼ିଆ ਪੰਜਾਬੀ Polski پنجابی پښتو Português Runa Simi Română Русиньскый Саха тыла Scots سنڌي Srpskohrvatski / српскохрватски සිංහල Simple English Slovenčina Slovenščina Shqip Српски / srpski Svenska Kiswahili Ślůnski தமிழ் తెలుగు Тоҷикӣ ไทย Türkmençe Tagalog Türkçe Татарча / tatarça Reo tahiti ئۇيغۇرچە / Uyghurche Українська اردو Oʻzbekcha / ўзбекча Vèneto Tiếng Việt Walon Winaray 吴语 მარგალური ייִדיש 中文 閩南語 / Bân-lâm-gú 粵語 IsiZulu Эта страница в последний раз была отредактирована 31 мая 2024 в 22:24. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

История искусственного интеллекта, как учение о развитии современной науки и технологии создания интеллектуальных машин, имеет свои корни в ранних философских исследованиях природы человека и процесса познания мира, расширенных позднее нейрофизиологами и психологами в виде ряда теорий относительно работы человеческого мозга и мышления. Современной стадией развития науки об искусственном интеллекте является развитие фундамента математической теории вычислений — теории алгоритмов — и создание компьютеров. Как прикладная наука искусственный интеллект имеет теоретическую и экспериментальную части. Практически, проблема создания искусственного интеллекта находится на стыке информатики и вычислительной техники — с одной стороны, с нейрофизиологией, когнитивной и поведенческой психологией — с другой стороны.
Теоретической основой должна служить Философия искусственного интеллекта, но только с появлением зна́чимых результатов теория приобретёт самостоятельное значение. Пока, теорию и практику искусственного интеллекта следует отличать от математических, алгоритмических, робототехнических, физиологических и прочих теоретических дисциплин и экспериментальных методик, имеющих самостоятельное значение. На саму возможность мыслить о понятии «искусственный интеллект» огромное влияние оказало рождение механистического материализма, которое начинается с работы Рене Декарта «Рассуждение о методе» (1637) и сразу вслед за этим работы Томаса Гоббса «Человеческая природа» (1640). Рене Декарт предположил, что животное — некий сложный механизм, тем самым сформулировав механистическую теорию. И тут важно понимать, чем отличается именно механистический материализм, от античного материализма, взгляды которого запечатлены в работах Аристотеля, и последующей диалектики Гегеля, диалектического и исторического материализма (Фейербах, Карл Маркс, Фридрих Энгельс, В. И. Ленин). Дело в том, что механистический материализм направлен на механистическое происхождение организмов, в то время как античный материализм направлен на механистическое происхождение природы, а диалектический и исторический материализм относится к проявлениям механизма в обществе. Поэтому понятно, что без понимания механистичности в организмах не могла идти речь о понимании искусственного интеллекта даже в самом примитивном смысле, а наличие механистичности природы и общества выходят за рамки области об искусственном интеллекте, и строго говоря не являются необходимыми предпосылками. В 1623 году Вильгельм Шикард (нем. Wilhelm Schickard) построил первую механическую цифровую вычислительную машину, за которой последовали машины Блеза Паскаля (1643) и Лейбница (1671). Лейбниц также был первым, кто описал современную двоичную систему счисления, хотя до него этой системой периодически увлекались многие великие ученые[1][2]. В 1832 году коллежский советник С. Н. Корсаков выдвинул принцип разработки научных методов и устройств для усиления возможностей разума и предложил серию «интеллектуальных машин», в конструкции которых, впервые в истории информатики, применил перфорированные карты[3][4]. В XIX веке Чарльз Бэббидж и Ада Лавлейс работали над программируемой механической вычислительной машиной. В 1910—1913 гг. Бертран Рассел и А. Н. Уайтхед опубликовали работу «Принципы математики», которая произвела революцию в формальной логике. В 1941 Конрад Цузе построил первый работающий программно-управляемый компьютер. Уоррен Маккалок и Уолтер Питтс в 1943 опубликовали A Logical Calculus of the Ideas Immanent in Nervous Activity, который заложил основы нейронных сетей. В 1943 году в своей статье «Логическое исчисление идей, относящихся к нервной активности» У. Мак-Каллок и У. Питтс предложили понятие искусственной нейронной сети. В частности, ими была предложена модель искусственного нейрона. Д. Хебб в работе «Организация поведения»[5] 1949 года описал основные принципы обучения нейронов. Эти идеи несколько лет спустя развил американский нейрофизиолог Фрэнк Розенблатт. Он предложил схему устройства, моделирующего процесс человеческого восприятия, и назвал его «перцептроном». Среди советских учёных искусственный интеллект был главной областью научной деятельности Д. А. Поспелова. Здесь научные интересы Д. А. Поспелова связаны с моделированием поведения человека, формализацией рассуждений, общими проблемами моделирования жизненных процессов в естественных и искусственных системах. В частности, Д. А. Поспеловым был впервые в мире разработан подход к принятию решений, опирающийся на семиотические (логико-лингвистические) модели, который послужил теоретической основой ситуационного управления большими системами[6]. По истории также можно проследить интерес других советских учёных к кибернетике. Наибольшее число молодых инновативных фирм, разрабатывающих ИИ, находятся в США, Европе, Китае, Израиле, Великобритании, Канаде. Среди компаний, зарегистрировавших наибольшее число патентов в области ИИ находятся IBM, Microsoft, Toshiba, Samsung, NEC, Fujitsu, Hitachi, Panasonic, Canon[7]. 1 Наука об искусственном интеллекте 2 Философские предпосылки к возникновению науки 3 Технологические предпосылки к возникновению науки 4 Рождение науки 5 Классические работы 6 Текущее состояние 7 Примечания 8 Литература ↑ W. S. Anglin and J. Lambek, The Heritage of Thales, Springer, 1995, ISBN 0-387-94544-X online Архивная копия от 12 мая 2015 на Wayback Machine ↑ Bacon, Francis The Advancement of Learning, Book 6, Chapter 1, 1605. Online here. Архивная копия от 18 марта 2017 на Wayback Machine ↑ Интеллектуальные машины  (неопр.). Дата обращения: 15 декабря 2014. Архивировано из оригинала 18 октября 2011 года. ↑ Изобретения Корсакова  (неопр.). Дата обращения: 15 декабря 2014. Архивировано 22 ноября 2015 года. ↑ Hebb, D. O. The organization of behavior, 1949. ↑ Семиотика, 1999. ↑ Deutsche Welle 01.02.2019 Андрей Гурков Кто мировой лидер в области искусственного интеллекта? Архивная копия от 4 февраля 2019 на Wayback Machine Поспелов Д. А., Осипов Г. С. Прикладная семиотика // Новости искусственного интеллекта. — 1999. — № 1. — С. 9—35. История искусственного интеллекта Зима искусственного интеллекта Дартмутский семинар Регламент ЕС об искусственном интеллекте Тест Тьюринга Китайская комната Сильный и слабый искусственные интеллекты Дружественный искусственный интеллект Этика искусственного интеллекта Проблема контроля Агентный подход Адаптивное управление Инженерия знаний Модель жизнеспособной системы Машинное обучение Нейронная сеть Нечёткая логика Обработка естественного языка Распознавание образов Роевой интеллект Символический ИИ Эволюционные алгоритмы Экспертная система Голосовое управление Задача классификации Классификация документов Кластеризация документов Кластерный анализ Локальный поиск Машинный перевод Оптическое распознавание символов Распознавание речи Распознавание рукописного ввода Игровой ИИ Чарлз Бэббидж Владимир Вапник Джозеф Вейценбаум Норберт Винер Виктор Глушков Владимир Городецкий Ян Лекун Алексей Ляпунов Джон Маккарти Марвин Мински Аллен Ньюэлл Сеймур Пейперт Джуда Перл Гермоген Поспелов Дмитрий Поспелов Фрэнк Розенблатт Герберт Александер Саймон Алан Тьюринг Патрик Уинстон Виктор Финн Сергей Фомин Демис Хассабис Джеффри Хинтон Ноам Хомский Клод Шеннон Эндрю Ын Элиезер Юдковский История искусственного интеллекта Страницы, использующие волшебные ссылки ISBN Википедия:Статьи с разделами без ссылок на источники с мая 2022 года Википедия:Статьи без источников (не распределённые по типам) Википедия:Запросы на перевод с французского Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Afrikaans العربية Azərbaycanca বাংলা Català کوردی Deutsch Ελληνικά English Español Euskara فارسی Français עברית Հայերեն Bahasa Indonesia Íslenska 日本語 한국어 پښتو Português Српски / srpski தமிழ் Українська Tiếng Việt 中文 粵語 IsiZulu Эта страница в последний раз была отредактирована 11 октября 2022 в 04:09. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Создавайте, тестируйте и разворачивайте приложения в Oracle Cloud бесплатно. Темы по ИИ ИИ стал универсальным термином для приложений, которые выполняют сложные задачи, которые когда-то требовали участия человека, например, общение с клиентами в Интернете или игра в шахматы. Этот термин часто используется взаимозаменяемо с его подобластями, которые включают машинное обучение (ML) и глубокое обучение. науки об искусственном интеллекте и имеют свою специфик Например, машинное обучение фокусируется на создании систем, которые обучаются и развиваются путем обработки и анализа данных. Разница состоит в том, что машинное обучение всегда подразумевает использование ИИ, однако ИИ не всегда подразумевает машинное обучение. Чтобы использовать возможности ИИ с максимальной выгодой для бизнеса, необходимо нанять специалистов по изучению данных. Наука о данных объединяет статистику, информатику и бизнес-знания для извлечения ценности из различных источников данных. Разработчики применяют искусственный интеллект, чтобы эффективнее выполнять задачи, которые в ином случае пришлось бы делать вручную, взаимодействовать с заказчиками, выявлять закономерности и решать проблемы. Для начала работы с ИИ разработчикам потребуются математические знания и умение пользоваться алгоритмами. Если Вы впервые задействуете искусственный интеллект для создания приложений, рекомендуется начинать с малого. Создав относительно простой проект наподобие крестиков-ноликов, Вы освоите основы искусственного интеллекта. Учеба на практике является отличным способом развития любых навыков, и искусственный интеллект здесь не исключение. Успешно выполнив несколько небольших проектов, Вы поймете, что возможности искусственного интеллекта поистине безграничны. ИИ дает возможность воспроизводить и улучшать то, как мы воспринимаем окружающий мир и реагируем на него. Это свойство ИИ лежит в основе инноваций. ИИ основан на различных технологиях машинного обучения, которые распознают шаблоны в данных и формируют прогнозы. Он создает прибавочную стоимость для бизнеса благодаря следующим возможностям Технологии на основе ИИ помогают повысить эффективность и производительность труда за счет автоматизации процессов и задач, которые раньше выполнялись людьми. ИИ также умеет интерпретировать объемы данных, которые не под силу интерпретировать человеку. Это умение может приносить существенные преимущества для бизнеса. Например, Netflix использует машинное обучение для обеспечения уровня персонализации, что помогло компании увеличить свою клиентскую базу более чем на 25 процентов. Большинство компаний сделали изучение данных своим приоритетом и вкладывают в него значительные средства. Опрос McKinsey 2021 года по ИИ показал, что количество компаний, сообщивших о внедрении ИИ по крайней мере в одной функции, увеличилось до 56 % по сравнению с 50 % годом ранее. Кроме того, 27% респондентов сообщили, что по крайней мере 5% доходов могут быть связаны с искусственным интеллектом, по сравнению с 22% годом ранее. ИИ предлагает преимущества для всех аспектов и отраслей бизнеса любого масштаба, как общие, так и специализированные Согласно последнему отчету Harvard Business Review, компании преимущественно используют ИИ в следующих целях Три фактора способствуют повсеместному внедрению ИИ. Существует несколько этапов разработки и развертывания моделей машинного обучения, включая обучение и вывод. Обучение и вывод ИИ относится к процессу экспериментирования с моделями машинного обучения для решения проблемы. Например, инженер по машинному обучению может экспериментировать с различными моделями-кандидатами для решения задачи компьютерного зрения, такой как обнаружение переломов костей на рентгеновских изображениях. Чтобы повысить точность этих моделей, инженер будет передавать данные в модели и настраивать параметры до тех пор, пока они не достигнут заданного порога. Эти потребности в обучении, измеряемые сложностью модели, растут в геометрической прогрессии с каждым годом. Инфраструктурные технологии, имеющие ключевое значение для масштабного обучения ИИ, включают кластерные сети, такие как RDMA и InfiniBand, вычислительные ресурсы графического процессора на «голом железе» и высокопроизводительное хранилище. Ценность ИИ для бизнеса подтверждает множество примеров успеха. Добавление технологий машинного обучения и когнитивных операций в традиционные бизнес-процессы и приложения обеспечивает повышение удобства и продуктивности. Тем не менее внедрение ИИ связано с определенными трудностями. Лишь немногие компании задействуют полный потенциал ИИ, и тому есть несколько причин. Например, если они не используют облачные вычисления, проекты машинного обучения часто требуют больших вычислительных ресурсов. Они также сложны в создании и требуют опыта, который пользуется большим спросом, но его не хватает. Знание того, когда и где включать эти проекты, а также когда обращаться к третьей стороне, поможет свести к минимуму эти трудности. ИИ является движущей силой некоторых значительных историй успеха. Появление решений и средств на основе ИИ означает, что все больше компаний могут воспользоваться преимуществами этой технологии для экономии средств и времени. Готовые решения, средства и ПО на основе ИИ включают в себя встроенные средства ИИ или помогают автоматизировать процесс принятия решений на основе алгоритмов. Готовый к использованию ИИ включает самовосстанавливающиеся автономные базы данных и готовые модели для распознавания изображений и анализа текста в различных наборах данных. Использование чат-ботов для общения с покупателями. Чат-боты используют лингвистическую обработку, чтобы анализировать вопросы покупателей и предоставлять ответы и информацию. Чат-боты умеют обучаться и со временем начинают приносить все большие преимущества. Мониторинг центра обработки данных. ИТ-операции могут упростить мониторинг с помощью облачной платформы, которая объединяет все данные и автоматически отслеживает пороговые значения и аномалии. Выполнение бизнес-анализа без помощи эксперта. Аналитические средства с визуальным пользовательским интерфейсом упрощают выполнение запросов к системе и обеспечивают получение наглядных результатов. Чтобы максимально эффективно использовать возможности ИИ и преодолеть препятствия на пути к успешному внедрению новых технологий, необходимо создать командную культуру, которая обеспечит поддержку экосистемы ИИ. В такой среде ИИ все шире используется в производственных операциях, что привело к появлению нового термина — адаптивный интеллект. Адаптивные интеллектуальные приложения помогают принимать более эффективные бизнес-решения за счет использования внутренних и оперативных внешних данных в реальном времени и высокомасштабируемой инфраструктуры. Такие приложения дают возможность «работать с умом» во всех смыслах этого выражения и предлагать заказчикам более качественные продукты, рекомендации и услуги — и, в конечном итоге, повышать прибыль. ИИ является стратегической необходимостью для любой компании, которая хочет повысить производительность, открыть новые возможности для получения прибыли и укрепить лояльность заказчиков. Эта технология уже помогла многим компаниям добиться конкурентного преимущества. Благодаря ИИ можно делать больше за меньшие сроки, обеспечивать эффективное персонализированное обслуживание и прогнозировать результаты, а значит — получать большую прибыль. Тем не менее ИИ остается достаточно новой и сложной технологией. Чтобы полностью раскрыть ее потенциал, чтобы создавать и применять решения на основе ИИ, необходим высокий уровень квалификации. Для достижения успеха недостаточно просто нанять специалистов по изучению данных. Необходимо использовать правильные инструменты, процессы и стратегии управления. Harvard Business Review дает следующие рекомендации по началу работ с ИИ: ИИ становится неотъемлемой частью бизнеса. Рано или поздно все компании вынуждены будут использовать технологии ИИ, чтобы создать собственную экосистему и сохранить конкурентоспособность. Те, кто пренебрегает прогрессом, в следующие 10 лет рискуют остаться за бортом. Возможно, Ваша компания является исключением из правил, однако большинство предприятий не имеют собственных специалистов по изучению данных и необходимых ресурсов для создания экосистемы и разработки приложений, которые помогут поставить возможности ИИ себе на службу. Для успешной трансформации ИИ, которая включает в себя разработку стратегии и доступ к инструментам, найдите партнера с отраслевым опытом и обширным портфолио ИИ. ИИ сыграл немаловажную роль в этих историях успеха. Появление решений и средств на основе ИИ означает, что все больше компаний могут воспользоваться преимуществами этой технологии для экономии средств и времени. Готовые решения, средства и ПО на основе ИИ включают в себя встроенные средства ИИ или помогают автоматизировать процесс принятия решений на основе алгоритмов. Это могут быть как автономные базы данных, которые используют машинное обучение для самостоятельного восстановления, так и готовые модели, которые можно применять для решения таких задач, как распознавание образов и анализ текста. Все это помогает компаниям ускорять окупаемость, повышать производительность, сокращать расходы и улучшать отношения с заказчиками. Использование чат-ботов для общения с покупателями. Чат-боты используют лингвистическую обработку, чтобы анализировать вопросы покупателей и предоставлять ответы и информацию. Чат-боты умеют обучаться и со временем начинают приносить все большие преимущества. Мониторинг центра обработки данных. Централизация данных о сети, приложениях, производительности баз данных, качестве обслуживания и пр. с помощью единой облачной платформы, которая автоматически отслеживает пороговые значения и выявляет отклонения, помогает ИТ-специалистам экономить время и усилия. Выполнение бизнес-анализа без помощи эксперта. Аналитические средства с визуальным пользовательским интерфейсом упрощают выполнение запросов к системе и обеспечивают получение наглядных результатов. Несмотря на многочисленные возможности ИИ и машинного обучения, только немногим компаниям удается реализовать их полный потенциал. Почему? Как ни странно, основным препятствием являются... люди. Неэффективные процессы могут помешать компании реализовать полный потенциал ИИ. Например, специалисты по изучению данных могут столкнуться с проблемами при получении ресурсов и данных, необходимых для создания моделей машинного обучения. Или проблемы могут возникать при взаимодействии с коллегами. Кроме того, специалистам по изучению данных приходится иметь дело с многочисленными инструментами на основе открытого кода, и разработчики приложений иногда вынуждены полностью переписывать код моделей обучения, чтобы встроить их в приложения. Список средств на основе ИИ постоянно расширяется, что вынуждает ИТ-специалистов выделять больше времени на поддержку отдела изучения данных путем обновления рабочей среды. Кроме того, существующие стандарты ограничивают возможности специалистов по изучению данных. Кроме того, руководители не всегда могут оценить отдачу от вложений в ИИ в полной мере. Как следствие, они не обеспечивают достаточный уровень поддержки и финансирования для создания эффективной интегрированной экосистемы, которая является залогом успешного использования ИИ. Чтобы максимально эффективно использовать возможности ИИ и преодолеть препятствия на пути к успешному внедрению новых технологий, необходимо создать командную культуру, которая обеспечит поддержку экосистемы ИИ. В такой среде: ИИ все шире используется в производственных операциях, что привело к появлению нового термина — адаптивный интеллект. Адаптивные интеллектуальные приложения помогают принимать более эффективные бизнес-решения за счет использования внутренних и оперативных внешних данных в реальном времени и высокомасштабируемой инфраструктуры. Такие приложения дают возможность «работать с умом» во всех смыслах этого выражения и предлагать заказчикам более качественные продукты, рекомендации и услуги — и, в конечном итоге, повышать прибыль. ИИ является стратегической необходимостью для любой компании, которая хочет повысить производительность, открыть новые возможности для получения прибыли и укрепить лояльность заказчиков. Эта технология уже помогла многим компаниям добиться конкурентного преимущества. Благодаря ИИ можно делать больше за меньшие сроки, обеспечивать эффективное персонализированное обслуживание и прогнозировать результаты, а значит — получать большую прибыль. Тем не менее ИИ остается достаточно новой и сложной технологией. Чтобы полностью раскрыть ее потенциал, чтобы создавать и применять решения на основе ИИ, необходим высокий уровень квалификации. Для достижения успеха недостаточно просто нанять специалистов по изучению данных. Необходимо использовать правильные инструменты, процессы и стратегии управления. Harvard Business Review дает следующие рекомендации по началу работ с ИИ: ИИ становится неотъемлемой частью бизнеса. Рано или поздно все компании вынуждены будут использовать технологии ИИ, чтобы создать собственную экосистему и сохранить конкурентоспособность. Те, кто пренебрегает прогрессом, в следующие 10 лет рискуют остаться за бортом. Возможно, Ваша компания является исключением из правил, однако большинство предприятий не имеют собственных специалистов по изучению данных и необходимых ресурсов для создания экосистемы и разработки приложений, которые помогут поставить возможности ИИ себе на службу. Если Вам необходима помощь в разработке оптимальной стратегии и для получения доступа к инструментам успешного внедрения ИИ, обратитесь за помощью к проверенному партнеру, который располагает большим опытом и широким набором подходящих решений. Создавайте, тестируйте и разворачивайте приложения в Oracle Cloud бесплатно. Нажмите для просмотра политики доступа Перейти к содержанию КРАТКИЕ ССЫЛКИ Oracle Cloud Infrastructure Oracle Fusion Cloud Applications Oracle Database Скачать Java Карьера в Oracle Oracle Россия и СНГ Облако Искусственный интеллект Искусственный интеллект — термины ИИ и разработчики Как технологии ИИ могут помочь организациям ИИ на предприятии Применение ИИ на предприятии Почему технологии ИИ стали так популярны? Обучение и развитие моделей ИИ Преимущества и сложности внедрения ИИ ИИ: истории успеха Готовые решения упрощают внедрение ИИ на предприятии Начало работы с ИИ Как создать правильную культуру От искусственного интеллекта к интеллекту адаптирующемуся Стратегическая необходимость и конкурентные преимущества ИИ Практические рекомендации для получения преимуществ максимума из ИИ Помощь в освоении ИИ Учебная библиотека ИИ помогает использовать весь потенциал данных; составляет надежные прогнозы и автоматизирует сложные задачи. использование операционных и демографических данных дает возможность прогнозировать объем прибыли от заказчика на протяжении всего периода взаимодействия (ценность цикла обслуживания заказчика); оптимизация ценообразования на основе поведения и предпочтений покупателей; распознавание образов для анализа рентгеновских снимков и диагностики рака. выявление и предотвращение нарушений безопасности (44 %); устранение технических проблем пользователей (41 %); сокращение задач по управлению продукцией (34 %); оценка внутреннего соответствия нормативам у одобренных поставщиков (34 %). Доступность высокопроизводительных вычислительных ресурсов по невысокой цене.  Наличие многочисленных вычислительных ресурсов в облаке сделало их доступными для широкой аудитории. Ранее вычислительные системы для ИИ были локальными и обходились чрезмерно дорого. Доступность больших объемов данных для обучения.  Чтобы научить ИИ делать точные прогнозы, он должен обработать большие объемы данных. Простота маркировки данных и доступное хранение и обработка структурированных и неструктурированных данных позволяют создавать больше алгоритмов и обучать их. Конкурентные преимущества ИИ. Все больше компаний узнают о конкурентных преимуществах ИИ для бизнеса и делают внедрение этой технологии своим приоритетом. К примеру, специализированные рекомендации ИИ помогают быстрее принимать более взвешенные решения. Также ИИ предлагает множество средств и возможностей для сокращения затрат и снижения рисков, ускорения вывода продуктов на рынок и т. д. Согласно отчету Harvard Business Review, издательство Associated Press стало выпускать в 12 раз больше статей, обучив ИИ писать короткие новостные заметки. Это дало возможность журналистам сосредоточиться на работе над более крупными материалами. Deep Patient, средство диагностики на основе ИИ, разработанное специалистами медицинской школы Икана при госпитале Маунт-Синай, помогает выявлять пациентов с высоким риском заболевания еще до постановки диагноза. По сообщению insideBIGDATA, этот инструмент может заблаговременно диагностировать почти 80 болезней, анализируя медицинские данные пациентов. бизнес-аналитики и специалисты по изучению данных совместно определяют задачи и цели; инженеры по обработке данных обеспечивают управление данными и платформой для выполнения анализа; специалисты по изучению данных подготавливают, изучают, визуализируют и моделируют данные с помощью специализированной платформы; архитекторы ИТ-систем обеспечивают управление инфраструктурой для изучения данных как локально, так и в облаке; разработчики приложений развертывают модели в приложениях для создания продуктов на основе данных. применяйте ИИ в сферах, которые оказывают немедленное и наиболее значительное влияние на прибыль и расходы; используйте ИИ, чтобы увеличить производительность вместо того, чтобы сокращать или увеличивать штат; начните внедрение со вспомогательных подразделений (лучше всего с ИТ и бухгалтерии). Что такое Data Science? Компании активно сочетают методы статистики с техническими концепциями, например с машинным обучением и искусственным интеллектом, чтобы извлекать ценные сведения из больших данных, развивать инновации и изменять подход к принятию решений. Что такое машинное обучение? Машинное обучение — один из подразделов науки, посвященной разработке и изучению ИИ. Он фокусируется на создании систем автоматизации, которые обучаются посредством обработки данных. Такие системы используются для ускорения принятия решений и сокращения сроков окупаемости. Согласно отчету Harvard Business Review, издательство Associated Press стало выпускать в 12 раз больше статей, обучив ИИ писать короткие новостные заметки. Это дало возможность журналистам сосредоточиться на работе над более крупными материалами. Deep Patient, средство диагностики на основе ИИ, разработанное специалистами медицинской школы Икана при госпитале Маунт-Синай, помогает выявлять пациентов с высоким риском заболевания еще до постановки диагноза. По сообщению insideBIGDATA, этот инструмент может заблаговременно диагностировать почти 80 болезней, анализируя медицинские данные пациентов. бизнес-аналитики и специалисты по изучению данных совместно определяют задачи и цели; инженеры по обработке данных обеспечивают управление данными и платформой для выполнения анализа; специалисты по изучению данных подготавливают, изучают, визуализируют и моделируют данные с помощью специализированной платформы; архитекторы ИТ-систем обеспечивают управление инфраструктурой для изучения данных как локально, так и в облаке; разработчики приложений развертывают модели в приложениях для создания продуктов на основе данных. применяйте ИИ в сферах, которые оказывают немедленное и наиболее значительное влияние на прибыль и расходы; используйте ИИ, чтобы увеличить производительность вместо того, чтобы сокращать или увеличивать штат; начните внедрение со вспомогательных подразделений (лучше всего с ИТ и бухгалтерии). Что такое Data Science? Компании активно сочетают методы статистики с техническими концепциями, например с машинным обучением и искусственным интеллектом, чтобы извлекать ценные сведения из больших данных, развивать инновации и изменять подход к принятию решений. Что такое машинное обучение? Машинное обучение — один из подразделов науки, посвященной разработке и изучению ИИ. Он фокусируется на создании систем автоматизации, которые обучаются посредством обработки данных. Такие системы используются для ускорения принятия решений и сокращения сроков окупаемости. Новости и мнения об ИИ Машинное обучение, искусственный интеллект и наука о данных меняют подход к решению сложных бизнес-проблем и направление развития соответствующих отраслей. Ознакомьтесь с новейшими статьями, чтобы узнать, как представители отрасли используют эти технологии. Вакансии Разработчикам Инвесторам Партнерам Стартапам Студентам и преподавателям Аналитические отчеты Мультиоблачные решения Oracle OCI | Microsoft Azure Облачные эталонные архитектуры Корпоративная ответственность Многообразие и инклюзивность Практики безопасности Что такое ИИ? Что такое облачные вычисления? Что такое облачное хранилище? Что такое HPC? Что такое IaaS? Что такое PaaS? Oracle Supports Ukraine Oracle CloudWorld Oracle Cloud Free Tier Центр облачной архитектуры Сервис Cloud Lift Oracle Support Rewards Oracle Red Bull Racing Телефон: +7 (495) 641 1439 Как мы можем помочь? Подписка на рассылки События Новости Блог OCI Страна/регион © 2024 Oracle Условия использования и конфиденциальность  Управление рекламой Вакансии

Машинное обучение (англ. machine learning, ML) — класс методов искусственного интеллекта, характерной чертой которых является не прямое решение задачи, а обучение за счёт применения решений множества сходных задач. Для построения таких методов используются средства математической статистики, численных методов, математического анализа, методов оптимизации, теории вероятностей, теории графов, различные техники работы с данными в цифровой форме. Различают два типа обучения: Дедуктивное обучение принято относить к области экспертных систем, поэтому термины машинное обучение и обучение по прецедентам можно считать синонимами. Многие методы индуктивного обучения разрабатывались как альтернатива классическим статистическим подходам. Многие методы тесно связаны с извлечением информации (англ. information extraction, information retrieval), интеллектуальным анализом данных (data mining). Имеется множество объектов (ситуаций) и множество возможных ответов (откликов, реакций). Существует некоторая зависимость между ответами и объектами, но она неизвестна. Известна только конечная совокупность прецедентов — пар «объект, ответ», называемая обучающей выборкой. На основе этих данных требуется восстановить неявную зависимость, то есть построить алгоритм, способный для любого возможного входного объекта выдать достаточно точный классифицирующий ответ. Эта зависимость не обязательно выражается аналитически, и здесь нейросети реализуют принцип эмпирически формируемого решения. Важной особенностью при этом является способность обучаемой системы к обобщению, то есть к адекватному отклику на данные, выходящие за пределы имеющейся обучающей выборки. Для измерения точности ответов вводится оценочный функционал качества. Данная постановка является обобщением классических задач аппроксимации функций. В классических задачах аппроксимации объектами являются действительные числа или векторы. В реальных прикладных задачах входные данные об объектах могут быть неполными, неточными, нечисловыми, разнородными. Эти особенности приводят к большому разнообразию методов машинного обучения. Раздел машинного обучения, с одной стороны, образовался в результате разделения науки о нейросетях на методы обучения сетей и виды топологий их архитектуры, с другой стороны — вобрал в себя методы математической статистики[a]. Указанные ниже способы машинного обучения основаны на применении нейросетей, хотя существуют и другие методы, основанные на обучающей выборке — например, дискриминантный анализ, оперирующий обобщённой дисперсией и ковариацией наблюдаемой статистики, или байесовские классификаторы. Базовые виды нейросетей, такие как перцептрон и многослойный перцептрон (а также их модификации), могут обучаться как с учителем, так и без учителя, с подкреплением и самоорганизацией. Но некоторые нейросети и большинство статистических методов можно отнести только к одному из способов обучения. Поэтому, если нужно классифицировать методы машинного обучения в зависимости от способа обучения, то будет некорректным относить нейросети к определенному виду, правильнее было бы типизировать алгоритмы обучения нейронных сетей. Целью машинного обучения является частичная или полная автоматизация решения сложных профессиональных задач в самых разных областях человеческой деятельности. Машинное обучение имеет широкий спектр приложений[источник не указан 3873 дня]: Сфера применений машинного обучения постоянно расширяется. Повсеместная информатизация приводит к накоплению огромных объёмов данных в науке, производстве, бизнесе, транспорте, здравоохранении. Возникающие при этом задачи прогнозирования, управления и принятия решений часто сводятся к обучению по прецедентам. Раньше, когда таких данных не было, эти задачи либо вообще не ставились, либо решались совершенно другими методами. Обучение по прецедентам, или индуктивное обучение, основано на выявлении эмпирических закономерностей в данных. Дедуктивное обучение предполагает формализацию знаний экспертов и их перенос в компьютер в виде базы знаний. 1 Общая постановка задачи обучения по прецедентам 2 Способы машинного обучения 3 Классические задачи, решаемые с помощью машинного обучения 4 Типы входных данных при обучении 5 Типы функционалов качества 6 Практические сферы применения 7 См. также 8 Примечания

8.1 Комментарии
8.2 Сноски 8.1 Комментарии 8.2 Сноски 9 Литература 10 Ссылки Обучение с учителем — для каждого прецедента задаётся пара «ситуация, требуемое решение»: Искусственная нейронная сеть
Глубокое обучение Глубокое обучение Метод коррекции ошибки Метод обратного распространения ошибки Метод опорных векторов Обучение без учителя — для каждого прецедента задаётся только «ситуация», требуется сгруппировать объекты в кластеры, используя данные о попарном сходстве объектов, и/или понизить размерность данных: Альфа-система подкрепления Гамма-система подкрепления Метод ближайших соседей Обучение с подкреплением — для каждого прецедента имеется пара «ситуация, принятое решение»: Генетический алгоритм. Активное обучение — отличается тем, что обучаемый алгоритм имеет возможность самостоятельно назначать следующую исследуемую ситуацию, на которой станет известен верный ответ: Обучение с частичным привлечением учителя (англ. semi-supervised learning) — для части прецедентов задается пара «ситуация, требуемое решение», а для части — только «ситуация» Трансдуктивное обучение — обучение с частичным привлечением учителя, когда прогноз предполагается делать только для прецедентов из тестовой выборки Многозадачное обучение (англ. multi-task learning) — одновременное обучение группе взаимосвязанных задач, для каждой из которых задаются свои пары «ситуация, требуемое решение» Многовариантное обучение (англ. multiple-instance learning) — обучение, когда прецеденты могут быть объединены в группы, в каждой из которых для всех прецедентов имеется «ситуация», но только для одного из них (причем, неизвестно какого) имеется пара «ситуация, требуемое решение» Бустинг (англ. boosting — улучшение) — это процедура последовательного построения композиции алгоритмов машинного обучения, когда каждый следующий алгоритм стремится компенсировать недостатки композиции всех предыдущих алгоритмов. Байесовская сеть Классификация, как правило, выполняется с помощью обучения с учителем на этапе собственно обучения. Кластеризация, как правило, выполняется с помощью обучения без учителя Регрессия, как правило, выполняется с помощью обучения с учителем на этапе тестирования, является частным случаем задач прогнозирования. Понижение размерности данных и их визуализация выполняется с помощью обучения без учителя Восстановление плотности распределения вероятности по набору данных Одноклассовая классификация и выявление новизны Построение ранговых зависимостей Обнаружение аномалий Признаковое описание объектов или матрица объекты-признаки — наиболее распространённый случай. Каждый объект описывается набором признаков. Матрица расстояний между объектами. Каждый объект описывается расстояниями до всех остальных объектов обучающей выборки, чаще всего отношениями попарного сходства. Временной ряд или сигнал. Последовательность измерений во времени, которое может представляться числом, вектором, а в общем случае — признаковым описанием в данный момент времени. Изображение или видеоряд. обычный текст с помощью Обработка естественного языка. При обучении с учителем — функционал качества может определяться как средняя ошибка ответов. Предполагается, что искомый алгоритм должен его минимизировать. Для предотвращения переобучения в минимизируемый функционал качества часто в явном или неявном виде добавляют регуляризатор. При обучении без учителя — функционалы качества могут определяться по-разному, например, как отношение средних межкластерных и внутрикластерных расстояний. При обучении с подкреплением — функционалы качества определяются физической средой, показывающей качество приспособления агента. Распознавание речи Распознавание жестов Распознавание рукописного ввода Распознавание образов Техническая диагностика Медицинская диагностика Прогнозирование временных рядов Биоинформатика Обнаружение мошенничества Обнаружение спама Категоризация документов Биржевой технический анализ Финансовый надзор (см. также Финансовые преступления) Кредитный скоринг Прогнозирование ухода клиентов Хемоинформатика Обучение ранжированию в информационном поиске Глубокое обучение Квантовое машинное обучение Искусственный интеллект ↑ По мнению известного специалиста по машинному обучению Ян Лекуна, машинное обучение есть воспроизведение мышления на основе искусственных нейронных сетей[1] ↑ Лекун, 2021, с. 78. Айвазян С. А., Енюков И. С., Мешалкин Л. Д. Прикладная статистика: основы моделирования и первичная обработка данных. — М.: Финансы и статистика, 1983. Айвазян С. А., Енюков И. С., Мешалкин Л. Д. Прикладная статистика: исследование зависимостей. — М.: Финансы и статистика, 1985. Айвазян С. А., Бухштабер В. М., Енюков И. С., Мешалкин Л. Д. Прикладная статистика: классификация и снижение размерности. — М.: Финансы и статистика, 1989. Вапник В. Н. Восстановление зависимостей по эмпирическим данным. — М.: Наука, 1979. Журавлёв Ю. И., Рязанов В. В., Сенько О. В. «Распознавание». Математические методы. Программная система. Практические применения. — М.: Фазис, 2006. ISBN 5-7036-0108-8. Загоруйко Н. Г. Прикладные методы анализа данных и знаний. — Новосибирск: ИМ СО РАН, 1999. ISBN 5-86134-060-9. Флах П. Машинное обучение. — М.: ДМК Пресс, 2015. — 400 с. — ISBN 978-5-97060-273-7. Шлезингер М., Главач В. Десять лекций по статистическому и структурному распознаванию. — Киев: Наукова думка, 2004. ISBN 966-00-0341-2. Hastie, T., Tibshirani R., Friedman J. The Elements of Statistical Learning: Data Mining, Inference, and Prediction. — 2nd ed. — Springer-Verlag, 2009. — 746 p. — ISBN 978-0-387-84857-0.. Mitchell T. Machine Learning. — McGraw-Hill Science/Engineering/Math, 1997. ISBN 0-07-042807-7. Ryszard S. Michalski, Jaime G. Carbonell, Tom M. Mitchell (1983), Machine Learning: An Artificial Intelligence Approach, Tioga Publishing Company, ISBN 0-935382-05-4 (Machine Learning: An Artificial Intelligence Approach в «Книгах Google»). Vapnik V. N.  Statistical learning theory. — N.Y.: John Wiley & Sons, Inc., 1998. [1] Bernhard Schölkopf, Alexander J. Smola Learning with Kernels. Support Vector Machines, Regularization, Optimization, and Beyond. — MIT Press, Cambridge, MA, 2002 ISBN 978-0-262-19475-4 [2] I. H. Witten, E. Frank Data Mining: Practical Machine Learning Tools and Techniques (Second Edition). — Morgan Kaufmann, 2005 ISBN 0-12-088407-0 [3] Liang Wang, Li Cheng, Guoying Zhao. Machine Learning for Human Motion Analysis. — IGI Global, 2009. — 318 p. — ISBN 978-1-60566-900-7. Ян Лекун. Как учится машина. Революция в области нейронных сетей и глубокого обучения. (Библиотека Сбера: Искусственный интеллект). — М.: Альпина нон-фикшн, 2021. — ISBN 978-5-907394-29-2. Weka: Data Mining Software in Java www.MachineLearning.ru — профессиональный вики-ресурс, посвященный машинному обучению и интеллектуальному анализу данных ММРО — Математические методы распознавания образов Константин Воронцов. Курс лекций Математические методы обучения по прецедентам, МФТИ, 2004—2008 Константин Воронцов. Курс «машинное обучение» школы анализа данных компании Яндекс. Игорь Кураленок. Курс «машинное обучение» Лекториум. Роман Шамин. Курс «Машинное обучение и искусственный интеллект в математике и приложениях». НОЦ Математического института им. В. А. Стеклова РАН Большая китайская Большая китайская Большая китайская Большая норвежская Britannica (онлайн) De Agostini Treccani GND: 4193754-5 J9U: 987007541156405171 LCCN: sh85079324 NDL: 001210569 NKC: ph126143 История искусственного интеллекта Зима искусственного интеллекта Дартмутский семинар Регламент ЕС об искусственном интеллекте Тест Тьюринга Китайская комната Сильный и слабый искусственные интеллекты Дружественный искусственный интеллект Этика искусственного интеллекта Проблема контроля Агентный подход Адаптивное управление Инженерия знаний Модель жизнеспособной системы Машинное обучение Нейронная сеть Нечёткая логика Обработка естественного языка Распознавание образов Роевой интеллект Символический ИИ Эволюционные алгоритмы Экспертная система Голосовое управление Задача классификации Классификация документов Кластеризация документов Кластерный анализ Локальный поиск Машинный перевод Оптическое распознавание символов Распознавание речи Распознавание рукописного ввода Игровой ИИ Чарлз Бэббидж Владимир Вапник Джозеф Вейценбаум Норберт Винер Виктор Глушков Владимир Городецкий Ян Лекун Алексей Ляпунов Джон Маккарти Марвин Мински Аллен Ньюэлл Сеймур Пейперт Джуда Перл Гермоген Поспелов Дмитрий Поспелов Фрэнк Розенблатт Герберт Александер Саймон Алан Тьюринг Патрик Уинстон Виктор Финн Сергей Фомин Демис Хассабис Джеффри Хинтон Ноам Хомский Клод Шеннон Эндрю Ын Элиезер Юдковский Задача классификации Обучение без учителя Обучение с частичным привлечением учителя Регрессионный анализ AutoML Ассоциативные правила Выделение признаков Обучение признакам Обучение ранжированию Грамматический вывод Онлайновое обучение Метод k ближайших соседей Наивный байесовский классификатор Дерево решений Метод опорных векторов Линейная регрессия Логистическая регрессия Перцептрон Ансамблевое обучение
Бэггинг
Бустинг
Метод случайного леса Бэггинг Бустинг Метод случайного леса Метод релевантных векторов Метод k-средних Метод нечёткой кластеризации Иерархическая кластеризация EM-алгоритм BIRCH CURE DBSCAN OPTICS Mean-shift Факторный анализ Метод главных компонент CCA ICA LDA Неотрицательное матричное разложение t-SNE Графовая вероятностная модель
Байесовская сеть
Скрытая марковская модель
CRF Байесовская сеть Скрытая марковская модель CRF Метод k ближайших соседей Локальный уровень выброса Байесовская сеть Марковская сеть Скрытая марковская модель Ограниченная машина Больцмана Самоорганизующаяся карта Функция активации
Сигмоида
Softmax
Радиально-базисная функция Сигмоида Softmax Радиально-базисная функция Метод обратного распространения ошибки Глубокое обучение Многослойный перцептрон Рекуррентная нейронная сеть
Долгая краткосрочная память
Управляемый рекуррентный блок Долгая краткосрочная память Управляемый рекуррентный блок Свёрточная нейронная сеть
U-Net U-Net Автокодировщик Марковский процесс Уравнение Беллмана Жадный алгоритм Q-обучение SARSA Temporal difference (TD) Размерность Вапника — Червоненкиса Дилемма смещения–дисперсии Теория вычислительного обучения Минимизация эмпирического риска Оккамово обучение PAC learning Статистическая теория обучения NeurIPS ICML ML JMLR ArXiv:cs.LG Проставить сноски, внести более точные указания на источники. Переработать оформление в соответствии с правилами написания статей. Машинное обучение Википедия:Статьи без источников (тип: специальность) Википедия:Нет источников с октября 2013 Википедия:Статьи с утверждениями без источников более 14 дней Википедия:Статьи без сносок Википедия:Статьи с неэнциклопедическим содержанием Википедия:Статьи с шаблонами недостатков по алфавиту Страницы, использующие волшебные ссылки ISBN Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад Afrikaans العربية الدارجة অসমীয়া Azərbaycanca تۆرکجه Беларуская Български भोजपुरी বাংলা བོད་ཡིག Bosanski Català کوردی Čeština Cymraeg Dansk Deutsch Ελληνικά English Español Eesti Euskara فارسی Suomi Võro Français Galego Gaelg עברית हिन्दी Magyar Հայերեն Bahasa Indonesia Íslenska Italiano 日本語 ქართული ಕನ್ನಡ 한국어 Кыргызча Lietuvių Latviešu Македонски മലയാളം Монгол मराठी Bahasa Melayu Nederlands Norsk nynorsk Norsk bokmål Occitan ଓଡ଼ିଆ Polski پنجابی پښتو Português Runa Simi Română ᱥᱟᱱᱛᱟᱲᱤ Srpskohrvatski / српскохрватски Simple English Slovenščina Shqip Српски / srpski Svenska தமிழ் తెలుగు ไทย Tagalog Türkçe ئۇيغۇرچە / Uyghurche Українська اردو Oʻzbekcha / ўзбекча Tiếng Việt 吴语 中文 閩南語 / Bân-lâm-gú 粵語 IsiZulu Эта страница в последний раз была отредактирована 13 октября 2023 в 13:45. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Data mining (рус. добыча данных, интеллектуальный анализ данных, глубинный анализ данных) — собирательное название, используемое для обозначения совокупности методов обнаружения в данных ранее неизвестных, нетривиальных, практически полезных и доступных интерпретации знаний, необходимых для принятия решений в различных сферах человеческой деятельности. Термин введён Григорием Пятецким-Шапиро[англ.] в 1989 году[1][2][3]. Английское словосочетание «data mining» пока не имеет устоявшегося перевода на русский язык. При передаче на русском языке используются следующие словосочетания[4]: просев информации, добыча данных, извлечение данных, а также интеллектуальный анализ данных[5][6][7]. Более полным и точным является словосочетание «обнаружение знаний в базах данных» (англ. knowledge discovery in databases, KDD). Основу методов data mining составляют всевозможные методы классификации, моделирования и прогнозирования, основанные на применении деревьев решений, искусственных нейронных сетей, генетических алгоритмов, эволюционного программирования, ассоциативной памяти, нечёткой логики. К методам data mining нередко относят статистические методы (корреляционный и регрессионный анализ, факторный анализ, дисперсионный анализ, компонентный анализ, дискриминантный анализ, анализ временных рядов, анализ выживаемости, анализ связей). Такие методы, однако, предполагают некоторые априорные представления об анализируемых данных, что несколько расходится с целями data mining (обнаружение ранее неизвестных нетривиальных и практически полезных знаний). Одно из важнейших назначений методов data mining состоит в наглядном представлении результатов вычислений (визуализация), что позволяет использовать инструментарий data mining людьми, не имеющими специальной математической подготовки. Применение статистических методов анализа данных требует хорошего владения теорией вероятностей и математической статистикой. Методы data mining (или, что то же самое, knowledge discovery in data, сокращённо KDD) лежат на стыке статистики и искусственного интеллекта[8]. Область data mining началась с семинара, проведённого Григорием Пятецким-Шапиро в 1989 году[1]. Ранее, работая в компании GTE Labs, Григорий Пятецкий-Шапиро заинтересовался вопросом: можно ли автоматически находить определённые правила, чтобы ускорить некоторые запросы к крупным базам данных. Тогда же было предложено два термина — data mining («добыча данных»[9]) и knowledge discovery in data (который следует переводить как «открытие знаний в базах данных»). В 1993 году вышла первая рассылка «Knowledge Discovery Nuggets», а в 1994 году был создан один из первых сайтов по data mining. Первоначально задача ставится следующим образом: Необходимо разработать методы обнаружения знаний, скрытых в больших объёмах исходных «сырых» данных. В текущих условиях глобальной конкуренции именно найденные закономерности (знания) могут быть источником дополнительного конкурентного преимущества. Что означает «скрытые знания»? Это должны быть обязательно знания: Эти требования во многом определяют суть методов data mining и то, в каком виде и в каком соотношении в технологии data mining используются системы управления базами данных, статистические методы анализа и методы искусственного интеллекта. Методы data mining могут быть применены как для работы с большими данными, так и для обработки сравнительно малых объемов данных (полученных, например, по результатам отдельных экспериментов, либо при анализе данных о деятельности компании)[источник не указан 3028 дней]. В качестве критерия достаточного количества данных рассматривается как область исследования, так и применяемый алгоритм анализа[источник не указан 3028 дней]. Развитие технологий баз данных сначала привело к созданию специализированного языка — языка запросов к базам данных. Для реляционных баз данных — это язык SQL, который предоставил широкие возможности для создания, изменения и извлечения хранимых данных. Затем возникла необходимость в получении аналитической информации (например, информации о деятельности предприятия за определённый период), и тут оказалось, что традиционные реляционные базы данных, хорошо приспособленные, например, для ведения оперативного учёта на предприятии, плохо приспособлены для проведения анализа. Это привело, в свою очередь, к созданию т. н. «хранилищ данных», сама структура которых наилучшим способом соответствует проведению всестороннего математического анализа. Знания, добываемые методами data mining, принято представлять в виде закономерностей (паттернов). В качестве таких выступают: Алгоритмы поиска таких закономерностей находятся на пересечении областей: Искусственный интеллект, Математическая статистика, Математическое программирование, Визуализация, OLAP. По мнению компании IBM, обработка «больших данных» — это «способность по-новому
использовать информацию для выработки полезных идей или создания товаров и услуг, имеющих высокую ценность»
Это определение трактует большие данные как разновидность аналитики, так как работа с ними направлена на извлечение полезных сведений, способных обеспечить конкурентное преимущество[10]. Задачи, решаемые методами data mining, принято разделять на описательные (англ. descriptive) и предсказательные (англ. predictive). В описательных задачах самое главное — это дать наглядное описание имеющихся скрытых закономерностей, в то время как в предсказательных задачах на первом плане стоит вопрос о предсказании для тех случаев, для которых данных ещё нет. К описательным задачам относятся: К предсказательным задачам относятся: Для задач классификации характерно «обучение с учителем», при котором построение (обучение) модели производится по выборке, содержащей входные и выходные векторы. Для задач кластеризации и ассоциации применяется «обучение без учителя», при котором построение модели производится по выборке, в которой нет выходного параметра. Значение выходного параметра («относится к кластеру …», «похож на вектор …») подбирается автоматически в процессе обучения. Для задач сокращения описания характерно отсутствие разделения на входные и выходные векторы. Начиная с классических работ К. Пирсона по методу главных компонент, основное внимание уделяется аппроксимации данных. Ряд этапов решения задач методами data mining: Перед использованием алгоритмов data mining необходимо произвести подготовку набора анализируемых данных. Так как ИАД может обнаружить только присутствующие в данных закономерности, исходные данные с одной стороны должны иметь достаточный объём, чтобы эти закономерности в них присутствовали, а с другой — быть достаточно компактными, чтобы анализ занял приемлемое время. Чаще всего в качестве исходных данных выступают хранилища или витрины данных. Подготовка необходима для анализа многомерных данных до кластеризации или интеллектуального анализа данных. Далее данные фильтруются. Фильтрация удаляет выборки с шумами и пропущенными данными. Отфильтрованные данные сводятся к наборам признаков (или векторам, если алгоритм может работать только с векторами фиксированной размерности), один набор признаков на наблюдение. Набор признаков формируется в соответствии с гипотезами о том, какие признаки сырых данных имеют высокую прогнозную силу в расчете на требуемую вычислительную мощность для обработки. Например, черно-белое изображение лица размером 100×100 пикселей содержит 10 тыс. бит сырых данных. Они могут быть преобразованы в вектор признаков путём обнаружения в изображении глаз и рта. В итоге происходит уменьшение объёма данных с 10 тыс. бит до списка кодов положения, значительно уменьшая объём анализируемых данных, а значит и время анализа. Ряд алгоритмов умеют обрабатывать пропущенные данные, имеющие прогностическую силу (например, отсутствие у клиента покупок определенного вида). Скажем, при использовании метода ассоциативных правил обрабатываются не векторы признаков, а наборы переменной размерности. Выбор целевой функции будет зависеть от того, что является целью анализа; выбор «правильной» функции имеет основополагающее значение для успешного интеллектуального анализа данных. Наблюдения делятся на две категории — обучающий набор и тестовый набор. Обучающий набор используется для «обучения» алгоритма data mining, а тестовый набор — для проверки найденных закономерностей. 1 Введение

1.1 Исторический экскурс
1.2 Постановка задачи

1.2.1 Data mining и базы данных
1.2.2 Data mining и искусственный интеллект
1.2.3 Data mining и бизнес 1.1 Исторический экскурс 1.2 Постановка задачи

1.2.1 Data mining и базы данных
1.2.2 Data mining и искусственный интеллект
1.2.3 Data mining и бизнес 1.2.1 Data mining и базы данных 1.2.2 Data mining и искусственный интеллект 1.2.3 Data mining и бизнес 2 Задачи 3 Алгоритмы обучения 4 Этапы обучения 5 Подготовка данных 6 См. также 7 Примечания 8 Литература 9 Ссылки имеется достаточно крупная база данных; предполагается, что в базе данных находятся некие «скрытые знания». ранее неизвестные — то есть такие знания, которые должны быть новыми (а не подтверждающими какие-то ранее полученные сведения); нетривиальные — то есть такие, которые нельзя просто так увидеть (при непосредственном визуальном анализе данных или при вычислении простых статистических характеристик); практически полезные — то есть такие знания, которые представляют ценность для исследователя или потребителя; доступные для интерпретации — то есть такие знания, которые легко представить в наглядной для пользователя форме и легко объяснить в терминах предметной области. ассоциативные правила; деревья решений; кластеры; математические функции. поиск ассоциативных правил или паттернов (образцов); группировка объектов, кластерный анализ; построение регрессионной модели. классификация объектов (для заранее заданных классов); регрессионный анализ, анализ временны́х рядов. Постановка задачи анализа; Сбор данных; Подготовка данных (фильтрация, дополнение, кодирование); Выбор модели (алгоритма анализа данных); Подбор параметров модели и алгоритма обучения; Обучение модели (автоматический поиск остальных параметров модели); Анализ качества обучения, если анализ неудовлетворительный — переход на п. 5 или п. 4; Анализ выявленных закономерностей, если анализ неудовлетворительный — переход на п. 1, 4 или 5. Web mining ↑ 1 2 См. его интервью Архивная копия от 16 декабря 2010 на Wayback Machine, данное им журналу «Компьютерра» в 2007 году. ↑ В. А. Дюк, А. В. Флегонтов, И. К. Фомина, Применение технологий интеллектуального анализа данных в естественнонаучных, технических и гуманитарных областях. ↑ О. С. Коваленко, Обзор проблем и перспектив анализа данных (недоступная ссылка). ↑ А. А. Ежов, С. А. Шумский, Лекция: Извлечение знаний с помощью нейронных сетей Архивная копия от 7 апреля 2011 на Wayback Machine. ↑ Microsoft SQL Server 2008 R2: новый подход к управлению информацией Архивировано 15 июля 2014 года. ↑ Data Mining от Oracle: настоящее и будущее Архивная копия от 8 марта 2012 на Wayback Machine. ↑ Степанов Р. Г. Технология Data Mining: Интеллектуальный Анализ Данных Архивная копия от 11 июня 2017 на Wayback Machine. ↑ Григорий Пятецкий-Шапиро, Data Mining и перегрузка информацией // Вступительная статья к книге: Анализ данных и процессов / А. А. Барсегян, М. С. Куприянов, И. И. Холод, М. Д. Тесс, С. И. Елизаров. З-е изд. перераб. и доп. СПб.: БХВ-Петербург, 2009. 512 с. С. 13. ↑ Обсуждаем термин: data mining / Школа технического перевода Архивная копия от 2 февраля 2014 на Wayback Machine. ↑ Миллнер, Хан, 2022, Переход к Big Data, с. 77-78. Паклин Н. Б., Орешков В. И. Бизнес-аналитика: от данных к знаниям (+ СD). — СПб.: Изд. Питер, 2009. — 624 с. Дюк В., Самойленко А. Data Mining: учебный курс (+CD). — СПб.: Изд. Питер, 2001. — 368 с. Журавлёв Ю.И., Рязанов В.В., Сенько О.В. РАСПОЗНАВАНИЕ. Математические методы. Программная система. Практические применения. — М.: Изд. «Фазис», 2006. — 176 с. — ISBN 5-7036-0108-8. Зиновьев А. Ю. Визуализация многомерных данных. — Красноярск: Изд. Красноярского государственного технического университета, 2000. — 180 с. Чубукова И. А. Data Mining: учебное пособие. — М.: Интернет-университет информационных технологий: БИНОМ: Лаборатория знаний, 2006. — 382 с. — ISBN 5-9556-0064-7. Ситник В. Ф., Краснюк М. Т. Інтелектуальний аналіз даних (дейтамайнінг): Навч. посібник. — К.: КНЕУ, 2007. — 376 с. Ian H. Witten, Eibe Frank and Mark A. Hall. Data Mining: Practical Machine Learning Tools and Techniques. — 3rd Edition. — Morgan Kaufmann, 2011. — P. 664. — ISBN 9780123748560. Дэйв Миллнер, Надим Хан. HR-аналитика. Практическое руководство по работе с персоналом на основе больших данных = Introduction to People Analytics: A practical guide to data-driven HR. — М.: Альпина Паблишер , 2022. — 384 с. — ISBN 978-5-9614-7831-0. Орлов А.И. Искусственный интеллект: статистические методы анализа данных : учебник. — М.: Ай Пи Ар Медиа, 2022. — 843 c. — ISBN 978-5-4497-1470-1 [1] Орлов А.И., Луценко Е.В. Анализ данных, информации и знаний в системной нечеткой интервальной математике: научная монография. – Краснодар: КубГАУ, 2022. – 405 с. [2] А. А. Барсегян, М. С. Куприянов, В. В. Степаненко, И. И. Холод. — Методы и модели анализа данных: OLAP и Data Mining. — СПб.: БХВ-Петербург, 2004. — 336 с. А. А. Барсегян, М. С. Куприянов, В. В. Степаненко, И. И. Холод. — Технологии анализа данных: Data Mining, Visual Mining, Text Mining, OLAP. 2-е изд., — СПб.: БХВ-Петербург, 2007. — 384 с. А. А. Барсегян, М. С. Куприянов, И. И. Холод, М. Д. Тесс, С. И. Елизаров. — Анализ данных и процессов: учеб. пособие. 3-е изд., — СПб.: БХВ-Петербург, 2009. — 512 с.  Data Mining Software в каталоге ссылок Curlie (dmoz) Большая каталанская Большая китайская Большая китайская Большая китайская Britannica (онлайн) De Agostini GND: 4428654-5 J9U: 987007556562405171 LCCN: sh97002073 NDL: 00948240 NKC: ph165954 Данные Метаданные Знания Метазнания Представление знаний База знаний Онтология Семантическая паутина Продукции Семантические сети Фреймы Логическая модель Нейронная сеть Эволюционное моделирование Нечёткая логика Экспертные системы Интеллектуальный анализ данных Извлечение информации Виртуальные собеседники Гибридные интеллектуальные системы Искусственный интеллект Машинное обучение Обработка естественного языка База данных Измерение (хранилище данных)[англ.] Модель измерений[англ.] Факт OLAP Схема звезды Схема снежинки Якорная модель Таблица измерений Data vault[англ.] HOLAP MOLAP ROLAP Операционное хранилище[англ.] Словарь данных Метаданные Витрина данных Шестая нормальная форма Суррогатный ключ Таблица фактов Ранний факт[англ.] Мера (хранилище данных)[англ.] Таблица измерений Медленно меняющиеся измерения Вырожденное измерение[англ.] ETL Извлечение данных[англ.] Трансформация данных[англ.] Business Intelligence Панель индикаторов Data mining DSS OLAP-куб Data Mining Extensions[англ.] MDX XMLA[англ.] Инструменты бизнес-аналитики Генератор отчётов Электронная таблица Билл Инмон[англ.] Ральф Кимболл[англ.] Задача классификации Обучение без учителя Обучение с частичным привлечением учителя Регрессионный анализ AutoML Ассоциативные правила Выделение признаков Обучение признакам Обучение ранжированию Грамматический вывод Онлайновое обучение Метод k ближайших соседей Наивный байесовский классификатор Дерево решений Метод опорных векторов Линейная регрессия Логистическая регрессия Перцептрон Ансамблевое обучение
Бэггинг
Бустинг
Метод случайного леса Бэггинг Бустинг Метод случайного леса Метод релевантных векторов Метод k-средних Метод нечёткой кластеризации Иерархическая кластеризация EM-алгоритм BIRCH CURE DBSCAN OPTICS Mean-shift Факторный анализ Метод главных компонент CCA ICA LDA Неотрицательное матричное разложение t-SNE Графовая вероятностная модель
Байесовская сеть
Скрытая марковская модель
CRF Байесовская сеть Скрытая марковская модель CRF Метод k ближайших соседей Локальный уровень выброса Байесовская сеть Марковская сеть Скрытая марковская модель Ограниченная машина Больцмана Самоорганизующаяся карта Функция активации
Сигмоида
Softmax
Радиально-базисная функция Сигмоида Softmax Радиально-базисная функция Метод обратного распространения ошибки Глубокое обучение Многослойный перцептрон Рекуррентная нейронная сеть
Долгая краткосрочная память
Управляемый рекуррентный блок Долгая краткосрочная память Управляемый рекуррентный блок Свёрточная нейронная сеть
U-Net U-Net Автокодировщик Марковский процесс Уравнение Беллмана Жадный алгоритм Q-обучение SARSA Temporal difference (TD) Размерность Вапника — Червоненкиса Дилемма смещения–дисперсии Теория вычислительного обучения Минимизация эмпирического риска Оккамово обучение PAC learning Статистическая теория обучения NeurIPS ICML ML JMLR ArXiv:cs.LG Переработать оформление в соответствии с правилами написания статей. Математическая статистика Хранилище данных Инженерия знаний Анализ данных Википедия:Статьи с нерабочими ссылками Википедия:Статьи без источников (тип: не указан) Википедия:Нет источников с февраля 2016 Википедия:Статьи с утверждениями без источников более 14 дней Википедия:Статьи с разделами без ссылок на источники с октября 2014 года Википедия:Статьи с неэнциклопедическим содержанием Википедия:Статьи с шаблонами недостатков по алфавиту Незавершённые статьи по статистике Незавершённые статьи об искусственном интеллекте Страницы, использующие волшебные ссылки ISBN Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Текущая версия Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад العربية অসমীয়া Azərbaycanca Български বাংলা Català Chavacano de Zamboanga کوردی Čeština Cymraeg Dansk Deutsch Ελληνικά English Español Eesti Euskara فارسی Suomi Français עברית हिन्दी Hrvatski Magyar Հայերեն Bahasa Indonesia Italiano 日本語 ಕನ್ನಡ 한국어 Latviešu Македонски മലയാളം Монгол मराठी Bahasa Melayu မြန်မာဘာသာ Nederlands Norsk nynorsk Norsk bokmål Polski Português Română Srpskohrvatski / српскохрватски Simple English Slovenčina Slovenščina Shqip Српски / srpski Sunda Svenska தமிழ் Тоҷикӣ ไทย Türkçe Українська Tiếng Việt 吴语 ייִדיש 中文 粵語 Эта страница в последний раз была отредактирована 8 февраля 2024 в 06:56. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

OLAP (англ. online analytical processing, интерактивная аналитическая обработка) — технология обработки данных, заключающаяся в подготовке суммарной (агрегированной) информации на основе больших массивов данных, структурированных по многомерному принципу. Реализации технологии OLAP являются компонентами программных решений класса Business Intelligence[1]. Основоположник термина OLAP Эдгар Кодд предложил в 1993 году «12 правил аналитической обработки в реальном времени» (по аналогии с ранее сформулированными «12 правил для реляционных баз данных»). Причина использования OLAP для обработки запросов — скорость. Реляционные базы данных хранят сущности в отдельных таблицах, которые обычно хорошо нормализованы. Эта структура удобна для операционных баз данных (системы OLTP), но сложные многотабличные запросы в ней выполняются относительно медленно. OLAP-структура, созданная из рабочих данных, называется OLAP-куб. Куб создаётся из соединения таблиц с применением схемы звезды или схемы снежинки. В центре схемы звезды находится таблица фактов, которая содержит ключевые факты, по которым делаются запросы. Множественные таблицы с измерениями присоединены к таблице фактов. Эти таблицы показывают, как могут анализироваться агрегированные[англ.] реляционные данные. Количество возможных агрегирований определяется количеством способов, которыми первоначальные данные могут быть иерархически отображены. Например, все клиенты могут быть сгруппированы по городам или регионам страны (Запад, Восток, Север и так далее), таким образом, 50 городов, восемь регионов и две страны составят три уровня иерархии с 60-ю членами. Также клиенты могут быть объединены по отношению к продукции; если существуют 250 продуктов по 20 категориям, три группы продукции и три производственных подразделения, то количество агрегатов составит 16 560. При добавлении измерений в схему количество возможных вариантов быстро достигает десятков миллионов и более. OLAP-куб содержит базовые данные и информацию об измерениях (агрегаты). Куб потенциально содержит всю информацию, которая может потребоваться для ответов на любые запросы. При огромном количестве агрегатов зачастую полный расчёт происходит только для некоторых измерений, для остальных же производится «по требованию». Существуют три типа OLAP:[2] MOLAP — классическая форма OLAP, так что её часто называют просто OLAP. Она использует суммирующую базу данных и создаёт требуемую многомерную схему данных с сохранением как базовых данных, так и агрегатов. ROLAP работает напрямую с реляционной базой данных, факты и таблицы с измерениями хранятся в реляционных таблицах, и для хранения агрегатов создаются дополнительные реляционные таблицы. HOLAP использует реляционные таблицы для хранения базовых данных и многомерные таблицы для агрегатов. Особым случаем ROLAP является «ROLAP реального времени» (Real-time ROLAP — R-ROLAP). В отличие от ROLAP в R-ROLAP для хранения агрегатов не создаются дополнительные реляционные таблицы, а агрегаты рассчитываются в момент запроса. При этом многомерный запрос к OLAP-системе автоматически преобразуется в SQL-запрос к реляционным данным. Каждый тип хранения имеет определённые преимущества, хотя есть разногласия в их оценке у разных производителей. MOLAP лучше всего подходит для небольших наборов данных, он быстро рассчитывает агрегаты и возвращает ответы, но при этом генерируются огромные объёмы данных. ROLAP считается более масштабируемым решением, притом более экономичным к пространству хранения, но с ограничениями по возможностям аналитической обработки. HOLAP находится посреди этих двух подходов, он достаточно хорошо масштабируется, и позволяет преодолеть ряд ограничений. Архитектура R-ROLAP позволяет производить многомерный анализ OLTP-данных в режиме реального времени. Сложность в применении OLAP состоит в создании запросов, выборе базовых данных и разработке схемы, в результате чего большинство продуктов OLAP поставляются вместе с огромным количеством предварительно настроенных запросов. Другая проблема — в базовых данных, они должны быть полными и непротиворечивыми. Исторически первой многомерной системой управления базами данных, по существу являющейся OLAP-реализацией, считается система Express, разработанная в 1970-м году компанией IRI (позднее права на продукт были приобретены корпорацией Oracle и превращён в OLAP-опцию для Oracle Database)[3]. Термин OLAP ввёл Эдгар Кодд в публикации в журнале Computerworld в 1993 году[4], в которой он предложил 12 принципов аналитической обработки, по аналогии с 12 правилами для реляционных баз данных, сформулированными им же десятилетием ранее, в качестве референтного продукта, удовлетворяющего предложенным принципам, Кодд указал систему Essbase компании Arbor (поглощённой в 1997 году компанией Hyperion, которую, в свою очередь, в 2007-м году купила Oracle). Примечательно, что впоследствии публикация была изъята из архивов Computerworld из-за возможного конфликта интересов, так как Кодд позднее оказывал консультационные услуги для Arbor[5]. С точки зрения реализации, делятся на «физическую OLAP» и «виртуальную» (реляционную, англ. Relational OLAP, ROLAP). «Физическая», в свою очередь, в зависимости от реализации подразделяется на многомерную (англ. Multidimensional OLAP, MOLAP) и гибридную — (англ. Hybrid OLAP, HOLAP). В первом случае наличествует программа, выполняющая на этапе предварительной загрузки данных в OLAP предварительный расчёт агрегатов (вычислений по нескольким исходным значениям, например «итог за месяц»), которые затем сохраняются в специальную многомерную базу данных, обеспечивающую быстрое извлечение и экономичное хранение. Гибридная реализация является комбинацией: сами данные хранятся в реляционной базе данных, а агрегаты — в многомерной. В ROLAP-реализациях все данные хранятся и обрабатываются в реляционных системах управления базами данных, а агрегаты могут не существовать вообще или создаваться по первому запросу к базе данных или кэше аналитического программного обеспечения. С точки зрения пользователя, все варианты выглядят похожими по возможностям. Наибольшее применение OLAP находит в продуктах для финансового планирования, хранилищах данных, решениях класса Business Intelligence. Среди коммерческих продуктов выделяют: Microsoft SQL Server Analysis Services, Essbase, Oracle Database OLAP Option, IBM Cognos TM1; существует несколько свободных решений, среди них отмечаются Mondrian и Palo[6]. 1 Действие OLAP 2 Реализации OLAP 3 См. также 4 Примечания 5 Ссылки многомерная OLAP (Multidimensional OLAP — MOLAP); реляционная OLAP (Relational OLAP — ROLAP); гибридная OLAP (Hybrid OLAP — HOLAP). Сравнение OLAP-серверов ↑ IT Term Definitions (англ.). Gartner (2011). Дата обращения: 12 июня 2011. Архивировано из оригинала 3 февраля 2012 года. ↑ Krzysztof J. Cios, Data Mining: A Knowledge Discovery Approach, Springer 2007, ISBN 978-0-387-33333-5 — Page 123 «4.2 OLAP Server Architectures» ↑ Pendse, Nigel. The origins of today’s OLAP products (англ.). OLAP Report (20 июля 2002). — «1992. Essbase launched. First well-marketed OLAP product, which went on to become the market leading OLAP server by 1997.» Дата обращения: 3 января 2011. Архивировано 21 декабря 2007 года. ↑ 
Codd, Edgar F. Providing OLAP to User-Analysts: An IT Mandate // Computerworld. — Т. 27, № 30. — ISSN 0010-4841. Архивировано 11 ноября 1998 года. ↑ Whitehorn, Mark OLAP and the need for SPEED. In another dimension (англ.). Developer. The Register (26 января 2007). — «After the paper was published it gained some notoriety because Codd had undertaken consulting work for Arbour Software (now Hyperion). This was unfortunate because the paper actively discussed one of Arbour’s products, Essbase. In the end, Computerworld took the unusual step of retracting the article; nevertheless this paper clearly marks the start of the term’s use». Дата обращения: 11 октября 2011. Архивировано из оригинала 3 февраля 2012 года. ↑ Krzysztof J. Cios, Data Mining: A Knowledge Discovery Approach, Springer 2007, ISBN 978-0-387-33333-5 — Page 127 «4.5 Example Commercial OLAP Tools» Классификация OLAP-систем вида xOLAP, А. Н. Андреев База данных Измерение (хранилище данных)[англ.] Модель измерений[англ.] Факт OLAP Схема звезды Схема снежинки Якорная модель Таблица измерений Data vault[англ.] HOLAP MOLAP ROLAP Операционное хранилище[англ.] Словарь данных Метаданные Витрина данных Шестая нормальная форма Суррогатный ключ Таблица фактов Ранний факт[англ.] Мера (хранилище данных)[англ.] Таблица измерений Медленно меняющиеся измерения Вырожденное измерение[англ.] ETL Извлечение данных[англ.] Трансформация данных[англ.] Business Intelligence Панель индикаторов Data mining DSS OLAP-куб Data Mining Extensions[англ.] MDX XMLA[англ.] Инструменты бизнес-аналитики Генератор отчётов Электронная таблица Билл Инмон[англ.] Ральф Кимболл[англ.] Хранилище данных Информационные технологии Базы данных OLAP Википедия:Cite web (заменить webcitation-архив: deadlink yes) Страницы, использующие волшебные ссылки ISBN Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад Azərbaycanca Беларуская Български Català Čeština Deutsch English Español Eesti فارسی Français עברית Bahasa Indonesia Italiano 日本語 한국어 Nederlands Norsk bokmål Polski Português Simple English Slovenčina Svenska ไทย Українська 中文 Эта страница в последний раз была отредактирована 14 ноября 2023 в 07:29. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Информацио́нная систе́ма (ИС) — система обработки информации совместно с соответствующими организационными ресурсами (человеческими, техническими, финансовыми и т. д.), которая обеспечивает и распространяет информацию (ISO/IEC 2382:2015)[1]. ИС предназначена для своевременного обеспечения надлежащих людей надлежащей информацией[2], то есть для удовлетворения конкретных информационных потребностей в рамках определённой предметной области, при этом результатом функционирования информационных систем является информационная продукция — документы, информационные массивы, базы данных и информационные услуги[3]. Понятие информационной системы интерпретируют по-разному, в зависимости от контекста. Достаточно широкое понимание информационной системы подразумевает, что её неотъемлемыми компонентами являются данные, техническое и программное обеспечение, а также персонал и организационное обеспечение[4]. Широко[5] трактует понятие «информационной системы» федеральный закон Российской Федерации «Об информации, информационных технологиях и о защите информации», подразумевая под информационной системой совокупность содержащейся в базах данных информации и обеспечивающих её обработку информационных технологий и технических средств[6]. Среди российских ученых в области информатики наиболее широкое определение ИС дает М. Р. Когаловский, по мнению которого в понятие информационной системы помимо данных, программ, аппаратного обеспечения и людских ресурсов следует также включать коммуникационное оборудование, лингвистические средства и информационные ресурсы, которые в совокупности образуют систему, обеспечивающую «поддержку динамической информационной модели некоторой части реального мира для удовлетворения информационных потребностей пользователей»[7][8]:59. Более узкое понимание информационной системы ограничивает её состав данными, программами и аппаратным обеспечением. Интеграция этих компонентов позволяет автоматизировать процессы управления информацией и целенаправленной деятельности конечных пользователей, направленной на получение, модификацию и хранение информации[9]. Так, российский стандарт ГОСТ РВ 51987 подразумевает под ИС «автоматизированную систему, результатом функционирования которой является представление выходной информации для последующего использования». ГОСТ Р 53622-2009 использует термин информационно-вычислительная система для обозначения совокупности данных (или баз данных), систем управления базами данных и прикладных программ, функционирующих на вычислительных средствах как единое целое для решения определённых задач[10]. ИС в деятельности организации рассматривается как программное обеспечение, реализующее её деловую стратегию и бизнес-процессы. Желательной целью является создание и развертывание единой корпоративной информационной системы, удовлетворяющей информационные потребности всех сотрудников, служб и подразделений организации. На практике создание такой системы слишком затруднено или даже невозможно, а иногда и нецелесообразно[11], вследствие чего на предприятии обычно функционируют несколько различных систем, решающих отдельные группы задач: управление производством, финансово-хозяйственная деятельность, электронный документооборот и т. д. Часть задач бывает «покрыта» одновременно несколькими информационными системами, часть задач — вовсе не автоматизирована. Такая ситуация получила название «лоскутной автоматизации» и является довольно типичной для многих предприятий[12]. По степени распределённости отличают: Распределённые ИС, в свою очередь, разделяют на: В файл-серверных ИС база данных находится на файловом сервере, а СУБД и клиентские приложения находятся на рабочих станциях. В клиент-серверных ИС база данных и СУБД находятся на сервере, а на рабочих станциях находятся только клиентские приложения[13]. В свою очередь, клиент-серверные ИС разделяют на двухзвенные и многозвенные. В двухзвенных (англ. two-tier) ИС всего два типа «звеньев»: сервер базы данных, на котором находятся БД и СУБД (back-end), и рабочие станции, на которых находятся клиентские приложения (front-end). Клиентские приложения обращаются к СУБД напрямую. В многозвенных (англ. multi-tier) ИС добавляются промежуточные «звенья»: серверы приложений (application servers). Пользовательские клиентские приложения не обращаются к СУБД напрямую, они взаимодействуют с промежуточными звеньями. Типичный пример применения трёхзвенной архитектуры — современные веб-приложения, использующие базы данных. В таких приложениях помимо звена СУБД и клиентского звена, выполняющегося в веб-браузере, имеется как минимум одно промежуточное звено — веб-сервер с соответствующим серверным программным обеспечением. По степени автоматизации ИС делятся на: «Ручные ИС» («без компьютера») существовать не могут, поскольку существующие определения предписывают обязательное наличие в составе ИС аппаратно-программных средств. Вследствие этого понятия «автоматизированная информационная система», «компьютерная информационная система» и просто «информационная система» являются синонимами.[7] По характеру обработки данных ИС делятся на: Поскольку ИС создаются для удовлетворения информационных потребностей в рамках конкретной предметной области, то каждой предметной области (сфере применения) соответствует свой тип ИС. Перечислять все эти типы не имеет смысла, так как количество предметных областей велико, но можно указать в качестве примера следующие типы ИС: Согласно исследованиям Минтруда РФ, на 2015 год профессии, относящиеся к IT-отрасли (администратор баз данных, программист, разработчик web- и мультимедийных приложений, сетевой и системный администратор, специалист по информационным ресурсам, специалист по информационным системам, специалист по обслуживанию телекоммуникаций, техник по защите информации) входят в список 50 самых востребованных профессий в России. Разработчиками списка было рассмотрено 1620 профессий, опрошено более 13,3 тыс. организаций[15]. Согласно рейтингу профессий CNNMoney/PayScale.com, в США профессии, относящиеся к IT-отрасли, много лет входят в десятку лидеров[16]. По данным национального фонда алгоритмов и программ для ЭВМ в России существует и функционирует чуть более 160 информационных систем[17], владельцами (операторами), которых являются органы власти или государственные учреждения (в основном это государственные внебюджетные фонды). К таким информационным системам относятся: Information system: An information processing system, together with associated organizational resources such as human, technical, and financial resources, that provides and distributes information.
Information processing system: One or more data processing systems and devices, such as office and communication equipment, that perform information processing.
Data processing system: One or more computers, peripheral equipment, and software that perform data processing. 1 Понятие информационной системы 2 Классификации информационных систем

2.1 Классификация по архитектуре
2.2 Классификация по степени автоматизации
2.3 Классификация по характеру обработки данных
2.4 Классификация по сфере применения
2.5 Классификация по охвату задач (масштабности) 2.1 Классификация по архитектуре 2.2 Классификация по степени автоматизации 2.3 Классификация по характеру обработки данных 2.4 Классификация по сфере применения 2.5 Классификация по охвату задач (масштабности) 3 Востребованность 4 Информационные системы России 5 См. также 6 Примечания 7 Литература 8 Ссылки настольные (desktop), или локальные ИС, в которых все компоненты (БД, СУБД, клиентские приложения) находятся на одном компьютере; распределённые (distributed) ИС, в которых компоненты распределены по нескольким компьютерам. файл-серверные ИС (ИС с архитектурой «файл-сервер»); клиент-серверные ИС (ИС с архитектурой «клиент-сервер»). автоматизированные: информационные системы, в которых автоматизация может быть неполной (то есть требуется постоянное вмешательство персонала); автоматические: информационные системы, в которых автоматизация является полной, то есть вмешательство персонала не требуется или требуется только эпизодически. информационно-справочные, или информационно-поисковые ИС, в которых нет сложных алгоритмов обработки данных, а целью системы является поиск и выдача информации в удобном виде[14]; ИС обработки данных, или решающие ИС, в которых данные подвергаются обработке по сложным алгоритмам. К таким системам в первую очередь относят автоматизированные системы управления и системы поддержки принятия решений. Экономическая информационная система — информационная система, предназначенная для выполнения функций управления на предприятии. Медицинская информационная система — информационная система, предназначенная для использования в лечебном или лечебно-профилактическом учреждении. Географическая информационная система — информационная система, обеспечивающая сбор, хранение, обработку, доступ, отображение и распространение пространственно-координированных данных (пространственных данных). Персональная ИС предназначена для решения некоторого круга задач одного человека. Групповая ИС ориентирована на коллективное использование информации членами рабочей группы или подразделения. Корпоративная ИС автоматизирует все бизнес-процессы целого предприятия (организации) или их значительную часть[8]:73, достигая их полной информационной согласованности, без  безизбыточности и прозрачности. Такие системы иногда называют информационными системами предприятия и системами комплексной автоматизации предприятия. АСК НДС; ГАС «Выборы»; ГАС «Правосудие»; Государственная автоматизированная система правовой статистики; Государственная информационная система о государственных и муниципальных платежах; ЕГАИС (алкоголь); ЕГАИС учёта древесины; Единая биометрическая система; Единая информационная система в сфере закупок; ИСДМ-Рослесхоз; Федеральная информационная адресная система; Федеральная государственная информационная система координации информатизации. Информационная безопасность Информационная технология Открытая информационная система ↑ Международный стандарт ISO/IEC 2382:2015 Information technology — Vocabulary Архивная копия от 17 июня 2016 на Wayback Machine:


Information system: An information processing system, together with associated organizational resources such as human, technical, and financial resources, that provides and distributes information.
Information processing system: One or more data processing systems and devices, such as office and communication equipment, that perform information processing.
Data processing system: One or more computers, peripheral equipment, and software that perform data processing. ↑ William S. Davis, David C. Yen, 1998: «Information system is a set of hardware, software, data, human, and procedural components intended to provide the right data and information to the right person at the right time». ↑ ГОСТ 7.0-99. Система стандартов по информации, библиотечному и издательскому делу. Информационно-библиотечная деятельность. Библиография. Термины и определения ↑ William S. Davis, David C. Yen, 1998. ↑ Поскольку понятие информационных технологий само по себе может рассматриваться достаточно широко. ↑ Федеральный закон Российской Федерации от 27 июля 2006 г. № 149-ФЗ. Об информации, информационных технологиях и о защите информации ↑ 1 2 Когаловский М. Р., 2003. ↑ 1 2 Когаловский М. Р. и др. Глоссарий по информационному обществу Архивная копия от 31 марта 2020 на Wayback Machine / Под общ. ред. Ю. Е. Хохлова. — М.: Институт развития информационного общества, 2009. — 160 с. ↑ Ю. А. Маглинец. Анализ требований к автоматизированным информационным системам. — Бином, 2008. ISBN 978-5-94774-865-9 ↑ ГОСТ Р 53622-2009. Информационные технологии. Информационно-вычислительные системы. Стадии и этапы жизненного цикла, виды и комплектность документов ↑ Ковалёв А. Всегда ли плоха «лоскутная автоматизация»? Архивная копия от 21 апреля 2021 на Wayback Machine // Директор информационной службы, 2011, № 11. ↑ Лисин Н. Лоскутная автоматизация, или как управлять «зоопарком» программ Архивная копия от 28 февраля 2011 на Wayback Machine // BYTE Россия, 2009 ↑ Ritu Agarwal, H. Lucas. The Information Systems Identity Crisis: Focusing on High-Visibility and High-Impact Research // MIS Q.. — 2005. — doi:10.2307/25148689. Архивировано 27 января 2022 года. ↑ I. Benbasat, R. Zmud. The Identity Crisis Within the IS Discipline: Defining and Communicating the Discipline's Core Properties // MIS Q.. — 2003. — doi:10.2307/30036527. Архивировано 27 января 2022 года. ↑ Топ-список 50 наиболее перспективных и востребованных профессий среднего образования в РФ по версии МинТруда  (неопр.). Дата обращения: 25 мая 2017. Архивировано 30 мая 2017 года. ↑ 100 Best Jobs in America. Архивная копия от 2 июня 2017 на Wayback Machine CNNMoney/PayScale.com’s top 100 careers with big growth, great pay and satisfying work ↑ Национальный фонд алгоритмов и программ для ЭВМ  (рус.). Портал ФГИС КИ. Дата обращения: 6 июня 2023. Архивировано 3 апреля 2022 года. William S. Davis, David C. Yen. The Information System Consultant's Handbook. Systems Analysis and Design. — CRC Press, 1998. — 800 с. — ISBN 0849370019. Когаловский М. Р. Перспективные технологии информационных систем. — М.: ДМК Пресс; Компания АйТи, 2003. — 288 с. — ISBN 5-94074-200-9. Когаловский М. Р. Энциклопедия технологий баз данных. — М.: Финансы и статистика, 2002. — 800 с. — ISBN 5-279-02276-4. Фаулер М. Архитектура корпоративных программных приложений.: Пер. с англ. — М.: Издательский дом «Вильямс», 2006. — 544 с. ISBN 5-8459-0579-6 Антамошин А. Н., Близнова О. В., Бобов А. В., Большаков А. А., Лобанов В. В., Кузнецова И. Н. Интеллектуальные системы управления организационно-техническими системами. — М.: Горячая линия - Телеком, 2006. — 160 с. — 500 экз. — ISBN 5-93517-289-5. Бодров О. А., Медведев Р. Е. Предметно-ориентированные экономические информационные системы. — М.: Горячая линия - Телеком, 2013. — 244 с. — 500 экз. — ISBN 978-5-9912-0263-3. Бородакий Ю. В., Лободинский Ю. Г. Эволюция информационных систем (современное состояние и перспективы). — М.: Горячая линия - Телеком, 2011. — 368 с. — 1000 экз. — ISBN 978-5-9912-0199-5. Васильев Р. Б., Калянов Г. Н., Лёвочкина Г. А. Управление развитием информационных систем. — М.: Горячая линия - Телеком, 2009. — 368 с. — 1000 экз. — ISBN 978-5-9912-0065-3. Данилин А., Слюсаренко А. Архитектура и стратегия. «Инь» и «Янь» информационных технологий предприятия. — М.: Интернет-университет информационных технологий, 2005. — 504 с. — ISBN 5-9556-0045-0. Петров В. Н. Информационные системы. — СПб.: Питер, 2002. — 688 с. — 5000 экз. — ISBN 5-318-00561-6. Медиафайлы на Викискладе Информационная система — Большая Российская энциклопедия. Большая российская (научно-образовательный портал) Britannica (онлайн) Universalis BNE: XX535097 BNF: 119419441 GND: 4072806-7 J9U: 987007550724205171, 987007550613505171 LCCN: sh85066163 NDL: 01092953 NKC: ph114774 Информационные системы Страницы, использующие волшебные ссылки ISBN Статьи со ссылками на Викисклад Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Текущая версия Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад العربية Azərbaycanca Башҡортса Беларуская Беларуская (тарашкевіца) Български Bosanski Català Čeština Dansk Deutsch Ελληνικά English Esperanto Español Eesti Euskara فارسی Suomi Français Galego گیلکی עברית हिन्दी Hrvatski Հայերեն Bahasa Indonesia 日本語 한국어 Кыргызча Lietuvių Монгол Bahasa Melayu Mirandés Nederlands Norsk bokmål Polski Português Română Sicilianu Srpskohrvatski / српскохрватски Simple English Slovenčina Slovenščina Shqip Српски / srpski Sunda Svenska தமிழ் ไทย Tagalog Türkçe Українська Oʻzbekcha / ўзбекча Tiếng Việt 吴语 中文 粵語 IsiZulu Эта страница в последний раз была отредактирована 25 апреля 2024 в 15:34. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

   1.5. Понятие и виды информационных систем  Под 
системой понимают любой объект, который одновременно рассматривается и как единое целое, и как объединенная в интересах достижения поставленных целей совокупность разнородных элементов. Системы значительно отличаются между собой как по составу, так и по главным целям. Информационная система - это система, осуществляющая: получение входных данных; обработку этих данных и/или изменение собственного внутреннего состояния (внутренних связей/отношений); выдачу результата либо изменение своего внешнего состояния (внешних связей/отношений). Простой информационной системой назовем систему, элементы которой функционируют в соответствии с правилами, порожденными одним и тем же взаимонепротиворечивым множеством аксиом. Сложной информационной системой назовем систему, которая содержит элементы, функционирующие в соответствии с правилами, порожденными отличными друг от друга множествами аксиом. При этом допускается, что среди правил функционирования различных элементов могут быть взаимопротиворечивые правила и цели. Пример 2. Приведем несколько систем, состоящих из разных элементов и направленных на реализацию разных целей.  Система Элементы системы Главная цель системы Фирма Люди, оборудование, материалы, здания и др. Производство товаров Компьютер Электронные и электромеханические элементы, линии связи и др. Обработка данных Телекоммуникационная система Компьютеры, модемы, кабели, сетевое програм-мное обеспечение и др. Передача информации Информационная система Компьютеры, компьютерные сети, люди, информационное и программное обеспечение Производство профессиональной информации  В информатике понятие "система" широко распространено и имеет множество смысловых значений. Чаще всего оно используется применительно к набору технических средств и программ. Системой может называться аппаратная часть компьютера. Системой может также считаться множество программ для решения конкретных прикладных задач, дополненных процедурами ведения документации и управления расчетами. Добавление к понятию "система" слова "информационная" отражает цель ее создания и функционирования. Информационные системы обеспечивают сбор, хранение, обработку, поиск, выдачу информации, необходимой в процессе принятия решений задач из любой области. Они помогают анализировать проблемы и создавать новые продукты. Информационная система - взаимосвязанная совокупность средств, методов и персонала, используемых для хранения, обработки и выдачи информации в интересах достижения поставленной цели. Современное понимание информационной системы предполагает использование в качестве основного технического средства переработки информации персонального компьютера. В крупных организациях наряду с персональным компьютером в состав технической базы информационной системы может входить мэйнфрейм или суперЭВМ. Кроме того, техническое воплощение информационной системы само по себе ничего не будет значить, если не учтена роль человека, для которого предназначена производимая информация и без которого невозможно ее получение и представление. Внимание! Под 
организацией будем понимать сообщество людей, объединенных общими целями и использующих общие материальные и финансовые средства для производства материальных и информационных продуктов и услуг. В тексте на равноправных началах будут употребляться два слова: "организация" и "фирма". Необходимо понимать разницу между компьютерами и информационными системами. Компьютеры, оснащенные специализированными программными средствами, являются технической базой и инструментом для информационных систем. Информационная система немыслима без персонала, взаимодействующего с компьютерами и телекоммуникациями.  1.5.1. Этапы развития информационных систем 1.5.2. Процессы в информационной системе 1.5.3. Что можно ожидать от внедрения информационных систем 1.5.4. Виды информационных систем 

 <-- íàçàä  âïåðåä --> _____________________________________________________________________________________________________________________________  Òåìà 1. Ââåäåíèå â èíôîðìàöèîííûå ñèñòåìû _____________________________________________________________________________________________________________________________  1.1. Понятие информационных систем 1.2. Структура информационной системы 1.3. Классификация информационных систем по различным признакам 1.4. Различные типы информационных систем на предприятии  1.1. Понятие информационных систем Под системой понимают любой объект, который одновременно рассматривается и как единое целое, и как объединенная в интересах достижения поставленных целей совокупность разнородных элементов. Системы значительно отличаются между собой как по составу, так и по главным целям. В информатике понятие «система» широко распространено и имеет множество смысловых значений. Чаще всего оно используется применительно к набору технических средств и программ. Системой может называться аппаратная часть компьютера. Системой может также считаться множество программ для решения конкретных прикладных задач, дополненных процедурами ведения документации и управления расчетами. Добавление к понятию «система» слова «информационная» отражает цель ее создания и функционирования. Информационные системы обеспечивают сбор, хранение, обработку, поиск, выдачу информации, необходимой в процессе принятия решений задач из любой области. Они помогают анализировать проблемы и создавать новые продукты. Информационная система – взаимосвязанная совокупность средств, методов и персонала, используемых для хранения, обработки и выдачи информации в интересах достижения поставленной цели. Информационная система представляет собой хранилище информации, снабженное процедурами ввода, поиска, размещения и выдачи информации. Наличие таких процедур – главная особенность информационных систем, отличающих их от простых скоплений информационных материалов. Например, личная библиотека, в которой может ориентироваться только ее владелец, информационной системой не является. В публичных же библиотеках порядок размещения книг всегда строго определенный. Благодаря ему поиск и выдача книг, а также размещение новых поступлений представляют собой стандартные процедуры, близкие к алгоритмам. [Избачков, Ю. С. Информационные системы [Текст] : [учеб. пособие для вузов по направл. "Информ. и вычисл. техника"] / Ю. С. Избачков, В. Н. Петров. - 2-е изд. - СПб. : Питер, 2008. - 655 с.]  Современное понимание информационной системы предполагает использование в качестве основного технического средства переработки информации персонального компьютера. Кроме того, техническое воплощение информационной системы само по себе ничего не будет значить, если не учтена роль человека, для которого предназначена производимая информация и без которого невозможно ее получение и представление. Необходимо понимать разницу между компьютерами и информационными системами. Компьютеры, оснащенные специализированными программными средствами, являются технической базой и инструментом для информационных систем. Информационная система немыслима без персонала, взаимодействующего с компьютерами и телекоммуникациями. Информационная система определяется следующими свойствами: [Димов Э.М., Диязитдинова А.Р., Качков Д.А. Проектирование информационных систем: Учебное пособие. – Самара: ПГАТИ, 2003. – 78 с.]  Процессы, обеспечивающие работу информационной системы любого назначения, условно можно представить в виде схемы (Рисунок 1), состоящей из блоков:   Рисунок 1. Процессы в информационной системе  Работа информационных систем заключается в обслуживании двух встречных потоков информации: ввода новой информации и выдачи текущей информации по запросам. Поскольку главная задача информационной системы:  обслуживание клиентов, система должна быть устроена так, чтобы ответ на любой запрос выдавался быстро и был достаточно полным. Эти требования обеспечиваются наличием стандартных процедур поиска информации и тем, что данные системы расположены в определенном порядке. [Грекул В.И., Денищенко Г.Н., Коровкина Н.Л. Проектирование информационных систем Интернет-университет информационных технологий -2-е изд. – М.: Бином. Лаборатория знаний Интуит Серия: Основы информационных технологий, 2008. – 300 с. ]  В настоящее время сложилось мнение об информационной системе как о системе, реализованной с помощью компьютерной техники. Хотя в общем случае информационную систему можно понимать и в некомпьютерном варианте. Сама идея информационных систем и некоторые принципы их организации возникли задолго до появления ЭВМ. Библиотеки, архивы, адресные бюро, телефонные справочники – все это информационные системы. Однако компьютеризация на несколько порядков повысила эффективность информационных систем и расширила сферы их применения. Во-первых, резко возросли скорости всех видов обработки информации: поиска и размещения (внутри ЭВМ), выдачи (на экран или печать), передачи и ввода (по средствам электронной и космической связи в информационные системы любой точки земного шара). Для некоторых видов информационных систем именно скорости передачи и ввода играют решающую роль. Таковы, например, автоматизированные системы продажи авиационных, автобусных и железнодорожных билетов или многотерминальные системы электронной торговли ценными бумагами, где только высокая скорость ввода информации может исключить продажу мест (или акций), которые минуту назад были проданы с другого терминала. Во-вторых, во много раз увеличились возможности хранения больших объемов информации: как за счет того, что машинные носители информации в сотни и тысячи раз компактнее бумажных носителей, так и за счет того, что только при высоких скоростях ЭВМ можно проводить поиск в таких объемах за приемлемое время. В-третьих, благодаря использованию электронной связи и сетей ЭВМ потеряло значение расстояние между информационной системой, источниками информации и ее клиентами. Достаточно иметь терминал, т.е. персональную ЭВМ или другое устройство, позволяющее запрашивать и получать нужную информацию и соединенное с системой каналами связи. Не следует думать, что высокая эффективность современных информационных систем автоматически достигается только применением современных технических средств. Для того чтобы максимально использовать их огромные возможности, нужно хорошо проработать структурные, алгоритмические и языковые вопросы, т.е. разработать структуры данных, алгоритмы обработки информации и языки общения с системой. Еще одна важная проблема, которую приходится решать при создании информационных систем, – это защита информации. У этой проблемы – несколько сторон. Во-первых, защита от помех (особенно при передаче по линиям связи) и сбоев аппаратуры. Для ее организации используются методы теории кодирования. Во-вторых, защита от неправильных действий некомпетентного пользователя: никакое неправильное нажатие кнопок терминала или нарушение инструкций при общении с системой не должны портить информацию в системе. И, наконец, защита от несанкционированного доступа, т. е. от пользователей, желающих получить информацию» к которой у них нет права доступа, либо исказить имеющуюся в системе информацию. Для такой защиты используются программные пароли, средства шифрования и т.д. Программное обеспечение первых информационных систем создавалось каждый раз «с нуля»: для новой системы заново строились структура данных и программы обработки информации в ней, разрабатывался язык запросов, транслятор с него и т.д. В настоящее время существуют разнообразные средства программирования информационных систем – системы управления базами данных (СУБД), в состав которых входят средства организации структуры данных, языки запросов и выходных документов, программы ввода информации, удаления мусора и др. СУБД существенно ускоряют процесс разработки информационных систем. [Избачков, Ю. С. Информационные системы [Текст] : [учеб. пособие для вузов по направл. "Информ. и вычисл. техника"] / Ю. С. Избачков, В. Н. Петров. - 2-е изд. - СПб. : Питер, 2008. - 655 с.]  1.2 Структура информационной системы Одним из основных свойств ИС является делимость на подсистемы, которая имеет ряд достоинств с точки зрения разработки и эксплуатации ИС, к которым относятся: Подсистема – это часть системы, выделенная по какому-либо признаку. Обычно выделяют функциональные и обеспечивающие подсистемы. Функциональная подсистема ИС представляет собой комплекс производственных задач с высокой степенью информационных обменов (связей) между задачами. Под задачей понимаем некоторый процесс обработки информации с четко определенным множеством входной и выходной информации (например, начисление сдельной заработной платы, учет прихода материалов, оформление заказа на закупку и пр.). [Грекул В.И., Денищенко Г.Н., Коровкина Н.Л. Проектирование информационных систем Интернет-университет информационных технологий -2-е изд. – М.: Бином. Лаборатория знаний Интуит Серия: Основы информационных технологий, 2008. – 300 с. ]  Функциональные подсистемы реализуют и поддерживают модели, методы и алгоритмы получения управляющей информации. Состав функциональных подсистем весьма разнообразен и зависит от предметной области использования информационной системы, специфики хозяйственной деятельности объекта, управления. Интеграция функциональных подсистем в единую систему достигается за счет создания и функционирования обеспечивающих подсистем, таких как информационная, программная, математическая, техническая, технологическая, организационная и правовая системы. Функциональные подсистемы ИС могут строиться по различным принципам: [Гейн К., Сарсон Т. Структурный системный анализ: средства и методы. Пер. с англ. М.:3 Эйтекс, 1993.]  Общую структуру информационной системы можно рассматривать как совокупность подсистем независимо от сферы применения. В этом случае говорят о структурном признаке классификации, а подсистемы называют обеспечивающими. Таким образом, структура любой информационной системы может быть представлена совокупностью следующих обеспечивающих подсистем: 1) Информационное обеспечение – совокупность единой системы классификации и кодирования информации, унифицированных систем документации, схем информационных потоков, циркулирующих в организации, а также методология построения баз данных. Назначение подсистемы информационного обеспечения состоит в своевременном формировании и выдаче достоверной информации для принятия управленческих решений. 2) Техническое обеспечение – комплекс технических средств, предназначенных для работы информационной системы, а также соответствующая документация на эти средства и технологические, процессы. 3) Программное обеспечение включает в себя совокупность программ регулярного применения, необходимых для решения функциональных задач, и программ, позволяющих наиболее эффективно использовать вычислительную технику, обеспечивая пользователям наибольшие удобства в работе. 4) Математическое обеспечение – совокупность математических методов, моделей и алгоритмов обработки информации, используемых в системе. 5) Лингвистическое обеспечение – совокупность языковых средств, используемых в системе с целью повышения качества ее разработки и облегчения общения человека с машиной. Организационные подсистемы по существу относятся также к обеспечивающим подсистемам, но направлены в первую очередь на обеспечение эффективной работы персонала, и поэтому они могут быть выделены отдельно. К ним относятся: 6) Кадровое обеспечение – состав специалистов, участвующих в создании и работе системы, штатное расписание и функциональные обязанности; 7) Эргономическое обеспечение – совокупность методов и средств,  используемых при разработке и функционировании информационной системы, создающих оптимальные условия для деятельности персонала, для быстрейшего освоения системы; 8) Правовое обеспечение – совокупность правовых норм, регламентирующих создание и функционирование информационной системы, порядок получения, преобразования и использования информации; 9) Организационное обеспечение – комплекс решений, регламентирующих процессы создания и функционирования как системы в целом, так и ее персонала. [Димов Э.М., Диязитдинова А.Р., Качков Д.А. Проектирование информационных систем: Учебное пособие. – Самара: ПГАТИ, 2003. – 78 с.]  1.3 Классификация информационных систем по различным признакам  Однозначной классификации информационных систем не существует. Одна и та же ИС пожжет быть отнесена к различным классам в зависимости от выбранного признака. В данном разделе приводится различная классификация ИС. 1) По степени механизации процедур преобразования информации системы обработки данных делятся на: 2) По признаку структурированности задач выделяют: Структурированная (формализуемая) задача – задача, где известны все ее элементы и взаимосвязи между ними. Принятие решения при этом сводится к выбору одной из предложенных альтернатив. Информационные системы, разрабатывающие альтернативы решений, могут быть модельными или экспертными. 3) По функциональному признаку и уровням управления: 4) По степени автоматизации: 5) По характеру использования результатной информации: 6) По сфере применения: 7) В соответствии с характером обработки информации в ИС на различных уровнях управления предприятием (оперативном, тактическом и стратегическом) выделяют следующие типы информационных систем: К таким задачам относятся формирование стратегических целей, планирование привлечения ресурсов, источников финансирования, выбор места размещения предприятия и т.д. Реже задачи класса СППР решаются на тактическом уровне, например, при выборе поставщиков или заключении контрактов с клиентами. Задачи СППР имеют, как правило, нерегулярный характер. [Избачков, Ю. С. Информационные системы [Текст] : [учеб. пособие для вузов по направл. "Информ. и вычисл. техника"] / Ю. С. Избачков, В. Н. Петров. - 2-е изд. - СПб. : Питер, 2008. - 655 с.]  1.4. Различные типы информационных систем на предприятии На предприятии можно выделить следующие категории информационных систем, каждая из которых занимает определенную нишу в производственном (жизненном) цикле, выполняя необходимые действия с информационным обеспечением предприятия. [Вендров А.М. Проектирование программного обеспечения экономических информационных систем: Учебник. - М.: Финансы и статистика, 2000. - 352 с.: ил.]  ERP-системы ERP-система может быть использована в нескольких направлениях: [Грекул В.И., Денищенко Г.Н., Коровкина Н.Л. Проектирование информационных систем Интернет-университет информационных технологий -2-е изд. – М.: Бином. Лаборатория знаний Интуит Серия: Основы информационных технологий, 2008. – 300 с. ]  CRM-системы CRM-система - это концепция управления активными взаимоотношениями с покупателем. С привязкой к термину управления бизнесом предприятия - это система организации работы фирмы с ориентировкой на потребности клиента, на более активную и плодотворную работу с клиентом. CRM нацелен на совершенствование продаж товара (услуги), а не на производство. Перечислим ниже функциональность, которую можно реализовать в CRM-системах: Продажи: Управление продажами Регистрация продаж по телефону (работа с покупателем по телефону и во время личного общения): Органайзер Поддержка и обслуживание покупателей (пользователей, клиентов): Маркетинг: Отчеты Интеграция с ERP Синхронизация данных [Вендров А.М. Проектирование программного обеспечения экономических информационных систем: Учебник. - М.: Финансы и статистика, 2000. - 352 с.: ил.]  ECM-системы ECM-система – это основная инфраструктура и техническая архитектура для поддержки единого жизненного цикла неупорядоченной информации (файлов) различных типов и форматов. ECM-системы состоят из приложений, которые могут взаимодействовать между собой, а также использоваться и продаваться как отдельный продукт. [Грекул В.И., Денищенко Г.Н., Коровкина Н.Л. Проектирование информационных систем Интернет-университет информационных технологий -2-е изд. – М.: Бином. Лаборатория знаний Интуит Серия: Основы информационных технологий, 2008. – 300 с. ]  CPM-системы CPM-система - это совокупность методологий, отраслевых моделей, метрик, процессов и систем для отслеживания и управления эффективностью деятельности компании. Концепция CPM является расширением и дальнейшим развитием понятия информационно-аналитических систем, дополняя функции отчетности и анализа функциями консолидации, бюджетирования, стратегического планирования и прогноза. [Вендров А.М. Проектирование программного обеспечения экономических информационных систем: Учебник. - М.: Финансы и статистика, 2000. - 352 с.: ил.]  HRM-системы HRM-система – это автоматизированная комплексная система управления персоналом. По сравнению с другими системами автоматизации кадрового учета и расчета зарплаты HRM-система обладает расширенной функциональностью. Кроме системы учета (кадровый учет, штатного расписания, документооборота, учета рабочего времени и отпусков, пенсионного и военного учета и др.) и расчетной системы (зарплаты, налоговых выплат, надбавок и вычетов и т. д.), а также модулей, обрабатывающих количественные данные, подобная система, также включает в себя как таковой HR-контур, предназначенный для работы с качественными показателями персонала. [Смирнова Г.Н. и др. Проектирование экономических информационных систем: Учебник / Г. Н. Смирнова, А.А. Сорокин, Ю.Ф. Тельнов; Под ред. Ю.Ф. Тельнова. - М.: Финансы и статистика, 2001. - 512 с.: ил.]  EAM-системы EAM-система – это система, предназначенная для автоматизации процессов связанных с техническим обслуживанием оборудования, его ремонтом, а также послепродажным обслуживанием оборудования. Сфера применения такой системы: на предприятиях, имеющих значительные производственные мощности, или на предприятиях которым важна надежная и безотказная работа оборудования. Применение EAM-систем помогает сократить расходы, связанные с ремонтом и обслуживанием оборудования, что существенно скажется на бесперебойном выпуске продукции, снижении незапланированных простоев оборудования и в конечном итоге поможет снизить себестоимость продукции, а значит и увеличить конечную прибыль предприятия. [Грекул В.И., Денищенко Г.Н., Коровкина Н.Л. Проектирование информационных систем Интернет-университет информационных технологий -2-е изд. – М.: Бином. Лаборатория знаний Интуит Серия: Основы информационных технологий, 2008. – 300 с. ]  EDMS-системы EDMS-система – это система управления документами компании. Задача данных систем – журналирование, складирование и архивирование в одном месте как можно большего количества документов, чтобы нужная информация не терялась в жизненных циклах фирмы. Подобные системы предназначены для более оптимизированного поиска введенной информации, ускоренного ввода и вывода уже ранее введенной. Другими словами, EDMS-систему можно сравнить с большим электронным архивом, а начальными задатками Workflow. Параллельно EDMS решают массу других задач, обеспечивая управление версиями документов, разграничение прав доступа, репликацию на другие БД и подобные системы. [Вендров А.М. Проектирование программного обеспечения экономических информационных систем: Учебник. - М.: Финансы и статистика, 2000. - 352 с.: ил.]  Workflow-системы Workflow–система – это конвейер электронного документа оборота в офисе. По данным типом системы можно понимать систему, которая оптимизирована под существующие правила электронного документооборота. Поручение в данных системах состоит из его описания, сроков выполнения, списка ответственных сотрудников, присоединенных файлов и прочих свойств данного поручения. Поручения являются основой для работы с традиционными документами. Поэтому workflow и нашли применение в ERP, банковских системах, системах согласования заявок клиентов. Также workflow, можно охарактеризовать как полностью структурированную (формализованную) систему ЭД, с жесткими правилами движения документов, поручений, создания электронных архивов, и журналированием входящей и исходящей корреспонденцией и внутренних документов, к тому же хранящейся в одном месте, что значительно упрощает поиск необходимых документов и доступ к ним. [Смирнова Г.Н. и др. Проектирование экономических информационных систем: Учебник / Г. Н. Смирнова, А.А. Сорокин, Ю.Ф. Тельнов; Под ред. Ю.Ф. Тельнова. - М.: Финансы и статистика, 2001. - 512 с.: ил.]  Collaboration-системы Collaboration-система – это неструктурированная система (сообщество) систем общения сотрудников компании, работающей по принципу, устного общения – т.е. дающий поручение, сам его и контролирует, ведет подробный учет у себя в блоге, который он может сделать доступным тем или иным сотрудникам или группам сотрудников. Также в этой системе управляемыми могут быть: форумы, личная переписка, виртуальные переговорные процессы (чаты), электронная почта. [Вендров А.М. Проектирование программного обеспечения экономических информационных систем: Учебник. - М.: Финансы и статистика, 2000. - 352 с.: ил.]   любая информационная система может быть подвергнута анализу, построена и управляема на основе общих принципов построения систем; информационная система является динамичной и развивающейся; при построении информационной системы необходимо использовать системный подход; выходной продукцией информационной системы является информация, на основе которой принимаются решения; информационную систему следует воспринимать как человекокомпьютерную систему обработки информации. ввод информации из внешних или внутренних источников; обработка входной информации и представление ее в удобном виде; вывод информации для представления потребителям или передачи в другую систему; обратная связь – это информация, переработанная людьми данной организации для коррекции входной информации. упрощение разработки и модернизации ИС в результате специализации групп проектировщиков по подсистемам; упрощение внедрения и поставки готовых подсистем в соответствии с очередностью выполнения работ; упрощение эксплуатации ИС вследствие специализации работников предметной области. предметному; функциональному; проблемному; смешанному (предметно-функциональному). системы ручной обработки; механизированные; автоматизированные; системы автоматической обработки данных; ИС, используемые для решения структурированных задач. ИС, используемые для частично структурированных или неструктурированных задач. Неструктурированная (неформализуемая) задача – задача, в которой невозможно выделить элементы и установить между ними связи. Информационные системы, используемые для решения частично структурированных задач, подразделяются на два вида: создающие управленческие отчеты и ориентированные главным образом на обработку данных (поиск, сортировку, агрегирование, фильтрацию). Используя сведения, содержащиеся в этих отчетах, управляющий принимает решение; разрабатывающие возможные альтернативы решения. модельные информационные системы предоставляют пользователю математические, статистические, финансовые и другие модели, использование которых облегчает выработку и оценку альтернатив решения. Пользователь может получить недостающую ему для принятия решения информацию путем установления диалога с моделью в процессе ее исследования. экспертные информационные системы обеспечивают выработку и оценку возможных альтернатив пользователем за счет создания экспертных систем, связанных с обработкой знаний. производственные системы; системы маркетинга; финансовые и учетные системы; системы кадров (человеческих ресурсов); прочие типы, выполняющие вспомогательные функции в зависимости от специфики деятельности фирмы. ручные характеризуются отсутствием современных технических средств переработки информации и выполнением всех операций человеком; автоматические выполняют все операции по переработке информации без участия человека; автоматизированные предполагают участие в процессе обработки информации и человека, и технических средств, причем главная роль отводится компьютеру. информационно-поисковые системы, предназначенные для сбора, хранения и выдачи информации по запросу пользователя; информационно-советующие системы, предлагающие пользователю определенные рекомендации для принятия решений (системы поддержки принятия решений); информационно-управляющие, результатная информация которых непосредственно участвует в формировании управляющих воздействий. информационные системы организационного управления; ИС управления технологическими процессами (ТП); ИС автоматизированного проектирования (САПР); интегрированные (корпоративные) ИС. Системы обработки данных (СОД, EDP – electronic data processing) предназначены для учета и оперативного регулирования хозяйственных операций, подготовки стандартных документов для внешней среды (счетов, накладных, платежных поручений). Горизонт оперативного управления хозяйственными процессами составляет от одного до нескольких дней и реализует регистрацию и обработку событий, например, оформление и мониторинг выполнения заказов, приход и расход материальных ценностей на складе, ведение табеля рабочего времени и т.д. Эти задачи имеют итеративный, регулярный характер, выполняются непосредственным исполнителем хозяйственных процессов (рабочими, кладовщиками, администраторами и пр.) и связаны с оформлением и пересылкой документов в соответствии с четко определенными алгоритмами. Результаты выполнения хозяйственных операций через экранные формы вводятся в базу данных; Информационная система управления (ИСУ, MIS – management information system) ориентирована на тактический уровень управления: среднесрочное планирования, анализ и организацию работ в течение нескольких недель (месяцев), например, анализ и планирование поставок, сбыта, составление производственных программ. Для данного класса задач характерны регламентированность (периодическая повторяемость) формирования результатных документов и четко определенный алгоритм решения задач, например, свод заказов дл формирования производственной программы и определение потребности в комплектующих деталях и материалах на основе спецификаций изделий. Решение подобных задач предназначено для руководителей различных служб предприятий (отделов материально-технического снабжения и сбыта, цехов и т.п.). Задачи решаются на основе накопленной базы данных; Система поддержки принятия решений (СППР, DSS – decision support system) используются в основном на верхнем уровне управления (руководства предприятия), имеющего стратегическое долгосрочное значение в течение года или нескольких лет. ERP (Enterprise Resource Planning) – система планирования (управления) ресурсами предприятия. CRM (Customer relationship management) – модель взаимодействия, полагающая, что центром всей философии бизнеса является клиент, а основными направлениями деятельности являются меры по поддержке эффективного маркетинга, продаж и обслуживания клиентов. ECM (Enterprise Content Management) – это стратегическая инфраструктура и техническая архитектура для поддержки единого жизненного цикла неструктурированной информации (контента) различных типов и форматов. CPM (Corporate Performance Management) – концепция управления эффективностью бизнеса, охватывающая весь спектр задач в области стратегического и финансового управления компанией. HRM (Human Resource Management) – область знаний и практической деятельности, направленная на своевременное обеспечение организации персоналом и оптимальное его использование. EAM (Enterprise Asset Management) – это информационная система, предназначенная в основном для автоматизации процессов связанных с техническим обслуживанием оборудования, его ремонтом, а также послепродажным обслуживанием этого оборудования. EDMS (Electronic Document Management) – система управления документами предприятия. Workflow (Business Process Management (BPM)) – система отвечающая за документооборот предприятия в комплексе, начиная от простого поручения до конечных маршрутов и версий используемых документов. Collaboration – система, отвечающая за электронное взаимодействие людей, но не формализованное, как workflow, и не просто «архив», как EDMS. построение информационной системы для идентификации и планирования всех ресурсов организации (фирмы); создание методологии эффективного планирования и управления всеми ресурсами предприятия, которые могут быть необходимы для осуществления продаж, производства, закупок и учета при исполнении заказов клиентов в сферах производства, дистрибьюции или для оказания услуг. Отличие ERP-система от EDMS состоит в следующем: что, в ERP документы создаются не в начале жизненного цикла, а в конце его или после, т.е. документы создаются после того как созданы, обсуждены, проверены, согласованы, утверждены и т.д. А EDMS осуществляет поддержку такого жизненного цикла документов на предприятии в реальном времени. управление контактами; работа с клиентами; ввод заказов покупателей; создание коммерческих предложений; анализ «трубы продаж» («воронки продаж»); анализ цикла продаж; региональный анализ; отчетность по продажам (запланированная и произвольная); создание и распределение списка покупателей; автоматический набор номера покупателя; регистрация звонков (в автоматическом режиме, при наличии регистратора звонков); регистрация заказов покупателей; календарь и планирование (как для группы, так и для каждого отдельного пользователя); e-mail; регистрация обращений покупателей; переадресация обращений; движение заявок (заказов) покупателя внутри компании; отчетность по заказам покупателя (клиента); информация по запросам (заказам, покупкам) клиента; управление гарантийным/постгарантийным и коммерческим сервисным обслуживанием; маркетинговые кампании; управление возможными заказами; классификатор товаров и услуг, которые компания предлагает заказчикам; для руководящего состава; для среднего звена; для всех остальных; получение/отправка данных через Интернет; с внешними базами данных (БД); сделки через Интернет; с мобильными пользователями и портативными устройствами; синхронизация с другими БД (внутри компании) и серверами приложений.

Содержание Информационная система (ИС) – это специализированная система, которая необходима для того, чтобы хранить, искать и обрабатывать информацию. Она включает в себя соответствующие организационные ресурсы, отвечающие за обеспечение и распространение информации. ИС нужна для того, чтобы своевременно доставлять информацию. Помогает удовлетворять определенные потребности в информации в рамках заданной предметной области. Результатом послужит информационная продукция. К ней относят: Понятие ИС интерпретируется согласно имеющегося контекста. В широком понимании это связь, в которой обязательно есть программное обеспечение, данные и персонал, а также организационное ПО. В широком понимании это совокупность содержащейся в базе данных информации и обеспечивающих ее грамотную обработку информационные технологии и всевозможные технические средства. В деятельности организации ИС рассматривается как программное обеспечение, реализующее деловую стратегии и бизнес-процессы. Цель – создание и развертывание единой корпоративной системы, которая будет удовлетворять потребности подчиненных в электронной информации, а также подразделений организации. Перед тем как рассматривать проектирование информационных систем, необходимо запомнить несколько ключевых понятий. Без них дальнейшее изучение темы вызовет определенные трудности: Для того, чтобы лучше понимать рассмотренные термины, можно изучить предложенную таблицу. ИС в 21 веке является основным элементом в сфере IT-технологий. Соответствующие системы нужны для определенных целей. Они обеспечивают: Полученные сведения анализируются и изучаются получателями для принятия решений в различных областях деятельности. Пример – рассмотрение проблем при создании программных продуктов и проектов. Перед тем как организовывать проектирование ИС, нужно понять структуру соответствующего элемента. А затем – изучить ключевые концепции разработки новых проектов с их преимуществами и недостатками. Лишь после этого целесообразно говорить об успехе поставленной задачи. ИС бывают: Далее каждый вариант будет рассмотрен более подробно. Особый акцент сделан на программный тип информационных систем. На его примере разберем основные концепции и методологии разработки. Это – совокупность имеющихся в компании или организации технических средств, обеспечивающих работоспособность системы. Сюда относят технические процессы и соответствующую документацию. Примеры: компьютеры, устройства для хранения/сбора/вывода и передачи данных, связные линии, оргтехника. Документация позволяет оформить выбор оборудования, а также описать принципы организации эксплуатации соответствующего устройства и обработки имеющихся данных. Подразделяется на несколько типов: Для организации ТО используют разные формы организации. Пример – децентрализованная. В ней каждая подсистема на компьютере реализована непосредственно на рабочем месте. Есть централизованная форма организации – работать предстоит на специальных вычислительных центрах и крупных ЭВМ. Последний вариант – частично децентрализованная форма. В ней часть подсистем базируется на ПК, а часть – в вычислительных центрах. Это – самый распространенный и перспективный вариант для любого предприятия и компании. Данные элементы представлены комплексом математических моделей, алгоритмов и методов, помогающих осуществлять задачи и цели ИС. Способствуют полноценному функционированию подсистемы технического обеспечения. К математическому виду относят: К программному обеспечению можно отнести: При создании проекта информационной системы ПО играет огромную роль. Особенно в век стремительного развития IT технологий. Требуется для того, чтобы формировать и выдавать актуальные данные. С их помощью можно принимать эффективные управленческие решения. Является основой для большинства сфер деятельности и бизнеса. Представляет собой комплекс подсистем: Соответствующие сведения пригодятся всем, кто планирует работать в области IT. Особенно это касается разработчиков. Для них методологии создания информационных проектов – база, без которой релиз продуманной идеи невозможен. Организационное обеспечение – средства и методы, регламентирующие взаимодействие сотрудников друг с другом, а также их работу с разными техническими средствами во время создания и использования системы. Соответствующая подсистема требуется для: Также она потребуется при разработке управленческих решений. Таких, которые повысят эффективность всей управленческой системы. Представлен комплексом нормативных актов, диктующих процесс создания информации. Сюда также относится его юридический статус, функционирование системы информации, получение, преобразование, передача и использование данных. Такое обеспечение преследует ключевую цель – обеспечение законности всех имеющихся процессов. Состоит из двух компонентов: локального (отвечающего за работу системы) и общего (указывает на принципы работы любой системы). Изучая основы IT, нужно понимать, как грамотно составлять проект информационной системы. Соответствующий процесс носит название разработки. Является крайне важным для релиза совершенно разных проектов – от элементарных программ до сложнейших бизнес-решений. Перед рассмотрением ключевых методологий разработки проектов и программных продуктов, нужно разобрать понятие жизненного цикла. Жизненный цикл – этапы, которые проходит проект от начала создания до окончания разработки и релиза. Он включает в себя: Названия могут меняться в зависимости от конкретного проекта. Жизненный цикл иногда дробится на более мелкие составляющие. Чаще всего жизненный цикл включает в себя: Эксплуатация и сопровождение – операции, которые проводятся одновременно. Предложенная структура – это основа жизненного цикла любого проекта. Носит название модели разработки. Методологии – наборы методов по управлению процессами создания ПО. Именно они являются проектированием. Принцип методологии проектирования информационной системы будет меняться в зависимости от заданного проекта. У методологий существуют несколько задач, решению которых они должны способствовать при проектировании: Внедрение методологии – главный фактор снижения сложности процесса создания проекта. Достигается за счет точного описания соответствующих процессов, а также благодаря применению современных методов и технологий на протяжении всего жизненного цикла продукта. Здесь разработка по формированию проекта проводится поэтапно – шаг за шагом. Каждый новый этап производится только по завершении предыдущего. Грамотное использование такой концепции позволяет сделать разработку программного обеспечения быстрым, понятным и эффективным. К ее преимуществам можно отнести: Недостатки: Формирование подробного и детализированного технического задания – залог успешной реализации методологии. Подход, который представлен усовершенствованной моделью «водопада». Тут заказчики вместе с программистами параллельно выдвигают требования к итоговому проекту, описывать и составлять его характеристики. Это происходит на каждом отдельно взятом этапе. Вариант, который минимизирует архитектурные ошибки. Но, если в процессе тестирования обнаруживаются ошибки, их исправление обходится дорого. Концепция подходит для моделей, где основополагающую роль играет надежность. Это – создание проекта или ИС «по частям». Чтобы лучше его понять, стоит изучить пример формирования соцсети: Концепция не требует на первоначальном этапе серьезных финансовых вложений. Они тоже производятся «по частям». Сначала оплачиваются ключевые функции системы, после – ее дополнительные возможности. А еще здесь налажена обратная связь и исправление ошибок не слишком дорогое. Но соответствующая методология влечет недопонимания в команде – там каждый занимается «своей» задачей. И согласовать идеи проекта бывает нелегко. Разработчики могут откладывать релиз, стараясь уделять много времени малозначимым элементам программы. Все эти минусы устраняются детализированным ТЗ. Здесь четкая цель проектирования информационной системы или проекта не определена. Заказчик имеет общую идею, первоначальную задумку. Реализация не имеет четкой детализации. Концепция идеально подходит для крупных проектов с неопределенными и размытыми требованиями. Здесь отсутствуют фиксированные сроки и бюджеты, зато можно быстро выпустить релиз с минимальным функционалом. А еще – добиться эффективности за счет пользовательского тестирования. Это методология оценки рисков. Соответствующему моменту уделяется огромное внимание. Создание проекта проводится итерационным методом. Каждая стадия будет опираться на предыдущую. Очередной «виток» завершается – команда принимает решение относительно дальнейшего развития продукта. Риски – это основополагающая концепции. Реализация приема дорогая и очень долгая. Хотите освоить современную IT-специальность? Огромный выбор курсов по востребованным IT-направлениям есть в Otus! © 2015-2022 OTUS Type above and press Enter to search. Press Esc to cancel. Про IT Полезное Лайфстайл Основные понятия Для чего требуются СтруктураТехническая ИСМатематическая и программная ИСИнформационное обеспечениеОрганизационные системыПравовое обеспечение Техническая ИС Математическая и программная ИС Информационное обеспечение Организационные системы Правовое обеспечение Жизненный цикл Методологии – что и какВодопадная модельV-образныйИнкрементный подходИтеративная методологияСпиральный подход Водопадная модель V-образный Инкрементный подход Итеративная методология Спиральный подход массивы данных; IT-услуги; базы данных; различные документы. Система – любые объекты, которые рассматриваются в качестве единого целого. Объекты сложного характера. Включают в себя разнородные компоненты, связанные друг с другом. Они образовывают единый объект. Подсистема – отдельный объект, включенный в состав системы. Состоит из иных элементов разного вида. Основной элемент функционирования ИС – устройство, обеспечивающее работу рассматриваемого компонента. В современной интерпретации выражен компьютером. Все чаще здесь встречается периферийное оборудование и серверы. обработку информации; сбор различных данных; хранение; поиск; выдачу (выведение) информации. техническими; математическими; информационными; программными; правовыми; организационными. Нормативно-справочный. Применяется для расчетов за технические обеспечение. Специализированный. Включает в себя описание методик по каждому этапу разработки технического обеспечения на предприятии. Общесистемный. Состоит из отраслевых и государственных стандартов. Применяется в отношении техники. инструменты моделирования (сюда также включен дизайн); типовые задачи; математическую статистику и программирование; теории массового обслуживания. Специальное ПО – совокупность программных средств, разработанных в процессе создания конкретной информационной системы. Включает в себя пакеты прикладных программ, созданные для имеющихся моделей работы реально существующего объекта. Общесистемное ПО. Представлен комплексом приложений, необходимых для типовых пользовательских действий. Дают возможность расширения стандартного набора функций ПК. С его помощью в пределах предприятия или устройства можно контролировать и управлять процессами, связанными с работой с данными. Техническую документацию на создание программных средств. Включает в себя описание целей, ТХ, а также математическо-экономическую модель. Сюда же включены контрольные примеры. кодирование; классификация данных; системы документации; схемы циркулирующий на предприятии потоков данных; методы проектирования БД. анализа имеющихся систем управления компанией, в которые нужно внедрить ИС; обнаружения задач в проекте, подлежащих автоматизации; подготовки будущих автоматизированных задач проекта к решению на ПК – составление ТЗ на проектирование системы, обоснование эффективности; подготовку; проектирование; поддержку; создание. Приобретение. Выражено действиями заказчика. Предпринятые манипуляции позволяют формировать требования и ограничения для обеспечения. Предусматривают заключение договора на обслуживание, анализ и аудит. Поставку. Мероприятия, проводимые специалистами. Позволяют анализировать требования клиентов, создавать проекты, подводить итоги исследований. Тут решаются вопросы, в которые включен дизайн и непосредственное программирование. Завершается процесс проверкой проекта и его поставкой. Разработку. Непосредственное программирование и создание дизайна. Эксплуатацию. Использование готового проекта заказчиками. Сопровождение. Это – поддержка пользователей. На этом этапе программисты исправляют обнаруженные в ходе эксплуатации ошибки и неполадки. обеспечивать создание корпоративных ИС согласно целям и задачам компании; гарантирование создание систем с заданным качеством в оговоренные сроки в рамках установленного бюджета каждого отдельно взятого проекта; поддерживать удобство сопровождения, обновления, увеличения проекта (итогового продукта); обеспечивать преемственность разработки. Простой контроль за разработкой. Заказчики всегда знают, что делают программисты. Отсутствие необходимости серьезных затрат на тестирование. Определение стоимости (итоговой) работ на первоначальном этапе. Такой результат достигается за счет согласования и поэтапного планирования. Тестирование организовывается на поздних этапах создание проекта. Итог удастся лицезреть только в самом конце проектирования. Для реализации нужно готовить огромное количество технической документации. Человек захотел создать социальную сеть и составил подробное ТЗ. Программисты предлагают реализацию собственного персонала. После этого – организовать тестирование на целевой аудитории. Проводится демонстрация итогового ПО с последующим релизом. Если работа устраивает, ведется ее продвижение. Параллельно создаются функциональные инструменты для обмена изображениями, аудио и документами. Подобные моменты согласовываются с заказчиком заблаговременно. Поиск по блогу


Search for: МеткиAndroid
C
C#
c++
computer science
devops
Docker
gamedev
HTML
iOS
IT
Java
JavaScript
Linux
Machine Learning
otus book
PHP
PostgreSQL
Python
qa
SQL
team lead
unity
Алгоритмы
Базы данных
Математика
архитектура ПО
базы данных
вебинар
дайджест
запись вебинара
запись урока
информационная безопасность
карьера в IT
подборка
подборка статей
программирование
проект
проектная работа
сети
структуры данных
тест
тестирование
управление командой
хабр YouTube LinkedIn VKontakte

Информа́тика (фр. informatique; англ. computer science) — наука о методах и процессах сбора, хранения, обработки, передачи, анализа и оценки информации с применением компьютерных технологий, обеспечивающих возможность её использования для принятия решений[1]. Информатика включает дисциплины, относящиеся к обработке информации в вычислительных машинах и вычислительных сетях: как абстрактные, вроде анализа алгоритмов, так и конкретные, например, разработка языков программирования и протоколов передачи данных. Темами исследований в информатике являются вопросы: что можно, а что нельзя реализовать в программах и базах данных (теория вычислимости и искусственный интеллект), каким образом можно решать специфические вычислительные и информационные задачи с максимальной эффективностью (теория сложности вычислений), в каком виде следует хранить и восстанавливать информацию специфического вида (структуры и базы данных), как программы и люди должны взаимодействовать друг с другом (пользовательский интерфейс и языки программирования и представление знаний) и т. п. Термин нем. Informatik ввёл немецкий специалист Карл Штейнбух в статье Informatik: Automatische Informationsverarbeitung (Информатика: Автоматическая обработка информации) 1957 года[2]. Термин «Computer science» («Компьютерная наука») появился в 1959 году в научном журнале Communications of the ACM[3], в котором Луи Фейн (Louis Fein) выступал за создание Graduate School in Computer Sciences (Высшей школы в области информатики) аналогичной Гарвардской бизнес-школе, созданной в 1921 году[4][уточнить]. Обосновывая такое название школы, Луи Фейн ссылался на Management science («Наука управления»), которая, так же как и информатика, имеет прикладной и междисциплинарный характер, при этом имеет признаки характерные для научной дисциплины. Усилия Луи Фейна, численного аналитика Джорджа Форсайта[англ.] и других увенчались успехом: университеты пошли на создание программ, связанных с информатикой, начиная с Университета Пердью в 1962-м[5]. Французский термин «informatique» введён в 1962 году Филиппом Дрейфусом, который также предложил перевод на ряд других европейских языков. Термины «информология» и «информатика» предложены в 1962 году членом-корреспондентом АН СССР Александром Харкевичем. Основы информатики как науки были изложены в книге «Основы научной информации» 1965 года, которая была переиздана в 1968 году, под названием «Основы информатики»[6]. Несмотря на своё англоязычное название (англ. Computer Science — компьютерная наука), большая часть научных направлений, связанных с информатикой, не включает изучение самих компьютеров. Вследствие этого были предложены несколько альтернативных названий[7]. Некоторые факультеты крупных университетов предпочитают термин вычислительная наука (computing science), чтобы подчеркнуть разницу между терминами. Датский учёный Питер Наур предложил термин даталогия (datalogy)[8], чтобы отразить тот факт, что научная дисциплина оперирует данными и занимается обработкой данных, хотя и не обязательно с применением компьютеров.
Первым научным учреждением, включившим в название этот термин, был Департамент Даталогии в Университете Копенгагена, основанный в 1969 году, где работал Питер Наур, ставший первым профессором в даталогии. Этот термин используется в основном в скандинавских странах. В остальной же Европе часто используются термины, производные от сокращённого перевода фраз «автоматическая информация» (англ. automatic information) (к примеру informazione automatica по-итальянски) и «информация и математика» (information and mathematics), например, informatique (Франция), Informatik (Германия), informatica (Италия, Нидерланды), informática (Испания, Португалия), informatika (в славянских языках) или pliroforiki (πληροφορική, что означает информатика) — в Греции. Подобные слова также были приняты в Великобритании, например, Школа информатики в Университете Эдинбурга[9]. В русском, английском, французском и немецком языках в 1960-х годах была тенденция к замене термина «документация» терминами, имеющими в своей основе слово «информация»[10]. В русском языке производной от термина «документация» стала документалистика и получили распространение термины научная и научно-техническая информация. Во Франции термин официально вошёл в употребление в 1966 году[11]. В немецком языке термин Informatik имел вначале двойственное значение. Так, в ФРГ[10] и Великобритании[1] он был в значении «computer science», то есть означал всё, что связано с применением ЭВМ, а в ГДР, как и в основном по Европе, обозначал науку по французской и русской модели. Считается, что под терминами «informatics» в европейских странах и «информатика» в русском языке понимается направление, именуемое в английском языке «computer science». К другому направлению, посвящённому изучению структуры и общих свойств объективной (научной) информации, иногда называемому документалистикой (документальной информатикой) или автоматическим анализом документов[1], близок термин «information science». Принято считать, что в английский язык термин «informatics» независимо от остальных ввёл Уолтер Ф. Бауэр, основатель «Informatics Inc.». В США в настоящее время термин англ. informatics связан с прикладными вычислениями или обработкой данных в контексте другой области[12], например в биоинформатике («bioinformatics») и геоинформатике («geoinformatics»). Во многих словарях informatics и computer science приравниваются к информатике. В тезаурусе ЮНЕСКО «Информатика — Informatics» даётся как синоним к переводу «Computer science — Компьютерные науки»[13]. Ряд учёных (специалистов в области информатики) утверждали, что в информатике существуют три отдельные парадигмы. Например, Питер Вегнер[англ.] выделял науку, технологию и математику[14]. Рабочая группа Питера Деннинга[англ.] утверждала, что это теория, абстракция (моделирование) и дизайн[15]. Амнон Х. Эден описывал эти парадигмы, как[16]: В разные периоды развития информатики в СССР и России в понятие «информатика» вкладывался различный смысл. Информатика — это[17]: Полагают[17], что одновременное существование всех трёх значений у слова «информатика» затрудняет и мешает развитию данного научного направления. Самые ранние основы того, что впоследствии станет информатикой, предшествуют изобретению современного цифрового компьютера. Машины для расчёта нескольких арифметических задач, такие как счёты, существовали с древности, помогая в таких вычислениях как умножение и деление. Блез Паскаль спроектировал и собрал первый рабочий механический калькулятор, известный как калькулятор Паскаля, в 1642[22]. В 1673 году Готфрид Лейбниц продемонстрировал механический калькулятор (арифмометр), названный «Stepped Reckoner»[23].
Его можно считать первым учёным в области компьютерных наук и специалистом в области теории информации, поскольку, среди прочего, он ещё описал двоичную (бинарную) систему чисел. В 1820 году Томас де Кольмар запустил промышленный выпуск механического калькулятора после того, как он создал свой упрощённый арифмометр, который был первой счётной машиной, достаточно прочной и надёжной для ежедневного использования. Чарльз Бэббидж начал проектирование первого автоматического механического калькулятора, его разностной машины, в 1822, что в конечном счёте подало ему идею первого программируемого механического калькулятора, его аналитической машины. Он начал работу над этой машиной в 1834 году и менее чем за два года были сформулированы многие из основных черт современного компьютера. Важнейшим шагом стало использование перфокарт, сработанных на Жаккардовском ткацком станке [24], что открывало бесконечные просторы для программирования [25]. В 1843 году во время перевода французской статьи на аналитической машине Ада Лавлейс написала в одной из её многочисленных записок алгоритм для вычисления чисел Бернулли, который считается первой компьютерной программой [26]. Около 1885 года Герман Холлерит изобрёл табулятор, который использовал перфокарты для обработки статистической информации; в конечном итоге его компания стала частью IBM. В 1937 году, спустя сто лет после несбыточной мечты Бэббиджа, Говард Эйкен убедил руководство IBM, производившей все виды оборудования для перфорированных карт[27] и вовлечённой в бизнес по созданию калькуляторов, разработать свой гигантский программируемый калькулятор ASCC/Harvard Mark I, основанный на аналитической машине Бэббиджа, которая, в свою очередь, использовала перфокарты и центральный вычислитель (central computing unit).
Про готовую машину поговаривали: «мечта Бэббиджа сбылась»[28]. В 1940-х с появлением новых и более мощных вычислительных машин термин компьютер стал обозначать эти машины, а не людей, занимающихся вычислениями (теперь слово «computer» в этом значении употребляется редко)[29]. Когда стало ясно, что компьютеры можно использовать не только для математических расчётов, область исследований информатики расширилась с тем, чтобы изучать вычисления в целом. Информатика получила статус самостоятельной научной дисциплины в 1950-х и начале 1960-х годов[30] [31]. Первая в мире степень по информатике, Диплом Кэмбриджа по информатике, была присвоена в компьютерной лаборатории Кембриджского университета в 1953 году. Первая подобная учебная программа в США появилась в Университете Пердью в 1962 году[32]. С распространением компьютеров возникло много новых самодостаточных научных направлений, основанных на вычислениях с помощью компьютеров. Мало кто изначально мог предположить, что сами компьютеры станут предметом научных исследований, но в конце 1950-х годов это мнение распространилось среди большинства учёных [33]. Ныне известный бренд IBM в то время был одним из участников революции в информатике. IBM (сокращение от International Business Machines) выпустила компьютеры IBM 704[34] и позже — IBM 709[35], которые уже широко использовались одновременно с изучением и апробацией этих устройств. «Тем не менее работа с (компьютером) IBM была полна разочарований… при ошибке в одной букве одной инструкции программа „падала“ и приходилось начинать всё сначала»[33]. В конце 1950-х годов информатика как дисциплина ещё только становилась[36], и такие проблемы были обычным явлением. Со временем был достигнут значительный прогресс в удобстве использования и эффективности вычислительной техники. В современном обществе наблюдается явный переход среди пользователей компьютерной техники: от её использования только экспертами и специалистами к использованию всеми и каждым. Изначально компьютеры были весьма дорогостоящими и чтобы их эффективно использовать нужна была помощь специалистов. Когда компьютеры стали более распространёнными и доступными, тогда для решения обычных задач стало требоваться меньше помощи специалистов. В 1985 году в СССР был создан НИИ информатики и вычислительной техники[37]. В том же 1985 году в школах была введена учебная дисциплина «Информатика» и издан первый учебник — «Основы информатики и вычислительной техники» А. П. Ершова[38]. 4 декабря отмечается День российской информатики, так как в этот день в 1948 году Государственный комитет Совета министров СССР по внедрению передовой техники в народное хозяйство зарегистрировал за номером 10 475 изобретение И. С. Брука и Б. И. Рамеева — цифровую электронную вычислительную машину M-1[39]. Несмотря на короткую историю в качестве официальной научной дисциплины, информатика внесла фундаментальный вклад в науку и общество. По сути, информатика, наряду с электроникой, является одной из основополагающих наук текущей эпохи человеческой истории, называемой информационной эпохой. При этом информатика является предводителем информационной революции и третьим крупным шагом в развитии технологий, после промышленной революции (1750—1850 н. э.) и неолитической революции (8000-5000 до н. э.). Вклад информатики: Информатика делится на ряд разделов. Как дисциплина, информатика охватывает широкий круг тем от теоретических исследований алгоритмов и пределов вычислений до практической реализации вычислительных систем в области аппаратного и программного обеспечения[45][46]. Комитет CSAB[англ.], ранее называемый «Советом по аккредитации вычислительных наук», включающий представителей Ассоциации вычислительной техники (ACM) и Компьютерного общества IEEE (IEEE-CS)[47] — определил четыре области, важнейшие для дисциплины информатика: теория вычислений, алгоритмы и структуры данных, методология программирования и языков, компьютерные элементы и архитектура. В дополнение к этим четырём направлениям, комитет CSAB определяет следующие важные области информатики: разработка программного обеспечения, искусственный интеллект, компьютерные сети и телекоммуникации, системы управления базами данных, параллельные вычисления, распределённые вычисления, взаимодействия между человеком и компьютером, компьютерная графика, операционные системы, числовые и символьные вычисления[45]. Огромное поле исследований теоретической информатики включает как классическую теорию алгоритмов, так и широкий спектр тем, связанных с более абстрактными логическими и математическими аспектами вычислений.
Теоретическая информатика занимается теориями формальных языков, автоматов, алгоритмов, вычислимости и вычислительной сложности, а также вычислительной теорией графов, криптологией, логикой (включая логику высказываний и логику предикатов), формальной семантикой и закладывает теоретические основы для разработки компиляторов языков программирования. По словам Питера Деннинга[англ.], к фундаментальным вопросам информатики относится следующий вопрос: «Что может быть эффективно автоматизировано?»[30] Изучение теории алгоритмов сфокусировано на поиске ответов на фундаментальные вопросы о том, что можно вычислить и какое количество ресурсов необходимо для этих вычислений. Для ответа на первый вопрос в теории вычислимости рассматриваются вычислительные задачи, решаемые на различных теоретических моделях вычислений. Второй вопрос посвящён теории вычислительной сложности; в этой теории анализируются затраты времени и памяти различных алгоритмов при решении множества вычислительных задач. Знаменитая задача «P=NP?», одна из Задач тысячелетия[48], является нерешённой задачей в теории алгоритмов. Теория информации связана с количественной оценкой информации. Это направление получило развитие благодаря трудам Клода Э. Шеннона, который нашёл фундаментальные ограничения на обработку сигнала в таких операциях, как сжатие данных, надёжное сохранение и передача данных[49]. Теория кодирования изучает свойства кодов (системы для преобразования информации из одной формы в другую) и их пригодность для конкретной задачи. Коды используются для сжатия данных, в криптографии, для обнаружения и коррекции ошибок, а в последнее время также и для сетевого кодирования. Коды изучаются с целью разработки эффективных и надёжных методов передачи данных. Алгоритмы и структуры данных, как раздел информатики, связаны с изучением наиболее часто используемых вычислительных методов и оценкой их вычислительной эффективности. В теории языков программирования, как подразделе информатики, изучают проектирование, реализацию, анализ и классификацию языков программирования в целом, а также изучают отдельные элементы языков. Эта область информатики, с одной стороны, в большой степени полагается на достижения таких наук как математика, программная инженерия и лингвистика, с другой стороны, сама оказывает большое влияние на их развитие. Теория языков программирования активно развивается, многие научные журналы посвящены этому направлению. Формальные методы — это своего рода математический подход, предназначенный для спецификации, разработки и верификации программных и аппаратных систем. Использование формальных методов при разработке программного и аппаратного обеспечения мотивировано расчётом на то, что, как и в других инженерных дисциплинах, надлежащий математический анализ обеспечит надёжность и устойчивость проекта. Формальные методы являются важной теоретической основой при разработке программного обеспечения, особенно в случаях, когда дело касается надёжности или безопасности. Формальные методы являются полезным дополнением к тестированию программного обеспечения, так как они помогают избежать ошибок, а также являются основой для тестирования. Для их широкого использования требуется разработка специального инструментария. Однако высокая стоимость использования формальных методов указывает на то, что они, как правило, используются только при разработке высокоинтегрированных и жизненно-важных систем[англ.], где надёжность и безопасность имеют первостепенное значение. Формальные методы имеют довольно широкое применение: от теоретических основ информатики (в частности, логики вычислений, формальных языков, теории автоматов, программ и семантики) до систем типов и проблем алгебраических типов данных в задачах спецификации и верификации программного и аппаратного обеспечения. Прикладная информатика направлена на применение понятий и результатов теоретической информатики к решению конкретных задач в конкретных прикладных областях. Это область информатики, неразрывно связанная с такими целеполагающими процессами, как решение задач, принятие решений, адаптация к окружающим условиям, обучение и коммуникация, присущими и людям, и животным. Возникновение искусственного интеллекта (ИИ) связано с кибернетикой и ведёт свой отсчёт с Дартмутской Конференции (1956). Исследования в области искусственного интеллекта (AI) с необходимостью были междисциплинарными, и основывались на таких науках, как: прикладная математика, математическая логика, семиотика, электротехника, философия сознания, нейрофизиология и социальный интеллект. У обывателей искусственный интеллект ассоциируется в первую очередь с робототехникой, но кроме этого ИИ является неотъемлемой частью разработки программного обеспечения в самых разных областях. Отправной точкой в конце 1940-х годов стал вопрос Алана Тьюринга: «Могут ли компьютеры думать?», и этот вопрос остаётся фактически без ответа, хотя «тест Тьюринга» до сих пор используется для оценки результатов работы компьютера в масштабах человеческого интеллекта. Архитектура компьютера, или организация цифрового компьютера, является концептуальной структурой компьютерной системы. Она сосредоточена в основном на способе, при котором центральный процессор выполняет внутренние операции и обращается к адресам в памяти[50]. Она часто включает в себя дисциплины вычислительной техники и электротехники, выбор и соединение аппаратных компонентов для создания компьютеров, которые удовлетворяют функциональным, производительным и финансовым целям. Компьютерная инженерия связана с аппаратной частью вычислительной техники, например основами микропроцессорной техники, компьютерных архитектур и распределённых систем. Таким образом, она обеспечивает связь с электротехникой. Анализ производительности компьютера — это изучение работы компьютеров с целью повышения пропускной способности, управления временем отклика, эффективного использования ресурсов, устранения узких мест и прогнозирования производительности при предполагаемых пиковых нагрузках[51]. Компьютерная графика представляет собой изучение цифрового визуального содержания и включает в себя синтез и манипуляцию данными изображения. Это направление связано со многими другими областями информатики, в том числе с компьютерным зрением, обработкой изображений и вычислительной геометрией, также оно активно применяется в области спецэффектов и видео-игр. Компьютерная безопасность — это направление исследований компьютерных технологий, нацеленных на защиту информации от несанкционированного доступа, разрушения или модификацию при сохранении доступности и удобства использования системы для предполагаемых пользователей. Криптография же является наукой о шифровании и дешифровании информации. Современная криптография в значительной степени связана с информатикой, поскольку при разработке и использовании многих алгоритмов шифрования и дешифрования учитывается их вычислительная сложность. Компьютерное моделирование и численные методы являются областями исследований в задаче построения математических моделей, методов количественного анализа, использования компьютеров для анализа и решения научных проблем. На практике, это, как правило, применение компьютерного моделирования и других форм вычислений, применяемых в задачах различных научных дисциплин. Ещё одним важным направлением является связь между машинами. Она обеспечивает электронный обмен данными между компьютерами и, следовательно, представляет собой техническую базу для Интернета. Помимо разработки маршрутизаторов, коммутаторов и межсетевых экранов, к этой дисциплине относятся разработка и стандартизация сетевых протоколов, таких как TCP, HTTP или SOAP, для обмена данными между машинами. Параллелизм — это свойство систем, при котором несколько вычислений выполняются одновременно, и при этом, возможно, взаимодействуют друг с другом. Был разработан ряд математических моделей для общего вида параллельных вычислений, в том числе сети Петри, процессы исчисления и модель Parallel Random Access Machine[англ.] (машины с параллельным произвольным доступом). Распределённая система расширяет идею параллелизма на несколько компьютеров, связанных посредством сети. Компьютеры в пределах одной распределённой системы имеют свою собственную память и часто обмениваются информацией между собой для достижения общей цели. База данных — организованная в соответствии с определёнными правилами и поддерживаемая в памяти компьютера совокупность данных, характеризующая актуальное состояние некоторой предметной области и используемая для удовлетворения информационных потребностей пользователей. Управление базами данных происходит с помощью систем управления базами данных (СУБД). Информатика здравоохранения[англ.] рассматривает вычислительные методы для решения задач в сфере здравоохранения[источник не указан 3359 дней]. Информационная наука — это междисциплинарная область, связанная с анализом, сбором, классификацией, манипулированием, хранением, поиском, распространением и защитой информации[уточнить]. Программная инженерия — это приложение систематического, дисциплинированного, измеримого подхода к разработке, функционированию и сопровождению программного обеспечения, а также исследованию этих подходов; то есть, приложение дисциплины инженерии к программному обеспечению Естественная информатика — это естественнонаучное направление, изучающее процессы обработки информации в природе, мозге и человеческом обществе[уточнить]. Она опирается на такие классические научные направления, как теории эволюции, морфогенеза и биологии развития, системные исследования, исследования мозга, ДНК, иммунной системы и клеточных мембран, теория менеджмента и группового поведения, история и другие[52][53]. Кибернетика, определяемая, как «наука об общих закономерностях процессов управления и передачи информации в различных системах, будь то машины, живые организмы или общество»[54] представляет собой близкое, но несколько иное научное направление. Так же, как математика и основная часть современной информатики, оно вряд ли может быть отнесено к области естественных наук, так как резко отличается от них своей методологией, (несмотря на широчайшее применение в современных естественных науках математического и компьютерного моделирования). Конференции являются стратегическими событиями научных исследований в области информатики. В ходе этих конференций исследователи из бюджетного и частного секторов встречаются и представляют свои последние работы. Труды этих конференций являются важной частью литературы по информатике. В некоторых университетах информатика преподаётся в качестве теоретического изучения вычислений и автоматического вывода. Такие программы часто включают в себя теорию алгоритмов, анализ алгоритмов, формальные методы, параллелизм в информатике, базы данных, компьютерную графику, системный анализ и другие. Как правило, в такие учебные программы включают преподавание программирования, но не акцентируют на нём внимания, как финальной цели обучения, а рассматривают программирование как необходимый элемент изучения всех прочих областей информатики. Организация Ассоциация вычислительной техники (ACM) разрабатывает рекомендации для университетских учебных программ по информатике[55]. Другие колледжи и вузы, а также средние школы и учебные заведения профессиональной подготовки, которые обучают информатике, делают в своих учебных курсах акцент на практике программирования, а не на теории алгоритмов и вычислений. Такие учебные программы, как правило, сосредоточены на тех практических навыках, которые важны для работников индустрии программной инженерии. В последние годы интерес к использованию методов информатики в различных сферах научных исследований и практических разработок возрастает. Такого рода интерес проявляют не только учёные, но и правительственные структуры. К примеру, в 2005 году Консультативный комитет по информационным технологиям при Президенте США подготовил доклад на эту тему. В этом докладе были представлены результаты анализа деятельности в данной области в США, сообщающие о необходимости скорых решительных действий с целью предупреждения негативных тенденций, наблюдаемых в американской науке и системе образования[56]. Экономика США всё в большей степени полагается на специалистов в области информатики, но подготовка кадров в этой области отсутствует в большинстве американских учебных программ. Отчёт, озаглавленный «Running on Empty: The Failure to Teach K-12 Computer Science in the Digital Age» был представлен в октябре 2010 года организацией АСМ и Ассоциацией Учителей Информатики (CSTA) и показал, что только 14 штатов приняли образовательные стандарты по информатике в высшем образовании. Также в докладе отмечается, что только в 9 штатах предмет «Информатика» является базовым (обязательным) учебным предметом, необходимым для аттестации в старших классах школы. В союзе с «Running on Empty» новая внепартийная коалиция защиты прав — Computing in the Core (CinC) — была создана, чтобы влиять на федеральную и государственную политику. В результате работы коалиции был принят «Закон об образовании в области информатики» («Computer Science Education Act»), обеспечивающий дотациями те штаты, которые ведут работу по повышению качества образования в области информатики и поддержке учителей информатики.  Именно в нашей[уточнить] стране впервые были сформированы представления об информатике как о фундаментальной науке, имеющей важное междисциплинарное, научно-методологическое и мировоззренческое значение. Именно Россия на 2-м Международном конгрессе ЮНЕСКО «Образование и информатика» (Москва, 1996 г.) предложила новую концепцию изучения проблем информатики как фундаментальной науки и общеобразовательной дисциплины в системе опережающего образования. При этом была предложена также и новая структура образовательной области «Информатика» для системы образования и показано, что переход к этой структуре может стать важным шагом на пути интеграции фундаментальной науки и образования[56]. Начиная с 1990 года, в России развивается такое направление как социальная информатика. Предполагается, что оно станет научной базой для формирования информационного общества.
Помимо этого, в Российской академии наук вырабатываются философские, семиотические и лингвистические основы информатики, формируются новые подходы к структуризации предметной области информатики, учитывающие её перспективные направления развития и современные тенденции развития образования и науки[56]. 1 Этимология и значение слова

1.1 Эквиваленты в английском языке
1.2 Полисемия
1.3 Полисемия в русском языке 1.1 Эквиваленты в английском языке 1.2 Полисемия 1.3 Полисемия в русском языке 2 История

2.1 История информатики в СССР
2.2 Основные достижения 2.1 История информатики в СССР 2.2 Основные достижения 3 Структура информатики

3.1 Теоретическая информатика

3.1.1 Теория алгоритмов
3.1.2 Информация и теория кодирования
3.1.3 Алгоритмы и структуры данных
3.1.4 Теория языков программирования
3.1.5 Формальные методы


3.2 Прикладная информатика

3.2.1 Искусственный интеллект
3.2.2 Архитектура компьютера и компьютерная инженерия
3.2.3 Анализ производительности компьютера
3.2.4 Компьютерная графика и визуализация
3.2.5 Компьютерная безопасность и криптография
3.2.6 Компьютерное моделирование и численные методы
3.2.7 Компьютерные сети
3.2.8 Параллельные и распределённые системы
3.2.9 Базы данных
3.2.10 Информатика в здравоохранении
3.2.11 Информационная наука
3.2.12 Программная инженерия


3.3 Естественная информатика 3.1 Теоретическая информатика

3.1.1 Теория алгоритмов
3.1.2 Информация и теория кодирования
3.1.3 Алгоритмы и структуры данных
3.1.4 Теория языков программирования
3.1.5 Формальные методы 3.1.1 Теория алгоритмов 3.1.2 Информация и теория кодирования 3.1.3 Алгоритмы и структуры данных 3.1.4 Теория языков программирования 3.1.5 Формальные методы 3.2 Прикладная информатика

3.2.1 Искусственный интеллект
3.2.2 Архитектура компьютера и компьютерная инженерия
3.2.3 Анализ производительности компьютера
3.2.4 Компьютерная графика и визуализация
3.2.5 Компьютерная безопасность и криптография
3.2.6 Компьютерное моделирование и численные методы
3.2.7 Компьютерные сети
3.2.8 Параллельные и распределённые системы
3.2.9 Базы данных
3.2.10 Информатика в здравоохранении
3.2.11 Информационная наука
3.2.12 Программная инженерия 3.2.1 Искусственный интеллект 3.2.2 Архитектура компьютера и компьютерная инженерия 3.2.3 Анализ производительности компьютера 3.2.4 Компьютерная графика и визуализация 3.2.5 Компьютерная безопасность и криптография 3.2.6 Компьютерное моделирование и численные методы 3.2.7 Компьютерные сети 3.2.8 Параллельные и распределённые системы 3.2.9 Базы данных 3.2.10 Информатика в здравоохранении 3.2.11 Информационная наука 3.2.12 Программная инженерия 3.3 Естественная информатика 4 В научном сообществе

4.1 Конференции
4.2 Журналы 4.1 Конференции 4.2 Журналы 5 В образовании

5.1 Образование в США
5.2 Образование в России 5.1 Образование в США 5.2 Образование в России 6 Основные термины 7 См. также 8 Примечания 9 Литература 10 Ссылки рационалистическую парадигму, где информатика — это раздел математики, математика доминирует в теоретической информатике и в основном использует логический вывод, технократическую парадигму, используемую в инженерных подходах, наиболее важных в программной инженерии, и научную парадигму, где информатика — это ветвь естественных (эмпирических) наук, но информатика отличается тем, что в ней эксперименты проводятся над искусственными объектами (программами и компьютерами). Теория научно-информационной деятельности. В рамках библиотечного дела под термином «научно-информационная деятельность» понимается «практическая работа по сбору, аналитико-синтетической переработке, хранению, поиску и предоставлению учёным и специалистам закрепленной в документах научной информации»[18]. В 1952 г. в Москве был создан Институт научной информации Академии наук (переименованный позднее в ВИНИТИ). Цели его создания были более широкими, чем выполнение «научно-информационной деятельности» и А. А. Харкевич (директор Института проблем передачи информации АН СССР) предложил в письме А. И. Михайлову (директору ВИНИТИ) новое название: «„информология“ или „информатика“ („информация“ плюс „автоматика“)» [19]. Третье издание «Большой советской энциклопедии» (1970-е гг.) фиксирует значение информатики как дисциплины, изучающей «структуру и общие свойства научной информации, а также закономерности её создания, преобразования, передачи и использования в различных сферах человеческой деятельности»[19]. Наука о вычислительных машинах и их применении (вычислительная техника и программирование). В 1976 г. профессора́ Мюнхенского технического университета Ф. Л. Бауэр и Г. Гооз написали книгу «Информатика. Вводный курс», переведённую в том же году В. К. Сабельфельдом, учеником известного советского учёного Андрея Петровича Ершова, на русский язык. Они перевели «Informatik» словом «информатика» и определили как «науку, занимающуюся разработкой теории программирования и применения ЭВМ»[19]. Термин «Informatik» Ф. Л. Бауэр и Г. Гооз объясняют как «немецкое название для computer science — области знания, которая сложилась в самостоятельную научную дисциплину в шестидесятые годы, прежде всего в США, а также в Великобритании. … В английском языке, по-видимому, останется „computer science“ (вычислительная наука), причем этот термин имеет уклон в область теории»[20]. Фундаментальная наука об информационных процессах в природе, обществе и технических системах. В начале 1990-х гг. К. К. Колин (заместитель директора Института проблем информатики АН СССР) синтезировал толкования информатики, данные академиками А. П. Ершовым и Б. Н. Наумовым, а также проф. Ю. И. Шемакиным следующим образом: информатика — это наука «о свойствах, законах, методах и средствах формирования, преобразования и распространения информации в природе и обществе, в том числе при помощи технических систем». Предметная область информатики, по Колину, включает такие разделы: (1) теоретическая информатика; (2) техническая информатика; (3) социальная информатика, (4) биологическая информатика и (5) физическая информатика[21]. Начало «цифровой революции», включающей информационную эпоху и интернет. Дано формальное определение вычислений и вычислимости, и доказательство того, что существуют алгоритмически неразрешимые задачи[41]. Введено понятие языка программирования, то есть средства для точного выражения методологической информации на различных уровнях абстракции[42]. Развитие криптографии и криптоанализа. Вычислительные методы обеспечили возможность практической оценки процессов и ситуаций большой сложности, а также возможность проведения экспериментов исключительно за счёт программного обеспечения. Появилась возможность углубленного изучения разума и картирования генома человека, благодаря проекту «Геном человека». Проекты распределенных вычислений, такие как Folding@Home, исследуют сворачивание молекул белка. Алгоритмическая торговля повысила эффективность и ликвидность финансовых рынков с помощью искусственного интеллекта, машинного обучения и других статистических и численных методов на больших диапазонах данных [43]. Частое использование алгоритмической торговли может усугубить волатильность[44]. Компьютерная графика и CGI повсеместно используются в современных развлечениях, особенно в области телевидения, кино, рекламы, анимации и видео-игр. Даже фильмы, в которых нет (явного) использования CGI, как правило, сняты на цифровые камеры и впоследствии обработаны или отредактированы в программах обработки видео. Моделирование различных процессов, например в гидродинамике, физике, электрике, электронных системах и цепях, а также для моделирования общества и социальных ситуаций (в частности, военных игр), учитывая среду обитания и др. Современные компьютеры позволяют оптимизировать, например, такие конструкции, как проект целого самолёта. Известным программным обеспечением является симулятор электронных схем SPICE, а также программное обеспечение для физической реализации новых (или модифицированных) конструкций, включающее разработку интегральных схем. Искусственный интеллект приобретает все большее значение, одновременно с этим становясь более сложным и эффективным. Существует множество применений искусственного интеллекта (ИИ), например роботы-пылесосы, которые можно использовать дома. ИИ также присутствует в видеоиграх, роботах огневой поддержки и противоракетных системах. Информационный ресурс — концентрация имеющихся фактов, документов, данных и знаний, отражающих реальное изменяющееся во времени состояние общества, и используемых при подготовке кадров, в научных исследованиях и материальном производстве[57]. Информационная среда — хранящаяся в компьютере, но не оформленная в виде информационной системы совокупность знаний, фактов и сведений, относящаяся к некоторой предметной области и используемая одним или несколькими пользователями[58]. Информационная технология — совокупность методов, устройств и производственных процессов, используемых людьми для сбора, хранения, обработки и распространения информации[58]. Хемоинформатика ↑ 1 2 3 Большая российская энциклопедия, 2008. ↑ Steinbuch K.,Informatik: Automatische Informationsverarbeitung, 1957. ↑ Fein, 1959. ↑ "Stanford University Oral History". ↑ Donald Knuth, George Forsythe and the Development of Computer Science, 1972. ↑ Основы информатики, 1968. ↑ Matti Tedre, The Development of Computer Science: A Sociocultural Perspective, 2006. ↑ Naur, 1966. ↑ P. Mounier-Kuhn, "L’Informatique en France, de la seconde guerre mondiale au Plan Calcul. L’émergence d’une science", 2010. ↑ 1 2 Научные коммуникации и информатика, 1976. ↑ Lhermitte P., Le pari informatique, 1968, Термин «Informatique», созданный во Франции и постепенно принятый в международном масштабе, был признан Французской Академией в качестве нового слова нашего языка в апреле 1966 г.. ↑ Why an informatics degree? Isn’t computer science enough?, 2010. ↑ Тезаурус ЮНЕСКО. ↑ P. Wegner, (October 13–15, 1976). Research paradigms in computer science. ↑ Comer et al., 1989. ↑ Eden, A. H., 2007. ↑ 1 2 Черный, 2010. ↑ Черный, 2010, с. 98. ↑ 1 2 3 Черный, 2010, с. 99. ↑ Черный, 2010, с. 100. ↑ Черный, 2010, с. 101. ↑ "Blaise Pascal". School of Mathematics and Statistics University of St Andrews, Scotland. ↑ A Brief History of Computing. ↑ Anthony Hyman, 1982. ↑ Bruce Collier, 1970. ↑ A Selection and Adaptation From Ada's Notes found in "Ada, The Enchantress of Numbers". ↑ Bernard Cohen, 1999: «In this sense Aiken needed IBM, whose technology included the use of punched cards, the accumulation of numerical data, and the transfer of numerical data from one register to another». ↑ Brian Randell, 1973. ↑ Ассоциация вычислительной техники была основана в 1947. ↑ 1 2 Denning, P.J. (2000). "Computer Science: The Discipline" (PDF). Encyclopedia of Computer Science. ↑ Some EDSAC statistics. ↑ Brian Zink, 2002. ↑ 1 2 Levy, 1984. ↑ IBM 704 Electronic Data Processing System - CHM Revolution. ↑ http://archive.computerhistory.org/resources/text/IBM/IBM. ↑ Информатика // Казахстан. Национальная энциклопедия (рус.). — Алматы: Қазақ энциклопедиясы, 2005. — Т. II. — ISBN 9965-9746-3-2. (CC BY-SA 3.0) ↑ В соавторстве с Шекспиром (основы ЭВМ: школьная практика) // «Учительская газета» от 25 ноября 1986 ↑ Ершов А. П., 1985. ↑ Анастасия Ибрагимова. 4 декабря — День российской информатики  (рус.). «Научная Россия» - электронное периодическое издание (4 декабря 2022). Дата обращения: 14 июня 2023. Архивировано 25 января 2022 года. ↑ David Kahn, The Codebreakers, 1967. ↑ Computer Science: Achievements and Challenges circa 2000, 2000. ↑ Abelson H., Structure and Interpretation of Computer Programs, 1996. ↑ Black box traders are on the march. ↑ The Impact of High Frequency Trading on an Electronic Market. ↑ 1 2 Computing Sciences Accreditation Board (28 May 1997). "Computer Science as a Profession". ↑ Committee on the Fundamentals of Computer Science, 2004. ↑ "Csab, Inc". Csab.org. 2011-08-03. ↑ P vs NP Problem. ↑ P. Collins, Graham. "Claude E. Shannon: Founder of Information Theory". Scientific American, Inc.. ↑ A. Thisted, Ronald. "COMPUTER ARCHITECTURE". The University of Chicago. ↑ Wescott, Bob, 2013. ↑ Hofkirchner W., "Information Science": An Idea Whose Time Has Come, 1995. ↑ Вайсбанд И., 5000 лет информатики, 2010. ↑ Wiener N., Cybernetics or Control and Communication in the Animal and the Machine, 1948. ↑ "ACM Curricula Recommendations". ↑ 1 2 3 Колин, 2006. ↑ Информационные технологии: Учеб. для вузов, 2003. ↑ 1 2 Толковый словарь современной компьютерной лексики, 2004. Вайсбанд Игорь. 5000 лет информатики. — М.: «Черная белка», 2010. — 352 с. — 2000 экз. — ISBN 978-5-91827-005-9. Волкова В. Н., Чёрный Ю. Ю. К 50-летию появления термина «информатика» в отечественной научной литературе // Прикладная информатика, № 4 (46), 2013 Глушков В. М. Безбумажная информатика. — М.: Наука, 1978. Грошев А. С. Информатика. Учебник для вузов. — Архангельск: Арханг. гос. техн. ун-т, 2010. — 470 с. — ISBN 978-5-261-00480-6. Архивная копия от 11 августа 2011 на Wayback Machine Дорот В. Л., Новиков Ф. А. Толковый словарь современной компьютерной лексики. — СПб.: БХВ-Петербург, 2004. — ISBN 5-94157-491-6. Ершов А. П., Монахов В. М., Бешенков С. А. Основы информатики и вычислительной техники. — 1985. Информатика // Большая российская энциклопедия / Кравец С. Л.. — М.: ОАО «Научное издательство «Большая Российская Энциклопедия», 2008. — Т. 11. Изучение плазмы - Исламский фронт спасения. — С. 481—484. — 767 с. — 65 000 экз. — ISBN 978-5-85270-342-2. Колин К. К. Становление информатики как фундаментальной науки и комплексной научной проблемы. — 2006. — С. 1. Михайлов А. И., Черный А. И., Гиляревский Р. С. Информатика // Научные коммуникации и информатика. — М.: Наука, 1976. — С. 392—416. — 433 с. — 10 400 экз. Михайлов А. И., Черный А. И., Гиляревский Р. С. Основы информатики. — 2-е изд., перераб. и доп. — М.: Наука, 1968. Аладьев В.З., Хунт Ю.Я., Шишаков М. Л. Основы информатики: Учебное пособие. — 2-е изд., перераб. и доп. — М.: Издат. дом «Филин», 1999. — 544 с. — ISBN 5-89568-131-X. Разборов А.А. Theoretical Computer Science: взгляд математика // Компьютерра. — 2001. — № 2. (недоступная ссылка) (альтернативная ссылка) Советов Б.Я., Цехановский В.В. Информационные технологии: Учеб. для вузов. — М.: Высш. шк., 2003. — 263 с. Черный Ю. Ю. Полисемия в науке: когда она вредна?(на примере информатики) // Открытое образование : журнал. — 2010. — № 6. — С. 97—107. Abelson H., G.J. Sussman with J. Sussman. Structure and Interpretation of Computer Programs. — 2nd. — MIT Press, 1996. — ISBN 0-262-01153-0. Brookshear, J. Glenn. Введение в компьютерные науки = Computer Science: An Overview. — 6-е изд. — М.: Вильямс, 2001. — 688 с. — ISBN 5-8459-0179-0. Cohen, Bernard. Howard Aiken: Portrait of a Computer Pioneer (History of Computing). — 1999. — ISBN 0-262-03262-7. Collier, Bruce. The little engine that could've: The calculating machines of Charles Babbage (англ.). — Garland Publishing Inc[англ.], 1970. — ISBN 0-8240-0043-9. Committee on the Fundamentals of Computer Science: Challenges and Opportunities, National Research Council. Computer Science: Reflections on the Field, Reflections from the Field (англ.). — National Academies Press[англ.], 2004. — ISBN 978-0-309-09301-9. D. E. Comer, David Gries, Michael C. Mulder, Allen Tucker, A. Joe Turner, Paul R. Young. Computing as a discipline (англ.) // Communications of the ACM. — 1989. — Vol. 32, no. 1. — P. 9—23. — doi:10.1145/63238.63239. Constable, R.L. Computer Science: Achievements and Challenges circa 2000 (англ.). — 2000. Архивировано 13 июня 2024 года. Dennis P. Groth, Jeffrey K. MacKie-Mason. Why an informatics degree? Isn’t computer science enough? (англ.) // Communications of the ACM : Magazine. — New York, USA, 2010. — Vol. 53. — P. 26—28. — doi:10.1145/1646353.1646364. Архивировано 28 марта 2013 года. Eden, A. H. Three Paradigms of Computer Science (англ.) // Minds and Machines[англ.] : journal. — 2007. — July (vol. 17, no. 2). — P. 16—17. — doi:10.1007/s11023-007-9060-8. Fein, Louis. The Role of the University in Computers, Data Processing, and Related Fields (англ.) // Communications of the ACM : journal. — 1959. — Vol. 2, no. 9. — P. 7—14. — doi:10.1145/368424.368427. Fourman, Michael. "informatics" (англ.) // International Encyclopedia of Information and Library Science. — 2002. — P. 237—244. Hofkirchner, Wolfgang. "Information Science": An Idea Whose Time Has Come (англ.) // Informatik Forum. — 1995. — No. 3. — P. 99—106. Hyman, Anthony. Charles Babbage, pioneer of the computer (англ.). — Oxford University Press, 1982. — 287 p. — ISBN 9780691083032. Kahn, David. The Codebreakers. — 1967. — ISBN 0-684-83130-9. Knuth, Donald. George Forsythe and the Development of Computer Science (англ.). — 1972. Levy, Steven[англ.]. Hackers: Heroes of the Computer Revolution (неопр.). — Doubleday, 1984. — ISBN 0-385-19195-2. Lhermitte P. Le pari informatique. — Paris, 1968. — С. 20. Mounier-Kuhn, P. гл. 3 и 4 // L’Informatique en France, de la seconde guerre mondiale au Plan Calcul. L’émergence d’une science. — Paris, 2010. Naur, Peter. The science of datalogy (англ.) // Communications of the ACM : journal. — 1966. — Vol. 9, no. 7. — P. 485. — doi:10.1145/365719.366510. Randell, Brian. The Origins of Digital Computers: Selected Papers. — 1973. — ISBN 0-387-11319-3. Steinbuch, K. Informatik: Automatische Informationsverarbeitung (неопр.) // SEG-Nachrichten (Technische Mitteilungen der Standard Elektrik Gruppe) – Firmenzeitschrift. — 1957. Streubel, Jennifer. Department of Computer Science (англ.). — 2003. Tedre, Matti. The Development of Computer Science: A Sociocultural Perspective. — Joensuu, 2006. — С. 260. Wescott, Bob. The Every Computer Performance Book, Chapter 3: Useful laws (англ.). — CreateSpace[англ.], 2013. — ISBN 1482657759. Wiener, Norbert. Cybernetics or Control and Communication in the Animal and the Machine. — New York: MIT Press, 1948. — 212 с. Zink, Brian. Computer science pioneer Samuel D. Conte dies at 85 (англ.) // Purdue University. — 2002. Значения в Викисловаре Медиафайлы на Викискладе A Brief History of Computing (англ.). ACM Curricula Recommendations (англ.). A Selection and Adaptation From Ada's Notes found in "Ada, The Enchantress of Numbers," by Betty Alexandra Toole Ed.D. Strawberry Press, Mill Valley, CA (англ.). Архивировано 10 февраля 2006 года. "Black box traders are on the march" (англ.). The Telegraph. 2006-08-27. Дата обращения: 22 октября 2014. Blaise Pascal (англ.). School of Mathematics and Statistics University of St Andrews, Scotland. Computing Sciences Accreditation Board. Computer Science as a Profession  (неопр.) (28 мая 1997). Дата обращения: 23 мая 2010. Архивировано 17 июня 2008 года. Csab, Inc  (неопр.). Csab.org (3 августа 2011). Graham, P. Collins. Claude E. Shannon: Founder of Information Theory  (неопр.). Scientific American, Inc.. IBM 704 Electronic Data Processing System - CHM Revolution  (неопр.). Computerhistory.org. P vs NP Problem. Clay Mathematics Institute  (неопр.). Архивировано из оригинала 18 октября 2014 года. Ronald, A. Thisted. COMPUTER ARCHITECTURE  (неопр.). The University of Chicago. Science Museum - Introduction to Babbage (англ.). Архивировано 8 сентября 2006 года. Some EDSAC statistics  (неопр.). Cl.cam.ac.uk. Stanford University Oral History  (неопр.). Stanford University. The Impact of High Frequency Trading on an Electronic Market (англ.). Papers.ssrn.com. doi:10.2139/ssrn.1686004. Дата обращения: 23 октября 2014. Wegner, P. (October 13-15, 1976). "Research paradigms in computer science". Proceedings of the 2nd international Conference on Software Engineering. San Francisco, California, United States: IEEE Computer Society Press, Los Alamitos, CA. {{cite conference}}: Неизвестный параметр |booktitle= игнорируется (|book-title= предлагается) (справка)Википедия:Обслуживание CS1 (формат даты) (ссылка) http://archive.computerhistory.org/resources/text/IBM/IBM.709.1957.102646304.pdf  (неопр.). Дата обращения: 27 октября 2014. Архивировано из оригинала 4 марта 2016 года. https://web.archive.org/web/20060525195404/http://www.idi.ntnu.no/emner/dif8916/denning.pdf (англ.). Архивировано 25 мая 2006 года. Совместный семинар ИПИ РАН и ИНИОН РАН «Методологические проблемы наук об информации» Статьи по информатике и информационным технологиям из научных библиотек Тезаурус ЮНЕСКО  (неопр.). Архивировано 24 мая 2013 года. Философия информации и философские проблемы информатики. Методология и терминология информатики (специальный выпуск журнала) // Метафизика : журнал. — 2013. — № 4(10). — ISSN 2224-7580. Большая датская Большая норвежская Большая российская (старая версия) Итальянская Канадская Кругосвет Ларусса Ларусса Britannica (онлайн) Treccani Universalis Universalis Современной Украины Швейцарский исторический BNE: XX525961 BNF: 11932109b GND: 4026894-9 J9U: 987007549081005171 LCCN: sh89003285 NKC: ph124511 Стадии разработки Анализ требований Проектирование Программирование Тестирование Документирование Архитектура ПО Парадигма Методология Процесс разработки Качество Программирование (Аспектно-ориентированное Объектно-ориентированное Предметно-ориентированное) Agile Cleanroom CASE UP RUP OpenUP RAD Scrum SAFe Модель Spotify MSF XP DSDM Итеративная Каскадная Спиральная V-Model Dual Vee Model CMM CMMI Данных Function model[англ.] IDEF Информационная Метамодель Object model[англ.] View model[англ.] UML Кент Бек Гради Буч Фред Брукс Уорд Каннингем Оле-Йохан Даль Том Демарко Эдсгер Дейкстра Дональд Кнут Алан Кэй Мартин Фаулер Энтони Хоар Ивар Якобсон Бертран Мейер Никлаус Вирт Эдвард Йордан Стив Макконнелл Джеймс Рамбо Барри Боэм Уоттс Хамфри[англ.] Майкл А. Джексон[англ.] Крэг Ларман Роберт Мартин Джеймс Мартин[англ.] Дэвид Парнас[англ.] Уинстон Ройс Информатика Технические науки Страницы, использующие волшебные ссылки ISBN Статьи с универсальной карточкой, отображающей мало свойств Статьи с универсальной карточкой Википедия:Карточки без параметров Статьи с универсальной карточкой, которая не добавляет изображение Статьи с универсальной карточкой, которая предположительно неуместна Википедия:Статьи, требующие уточнения источников Википедия:Статьи с шаблонами недостатков по алфавиту Википедия:Глобализировать Википедия:Статьи без источников (не распределённые по типам) Википедия:Нет источников с апреля 2015 Википедия:Статьи с утверждениями без источников более 14 дней Википедия:Статьи с нерабочими ссылками Википедия:Статьи с некорректным использованием шаблонов:Книга (указан неверный код языка) Статьи со ссылками на Викисловарь Статьи со ссылками на Викисклад Википедия:Cite web (не указан язык) Википедия:Ошибки CS1 (неподдерживаемый параметр) Википедия:Обслуживание CS1 (формат даты) Википедия:Cite web (заменить webcitation-архив: deadlink no) Википедия:Статьи с некорректным использованием гарвардской системы цитирования Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад Викиновости Afrikaans Alemannisch አማርኛ Aragonés العربية مصرى অসমীয়া Asturianu Azərbaycanca تۆرکجه Башҡортса Boarisch Žemaitėška Bikol Central Беларуская Беларуская (тарашкевіца) Български भोजपुरी বাংলা Brezhoneg Bosanski Català کوردی Corsu Čeština Kaszëbsczi Cymraeg Dansk Deutsch Zazaki Ελληνικά Emiliàn e rumagnòl English Esperanto Español Eesti Euskara Estremeñu فارسی Suomi Võro Føroyskt Français Nordfriisk Furlan Frysk Gaeilge Kriyòl gwiyannen Galego Gaelg 客家語/Hak-kâ-ngî עברית हिन्दी Hrvatski Kreyòl ayisyen Magyar Հայերեն Interlingua Bahasa Indonesia Interlingue Íslenska Italiano ᐃᓄᒃᑎᑐᑦ / inuktitut 日本語 La .lojban. ქართული Qaraqalpaqsha Taqbaylit Қазақша Kalaallisut ភាសាខ្មែរ ಕನ್ನಡ 한국어 Kurdî Latina Ladino Lëtzebuergesch Ligure Lombard Lietuvių Latgaļu Latviešu Мокшень Malagasy Олык марий Minangkabau Македонски മലയാളം Монгол ꯃꯤꯇꯩ ꯂꯣꯟ Bahasa Melayu Mirandés မြန်မာဘာသာ Napulitano Nedersaksies नेपाली नेपाल भाषा Nederlands Norsk nynorsk Norsk bokmål Novial Nouormand Occitan Oromoo ଓଡ଼ିଆ Picard पालि Polski Piemontèis پښتو Português Runa Simi Română Armãneashti Русиньскый संस्कृतम् Саха тыла Sardu Sicilianu Scots سنڌي Srpskohrvatski / српскохрватски Taclḥit ၽႃႇသႃႇတႆး සිංහල Simple English Slovenčina Slovenščina Shqip Српски / srpski Seeltersk Sunda Svenska Kiswahili தமிழ் తెలుగు Tetun Тоҷикӣ ไทย ትግርኛ Tagalog Tok Pisin Türkçe Татарча / tatarça ئۇيغۇرچە / Uyghurche Українська اردو Oʻzbekcha / ўзбекча Vèneto Tiếng Việt Walon Winaray Wolof 吴语 მარგალური Yorùbá Zeêuws 中文 閩南語 / Bân-lâm-gú 粵語 IsiZulu Эта страница в последний раз была отредактирована 11 мая 2024 в 21:02. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Ба́за да́нных — совокупность данных, хранимых в соответствии со схемой данных, манипулирование которыми выполняют в соответствии с правилами средств моделирования данных[1][2][3]. Многие специалисты указывают на распространённую ошибку, состоящую в некорректном использовании термина «база данных» вместо термина «система управления базами данных», и указывают на необходимость различения этих понятий[4]. В литературе предлагается множество определений понятия «база данных», отражающих скорее субъективное мнение тех или иных авторов, однако общепризнанная единая формулировка отсутствует. Определения из нормативных документов, в том числе стандартов: Определения из авторитетных монографий: В определениях наиболее часто (явно или неявно) присутствуют следующие отличительные признаки[10]: Из перечисленных признаков только первый является строгим, а другие допускают различные трактовки и различные степени оценки. Можно лишь установить некоторую степень соответствия требованиям к БД. В такой ситуации не последнюю роль играет общепринятая практика. В соответствии с ней, например, не называют базами данных файловые архивы, Интернет-порталы или электронные таблицы, несмотря на то, что они в некоторой степени обладают признаками БД. Принято считать, что эта степень в большинстве случаев недостаточна (хотя могут быть исключения). История возникновения и развития технологий баз данных может рассматриваться как в широком, так и в узком аспекте. В широком смысле понятие истории баз данных обобщается до истории любых средств, с помощью которых человечество хранило и обрабатывало данные. В таком контексте упоминаются, например, средства учёта царской казны и налогов в древнем Шумере (4-e тысячелетие до н.э.)[12], узелковая письменность инков — кипу, клинописи, содержащие документы Ассирийского царства и т. п. Следует помнить, что недостатком этого подхода является размывание понятия «база данных» и фактическое его слияние с понятиями «архив» и даже «письменность». История баз данных в узком смысле рассматривает базы данных в традиционном (современном) понимании. Эта история начинается с 1955 года, когда появилось программируемое оборудование обработки записей. Программное обеспечение этого времени поддерживало модель обработки записей на основе файлов. Для хранения данных использовались перфокарты[12]. Оперативные сетевые базы данных появились в середине 1960-х. Операции над оперативными базами данных обрабатывались в интерактивном режиме с помощью терминалов. Простые индексно-последовательные организации записей быстро развились к более мощной модели записей, ориентированной на наборы. За руководство работой Data Base Task Group (DBTG), разработавшей стандартный язык описания данных и манипулирования данными, Чарльз Бахман получил Тьюринговскую премию. В это же время в сообществе баз данных Кобол была проработана концепция схем баз данных и концепция независимости данных. Следующий важный этап связан с появлением в начале 1970-х реляционной модели данных, благодаря работам Эдгара Кодда.
Работы Кодда открыли путь к тесной связи прикладной технологии баз данных с математикой и логикой. За свой вклад в теорию и практику Эдгар Ф. Кодд также получил премию Тьюринга. Сам термин база данных (англ. database) появился в начале 1960-х годов, и был введён в употребление на симпозиумах, организованных компанией SDC в 1964 и 1965 годах, хотя понимался сначала в довольно узком смысле, в контексте систем искусственного интеллекта. В широкое употребление в современном понимании термин вошёл лишь в 1970-е годы[13]. Существует огромное количество разновидностей баз данных, различающихся по различным критериям. Например, в «Энциклопедии технологий баз данных»[7], по материалам которой написан данный раздел, определяются свыше 50 видов БД. В классификацию по модели данных обычно включают: Классификация по среде хранения различает базы данных, хранящие данные во вторичной памяти («традиционные», англ. conventional database), резидентные (все данные на стадии исполнения находятся в оперативной памяти) и третичные (англ. tertiary database), хранящие данные на отсоединяемых устройствах массового хранения — на основе магнитных лент или оптических дисков. При этом во всех классах так или иначе используются все среды хранения, например, для резидентных баз данных СУБД записывает в постоянную память журналы предзаписи, а для традиционных баз используется кэш в оперативной памяти. Также базы данных могут классифицироваться по содержимому, например, могут быть географическими, историческими, научными, мультимедийными. Для некоторых форм содержания строятся специализированные СУБД, либо добавляются специализированные возможности в СУБД общего назначения, среди таковых баз данных: По степени распределённости базы данных подразделяются на следующие классы: Среди распределённых баз данных выделяют: Возможны смешанные варианты, например, для одной и той же распределённой базы для больших объектов используется сегментирование, а для небольших — репликация. По способам организации хранения могут выделяться циклические базы данных (записывают новые данные вместо устаревших), потоковые базы данных. Сверхбольшая база данных (англ. Very Large Database, VLDB) — это база данных, которая занимает чрезвычайно большой объём на устройстве физического хранения. Термин подразумевает максимально возможные объёмы БД, которые определяются последними достижениями в технологиях физического хранения данных и в технологиях программного оперирования данными. Количественное определение понятия «чрезвычайно большой объём» меняется во времени. Так, в 1997 году самой большой в мире была текстовая база данных Knight Ridder’s DIALOG объёмом 7 терабайт[14]. В 2001 году самой большой считалась база данных объёмом 10,5 терабайт, в 2003 году — объёмом 25 терабайт[15]. В 2005 году самыми крупными в мире считались базы данных с объёмом хранилища порядка сотни терабайт[16]. В 2006 году поисковая машина Google использовала базу данных объёмом 850 терабайт[17]. К 2010 году считалось, что объём сверхбольшой базы данных должен измеряться по меньшей мере петабайтами[16]. В 2011 году компания Facebook хранила данные в кластере из 2 тысяч узлов суммарной ёмкостью 21 петабайт[18]; к концу 2012 года объём данных Facebook достиг 100 петабайт[19], а в 2014 году — 300 петабайт[20]. К 2014 году по косвенным оценкам компания Google хранила на своих серверах до 10—15 эксабайт данных в совокупности[21]. По некоторым оценкам, к 2025 году генетики будут располагать данными о геномах от 100 миллионов до 2 миллиардов человек, и для хранения подобного объёма данных потребуется от 2 до 40 эксабайт[22]. В целом, по оценкам компании IDC в 2018 году, суммарный объём данных «цифровой вселенной» удваивается каждые два года и изменится от 4,4 зеттабайта в 2013 году до 44 зеттабайт в 2020 году[23]. Исследования в области хранения и обработки сверхбольших баз данных VLDB всегда находятся на острие теории и практики баз данных. В частности, с 1975 года проходит ежегодная конференция International Conference on Very Large Data Bases («Международная конференция по сверхбольшим базам данных»). Большинство исследований проводится под эгидой некоммерческой организации VLDB Endowment (Фонд целевого капитала «VLDB»), которая обеспечивает продвижение научных работ и обмен информацией в области сверхбольших БД и смежных областях. 1 Проблемы определения 2 История 3 Виды баз данных 4 Сверхбольшие базы данных 5 См. также 6 Примечания 7 Литература 8 Ссылки База данных — представленная в объективной форме совокупность самостоятельных материалов (статей, расчётов, нормативных актов, судебных решений и иных подобных материалов), систематизированных таким образом, чтобы эти материалы могли быть найдены и обработаны с помощью электронной вычислительной машины (ЭВМ)[5] База данных — совокупность данных, организованных в соответствии с концептуальной структурой, описывающей характеристики этих данных и взаимоотношения между ними, которая поддерживает одну или более областей применения[6]. База данных — организованная в соответствии с определёнными правилами и поддерживаемая в памяти компьютера совокупность данных, характеризующая актуальное состояние некоторой предметной области и используемая для удовлетворения информационных потребностей пользователей[7]. База данных — некоторый набор перманентных (постоянно хранимых) данных, используемых прикладными программными системами какого-либо предприятия[8]. База данных — совместно используемый набор логически связанных данных (и описание этих данных), предназначенный для удовлетворения информационных потребностей организации[9]. БД хранится и обрабатывается в вычислительной системе.Таким образом, любые внекомпьютерные хранилища информации (архивы, библиотеки, картотеки и т. п.) базами данных не являются. Данные в БД логически структурированы (систематизированы) с целью обеспечения возможности их эффективного поиска и обработки в вычислительной системе.Структурированность подразумевает явное выделение составных частей (элементов), связей между ними, а также типизацию элементов и связей, при которой с типом элемента (связи) соотносится определённая семантика и допустимые операции[11]. БД включает схему, или метаданные, описывающие логическую структуру БД в формальном виде (в соответствии с некоторой метамоделью).В соответствии с ГОСТ Р ИСО МЭК ТО 10032-2007, «постоянные данные в среде базы данных включают в себя схему и базу данных. Схема включает в себя описания содержания, структуры и ограничений целостности, используемые для создания и поддержки базы данных. База данных включает в себя набор постоянных данных, определённых с помощью схемы. Система управления данными использует определения данных в схеме для обеспечения доступа и управления доступом к данным в базе данных»[1]. иерархические; объектные или объектно-ориентированные; объектно-реляционные; реляционные; сетевые; функциональные. пространственные (англ. spatial database): базы с пространственными свойствами сущностей предметной области, используются в геоинформационных системах; временны́е (темпоральные, англ. temporal database): поддерживают какой-либо аспект времени, не считая времени, определяемого пользователем. централизованные (сосредоточенные; англ. centralized database) — полностью поддерживаемые на одном компьютере распределённые (англ. distributed database), составные части которых размещаются в различных узлах компьютерной сети в соответствии с каким-либо критерием. сегментированные: разделённые на независимые сегменты, каждый из которых управляется отдельным экземпляром сервера базы данных, размещаемым, как правило, на отдельном вычислительном узле; тиражированные (реплицированные; англ. replicated database): одни и те же данные разнесены под управление различных экземпляров СУБД; неоднородные (англ. heterogeneous distributed database): фрагменты распределённой базы в разных узлах сети поддерживаются средствами более одной СУБД. Архитектура системы базы данных Архитектура ANSI — SPARC База знаний Большие данные Информационная система Модель данных Проектирование баз данных Хранилище данных База данных заднего плана Шифрование базы данных ↑ 1 2 ГОСТ Р ИСО МЭК ТО 10032-2007: Эталонная модель управления данными (идентичен ISO/IEC TR 10032:2003 Information technology — Reference model of data management) ↑ ГОСТ 33707-2016 (ISO/IEC 2382:2015) Информационные технологии (ИТ). Словарь ↑ ISO/IEC TR 10032:2003 - Information technology -- Reference Model of Data Management (англ.). www.iso.org. Дата обращения: 9 июля 2018. Архивировано 9 июля 2018 года. ↑ «Следует отметить, что термин база данных часто используется даже тогда, когда на самом деле подразумевается СУБД. […]Такое обращение с терминами предосудительно». — К. Дж. Дейт. Введение в системы баз данных. — 8-е изд. — М.: «Вильямс», 2006, стр. 50.
«Этот термин (база данных) часто ошибочно используется вместо термина ‘система управления базами данных’». — Когаловский М. Р. Энциклопедия технологий баз данных. — М.: Финансы и статистика, 2002., стр. 460.
«Среди непрофессионалов […] путаница возникает при использовании терминов „база данных“ и „система управления базами данных“. […] Мы будем строго разделять эти термины». —
Кузнецов С. Д. Основы баз данных: учебное пособие. — 2-е издание, испр. — М.: Интернет-Университет Информационных Технологий; БИНОМ. Лаборатория знаний, 2007, стр. 19. ↑ Гражданский кодекс РФ, ст. 1260 ↑ ISO/IEC 2382:2015 - Information technology -- Vocabulary (англ.). www.iso.org. Дата обращения: 9 июля 2018. Архивировано 24 апреля 2021 года. ↑ 1 2 Когаловский М. Р., 2002. ↑ Дейт К. Дж., 2005. ↑ Коннолли Т., Бегг К., 2003. ↑ Мирошниченко Е. А. К формальному определению понятия «база данных» Архивная копия от 27 апреля 2016 на Wayback Machine // Пробл. информатики. 2011. № 2. С. 83-87. ↑ Важно понимать, что структурированность базы данных оценивается не на уровне физического хранения (на котором все данные представлены совокупностями битов или байтов), а на уровне некоторой логической модели данных. ↑ 1 2 Грей, Дж. Управление данными: прошлое, настоящее и будущее  (неопр.). Дата обращения: 16 апреля 2010. Архивировано 27 апреля 2010 года. ↑ Haigh T. How Data Got its Base: Information Storage Software in the 1950s and 1960s // IEEE Annals of the History of Computing. — 2009. — #4 October-December ↑ Very Large Database  (неопр.). Дата обращения: 6 ноября 2016. Архивировано 6 ноября 2016 года. ↑ Riedewald M., Agrawal D., Abbadi A. Dynamic Multidimensional Data Cubes for Interactive Analysis of Massive Datasets // In: Encyclopedia of Information Science and Technology, First Edition, Idea Group Inc., 2005. ISBN 9781591405535 ↑ 1 2 «Экстремальные» базы данных: Самые большие и самые быстрые Архивная копия от 1 ноября 2011 на Wayback Machine, 2010 г. ↑ Alex Chitu. How Much Data Does Google Store? Архивная копия от 15 сентября 2016 на Wayback Machine, 2006 ↑ Shvachko, Konstantin. Apache Hadoop. The Scalability Update (англ.). — 2011. — Vol. 36, no. 3. — P. 7—13. — ISSN 1044-6397. ↑ Josh Constine. How Big Is Facebook’s Data? Архивная копия от 12 сентября 2018 на Wayback Machine // TechCrunch, 23.08.2012 ↑ Wiener, J., Bronson N. Facebook’s Top Open Data Problems Архивная копия от 12 сентября 2018 на Wayback Machine, 22.10.2014 ↑ Colin Carson. How Much Data Does Google Store? Архивная копия от 15 сентября 2016 на Wayback Machine, 2014 ↑ Ася Горина. Увеличивающийся объем генетических данных стал проблемой для науки Архивная копия от 5 марта 2017 на Wayback Machine ↑ Executive Summary: Data Growth, Business Opportunities, and the IT Imperatives  (неопр.). Дата обращения: 12 сентября 2018. Архивировано 12 сентября 2018 года. Когаловский М. Р. Энциклопедия технологий баз данных. — М.: Финансы и статистика, 2002. — 800 с. — ISBN 5-279-02276-4. Кузнецов С. Д. Основы баз данных. — 2-е изд. — М.: Интернет-университет информационных технологий; БИНОМ. Лаборатория знаний, 2007. — 484 с. — ISBN 978-5-94774-736-2. Дейт К. Дж. Введение в системы баз данных = Introduction to Database Systems. — 8-е изд. — М.: Вильямс, 2005. — 1328 с. — ISBN 5-8459-0788-8  (рус.) 0-321-19784-4 (англ.). Коннолли Т., Бегг К. Базы данных. Проектирование, реализация и сопровождение. Теория и практика = Database Systems: A Practical Approach to Design, Implementation, and Management. — 3-е изд. — М.: Вильямс, 2003. — 1436 с. — ISBN 0-201-70857-4. Гарсиа-Молина Г., Ульман Дж., Уидом Дж. Системы баз данных. Полный курс = Database Systems: The Complete Book. — Вильямс, 2003. — 1088 с. — ISBN 5-8459-0384-X. Банк данных / А. Б. Антопольский // Большая российская энциклопедия : [в 35 т.] / гл. ред. Ю. С. Осипов. — М. : Большая российская энциклопедия, 2004—2017. Date, C. J. Date on Database: Writings 2000–2006. — Apress, 2006. — 566 с. — ISBN 978-1-59059-746-0, 1-59059-746-X. Date, C. J. Database in Depth. — O'Reilly, 2005. — 240 с. — ISBN 0-596-10012-4. Beynon-Davies P. (2004). Database Systems 3rd Edition. Palgrave, Basingstoke, UK. ISBN 1-4039-1601-2 Медиафайлы на Викискладе CITForum — материалы на сайте Центра информационных технологий Very Large Data Base  — Endowment Inc. ACM SIGMOD — Association for Computing Machinery: Special Interest Group On Management of Data. MathWorld Большая датская Большая каталанская Большая каталанская Большая каталанская Большая норвежская Большая российская (научно-образовательный портал) Britannica (онлайн) De Agostini Современной Украины BNF: 11931023c GND: 4113276-2 J9U: 987007532088905171 LCCN: sh86007767 NDL: 00865521 NKC: ph114295 Модель данных Реляционная
модель
алгебра
Нормальная форма
Ссылочная целостность
БД
СУБД модель алгебра Нормальная форма Ссылочная целостность БД СУБД Иерархическая модель Сетевая модель Объектно-ориентированная
БД
СУБД БД СУБД Объектно-реляционная СУБД Транзакция Журнализация
упреждающая упреждающая Секционирование Сегментирование Столбцовое хранение Схема Отношение Столбец
виртуальный виртуальный Строка Таблица Представление
материализованное материализованное Хранимая процедура Триггер Курсор Индекс Табличное пространство Первичный
суррогатный суррогатный Внешний Потенциальный Суперключ Язык запросов Оптимизатор запросов Планировщик запросов План выполнения запроса Кэш запросов ODBC ADO ADO.NET JDBC SELECT INSERT UPDATE DELETE MERGE CREATE ALTER DROP TRUNCATE COMMIT ROLLBACK SAVEPOINT База данных Измерение (хранилище данных)[англ.] Модель измерений[англ.] Факт OLAP Схема звезды Схема снежинки Якорная модель Таблица измерений Data vault[англ.] HOLAP MOLAP ROLAP Операционное хранилище[англ.] Словарь данных Метаданные Витрина данных Шестая нормальная форма Суррогатный ключ Таблица фактов Ранний факт[англ.] Мера (хранилище данных)[англ.] Таблица измерений Медленно меняющиеся измерения Вырожденное измерение[англ.] ETL Извлечение данных[англ.] Трансформация данных[англ.] Business Intelligence Панель индикаторов Data mining DSS OLAP-куб Data Mining Extensions[англ.] MDX XMLA[англ.] Инструменты бизнес-аналитики Генератор отчётов Электронная таблица Билл Инмон[англ.] Ральф Кимболл[англ.] Базы данных Википедия:Cite web (не указан язык) Страницы, использующие волшебные ссылки ISBN Статьи со ссылками на Викисклад Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад Викиновости Afrikaans አማርኛ Aragonés العربية مصرى Asturianu Azərbaycanca تۆرکجه Boarisch Беларуская Беларуская (тарашкевіца) Български বাংলা Brezhoneg Bosanski Català کوردی Čeština Cymraeg Dansk Deutsch Ελληνικά English Esperanto Español Eesti Euskara فارسی Suomi Français Frysk Gaeilge Galego עברית हिन्दी Hrvatski Magyar Հայերեն Interlingua Bahasa Indonesia Ido Íslenska Italiano 日本語 Jawa ქართული Қазақша 한국어 Kurdî Кыргызча Latina Lingua Franca Nova Lombard Lietuvių Latviešu Олык марий Македонски മലയാളം Монгол Bahasa Melayu Mirandés မြန်မာဘာသာ Nederlands Norsk nynorsk Norsk bokmål Occitan Oromoo ਪੰਜਾਬੀ Polski پښتو Português Runa Simi Română Sicilianu Srpskohrvatski / српскохрватски සිංහල Simple English Slovenčina Slovenščina Shqip Српски / srpski Seeltersk Svenska Kiswahili தமிழ் తెలుగు Тоҷикӣ ไทย Tagalog Türkçe Татарча / tatarça ئۇيغۇرچە / Uyghurche Українська Oʻzbekcha / ўзбекча Tiếng Việt Walon Winaray 吴语 中文 閩南語 / Bân-lâm-gú 粵語 IsiZulu Эта страница в последний раз была отредактирована 31 мая 2024 в 13:53. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Систе́ма управле́ния ба́зами да́нных, сокр. СУБД (англ. Database Management System, сокр. DBMS) — совокупность программных и лингвистических средств общего или специального назначения, обеспечивающих управление созданием и использованием баз данных (БД)[1]. СУБД — комплекс программ, позволяющих создать базу данных и манипулировать данными (вставлять, обновлять, удалять и выбирать). Система обеспечивает безопасность, надёжность хранения и целостность данных, а также предоставляет средства для администрирования БД[2]. Обычно современная СУБД содержит следующие компоненты: Примеры: В таких СУБД все изменённые блоки данных незамедлительно записываются во внешнюю память при поступлении сигнала подтверждения любой транзакции. Такая стратегия используется только при высокой эффективности внешней памяти. В таких СУБД изменения аккумулируются в буферах внешней памяти до наступления любого из следующих событий: Такая стратегия позволяет избежать частого обмена с внешней памятью и значительно увеличить эффективность работы СУБД. 1 Основные функции СУБД 2 Состав СУБД 3 Классификации СУБД 4 Стратегии работы с внешней памятью 5 См. также 6 Примечания 7 Литература 8 Ссылки управление данными во внешней памяти (на дисках); управление данными в оперативной памяти с использованием дискового кэша; журнализация изменений, резервное копирование и восстановление базы данных после сбоев; поддержка языков БД (язык определения данных, язык манипулирования данными). ядро, которое отвечает за управление данными во внешней и оперативной памяти и журнализацию; процессор языка базы данных, обеспечивающий оптимизацию запросов на извлечение и изменение данных и создание, как правило, машинно-независимого исполняемого внутреннего кода; подсистему поддержки времени исполнения, которая интерпретирует программы манипуляции данными, создающие пользовательский интерфейс с СУБД; сервисные программы (внешние утилиты), обеспечивающие ряд дополнительных возможностей по обслуживанию информационной системы. Иерархические Сетевые Реляционные Объектно-ориентированные Объектно-реляционные Локальные СУБД (все части локальной СУБД размещаются на одном компьютере) Распределённые СУБД (части СУБД могут размещаться не только на одном, но на двух и более компьютерах). Файл-серверные Клиент-серверные Встраиваемые контрольная точка; нехватка пространства во внешней памяти, отведённого под журнал (СУБД создаёт контрольную точку и начинает писать журнал сначала, затирая предыдущую информацию); останов (СУБД ждёт, когда всё содержимое всех буферов внешней памяти будет перенесено во внешнюю память, после чего делает отметки, что останов базы данных выполнен корректно); нехватка оперативной памяти для буферов внешней памяти. Архитектура ANSI — SPARC Информационная система ↑ ГОСТ Р ИСО МЭК ТО 10032-2007: Эталонная модель управления данными (идентичен ISO/IEC TR 10032:2003 Information technology — Reference model of data management) ↑ Кузнецов С. Д. Система управления базами данных Архивная копия от 24 октября 2018 на Wayback Machine // Большая российская энциклопедия ↑ Еленев Д. В. и др. Автоматизация системы управления национальным исследовательским университетом и мониторинга его деятельности Архивная копия от 2 ноября 2012 на Wayback Machine // Программные продукты и системы, № 3, 2012. Когаловский М.Р. Энциклопедия технологий баз данных. — М.: Финансы и статистика, 2002. — 800 с. — ISBN 5-279-02276-4. Кузнецов С. Д. Основы баз данных. — 2-е изд. — М.: Интернет-университет информационных технологий; БИНОМ. Лаборатория знаний, 2007. — 484 с. — ISBN 978-5-94774-736-2. Дейт К. Дж. Введение в системы баз данных = Introduction to Database Systems. — 8-е изд. — М.: Вильямс, 2005. — 1328 с. — ISBN 5-8459-0788-8  (рус.) 0-321-19784-4 (англ.). Коннолли Т., Бегг К. Базы данных. Проектирование, реализация и сопровождение. Теория и практика = Database Systems: A Practical Approach to Design, Implementation, and Management. — 3-е изд. — М.: Вильямс, 2003. — 1436 с. — ISBN 0-201-70857-4. Гарсиа-Молина Г., Ульман Дж., Уидом Дж. Системы баз данных. Полный курс = Database Systems: The Complete Book. — Вильямс, 2003. — 1088 с. — ISBN 5-8459-0384-X. C. J. Date. Date on Database: Writings 2000–2006. — Apress, 2006. — 566 с. — ISBN 978-1-59059-746-0, 1-59059-746-X. Медиафайлы на Викискладе Database of Databases — онлайн-энциклопедия СУБД, составляемая группой баз данных Университета Карнеги — Меллона (руководитель — Энди Павло) Список всех коммерческих СУБД, доступных в США на 1987 год (англ.) // Computerworld, 10 августа 1987 Рейтинг «популярности» СУБД, согласно ресурсу DB-Engines, основан, в основном, на частоте упоминаний СУБД и не учитывает количество установок и реальное использование в информационных системах (см. описание метода ранжирования) Большая российская (научно-образовательный портал) Britannica (онлайн) De Agostini Treccani Universalis NKC: ph114296 Модель данных Реляционная
модель
алгебра
Нормальная форма
Ссылочная целостность
БД
СУБД модель алгебра Нормальная форма Ссылочная целостность БД СУБД Иерархическая модель Сетевая модель Объектно-ориентированная
БД
СУБД БД СУБД Объектно-реляционная СУБД Транзакция Журнализация
упреждающая упреждающая Секционирование Сегментирование Столбцовое хранение Схема Отношение Столбец
виртуальный виртуальный Строка Таблица Представление
материализованное материализованное Хранимая процедура Триггер Курсор Индекс Табличное пространство Первичный
суррогатный суррогатный Внешний Потенциальный Суперключ Язык запросов Оптимизатор запросов Планировщик запросов План выполнения запроса Кэш запросов ODBC ADO ADO.NET JDBC SELECT INSERT UPDATE DELETE MERGE CREATE ALTER DROP TRUNCATE COMMIT ROLLBACK SAVEPOINT Caché CouchDB IMS DB2 Firebird FoundationDB Informix Ingres Interbase MS SQL Server MongoDB MySQL mSQL Neo4j Oracle Database Pervasive SQL PostgreSQL Sybase ASE Sybase ASA Sybase IQ Teradata Database ЛИНТЕР Yandex Database СУБД_Ред_База_Данных BDE Berkeley DB C-Store db4o HSQLDB Mnesia PrimeBase Redis Rdb SQLite ZODB DataFlex dBase MS Access OpenOffice Base Paradox СУБД Статьи с универсальной карточкой, отображающей мало свойств Статьи с универсальной карточкой Википедия:Карточки без параметров Статьи с универсальной карточкой, которая предположительно неуместна Статьи со ссылками на Викисклад Страницы, использующие волшебные ссылки ISBN Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад Викиновости Afrikaans العربية مصرى Беларуская (тарашкевіца) Български বাংলা Català 閩東語 / Mìng-dĕ̤ng-ngṳ̄ Čeština Ελληνικά English Español Euskara فارسی Suomi Français Gaeilge हिन्दी Hrvatski Magyar Հայերեն Bahasa Indonesia Italiano 日本語 ქართული Qaraqalpaqsha Қазақша ಕನ್ನಡ 한국어 Кыргызча Lombard Lietuvių Latviešu Malagasy Олык марий Bahasa Melayu Nederlands Norsk bokmål Polski Português Română Srpskohrvatski / српскохрватски Slovenčina Slovenščina Shqip Српски / srpski Svenska தமிழ் ไทย Türkçe Українська Tiếng Việt Winaray 吴语 中文 粵語 Эта страница в последний раз была отредактирована 28 мая 2024 в 15:48. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Операти́вная па́мять (англ. Random Access Memory, RAM — память с произвольным доступом) — в большинстве случаев энергозависимая часть системы компьютерной памяти, в которой во время работы компьютера хранится выполняемый машинный код (программы), а также входные, выходные и промежуточные данные, обрабатываемые процессором. Оперативное запоминающее устройство (ОЗУ) — техническое устройство, реализующее функции оперативной памяти. ОЗУ может изготавливаться как отдельный внешний модуль или располагаться на одном кристалле с процессором, например, в однокристальных ЭВМ или однокристальных микроконтроллерах. Обмен данными между процессором и оперативной памятью производится как непосредственно, так и через сверхбыструю память нулевого уровня либо, при наличии аппаратного кэша процессора, — через кэш. Содержащиеся в полупроводниковой оперативной памяти данные доступны и сохраняются только тогда, когда на модули памяти подаётся напряжение. Выключение питания оперативной памяти, даже кратковременное, приводит к потере хранимой информации. Энергосберегающие режимы работы материнской платы компьютера позволяют переводить его в режим сна, что значительно сокращает уровень потребления компьютером электроэнергии. В режиме гибернации питание ОЗУ отключается. В этом случае для сохранения содержимого ОЗУ операционная система перед отключением питания записывает содержимое ОЗУ на устройство постоянного хранения данных (на жёсткий диск или твердотельный накопитель). Например, в Windows XP содержимое памяти сохраняется в файл hiberfil.sys, в системах семейства Unix — на специальный swap-раздел. В общем случае ОЗУ содержит программы и данные операционной системы и запущенные прикладные программы пользователя и данные этих программ, поэтому от объёма оперативной памяти зависит количество задач, которые одновременно может выполнять компьютер под управлением операционной системы. В 1833 году Чарльз Бэббидж начал разработку аналитической машины; одну из её частей он называл «складом» (store), эта часть предназначалась для хранения промежуточных результатов вычислений. Информация в «складе» запоминалась в чисто механическом устройстве в виде поворотов валов и шестерней. В ЭВМ первого поколения использовалось множество разновидностей и конструкций запоминающих устройств, основанных на различных физических принципах: В качестве ОЗУ использовались также магнитные барабаны, обеспечивавшие достаточно малое для ранних компьютеров время доступа; также они использовались в качестве основной памяти для хранения программ и данных. Второе поколение требовало более технологичных, дешёвых и быстродействующих ОЗУ. Наиболее распространённым видом ОЗУ в то время стала ферритовая память на магнитных сердечниках. Начиная с третьего поколения большинство электронных узлов компьютеров стали выполнять на микросхемах, в том числе и ОЗУ. Наибольшее распространение получили два вида ОЗУ: SRAM хранит бит данных в виде состояния триггера. Этот вид памяти является более дорогим в расчёте на хранение 1 бита, но, как правило, имеет меньшее время доступа, но и большее энергопотребление, чем DRAM. В современных компьютерах SRAM часто используется в качестве кэш-памяти процессора. DRAM хранит бит данных в виде заряда конденсатора. Однобитовая ячейка памяти содержит конденсатор и транзистор. Конденсатор заряжается до высокого или низкого напряжения (логические 1 или 0). Транзистор выполняет функцию ключа, подключающего конденсатор к схеме управления, расположенной на том же чипе. Схема управления позволяет считывать состояние заряда конденсатора или изменять его. Так как хранение 1 бита информации в этом виде памяти дешевле, DRAM преобладает в компьютерах третьего поколения. Статические и динамические ОЗУ являются энергозависимыми, так как информация в них теряется при отключении питания. Энергонезависимые устройства (постоянная память, ПЗУ) сохраняют информацию вне зависимости от наличия питания. К ним относятся флэш-накопители, карты памяти для фотоаппаратов и портативных устройств и так далее. Во второй половине 2010-х годов получили распространение модули энергонезависимой памяти, близкие по свойствам к DRAM. В устройствах управления энергозависимой памяти (SRAM или DRAM) часто включают специальные схемы для обнаружения и исправления ошибок. Это достигается введением избыточных битов в хранимые машинные слова, используемые для проверки (например, биты чётности) или коррекции ошибок. Термин «RAM» относится только к устройствам твердотельной памяти SRAM или DRAM — основной памяти большинства современных компьютеров. Для оптических дисков термин «DVD-RAM» не совсем корректен, так как, в отличие от дисков типа CD-RW или DVD-RW, старые данные не должны стираться перед записью новых. Тем не менее, информационно DVD-RAM больше похож на жёсткий диск, хотя время обращения к нему намного больше. ОЗУ большинства современных компьютеров представляет собой модули динамической памяти, содержащие полупроводниковые интегральные схемы, организованные по принципу устройств с произвольным доступом. Память динамического типа дешевле, чем статического, и её плотность выше, что позволяет на той же площади кремниевого кристалла разместить больше ячеек памяти, но при этом её быстродействие ниже. Статическая память, наоборот, более быстрая память, но она и дороже. В связи с этим основную оперативную память строят на модулях динамической памяти, а память статического типа используется для построения кэш-памяти внутри микропроцессора. Экономичный вид памяти. Для хранения разряда (бита или трита) используется схема, состоящая из одного конденсатора и одного транзистора (в некоторых вариантах два конденсатора). Такой вид памяти, во-первых, дешевле (один конденсатор и один транзистор на 1 бит дешевле нескольких транзисторов входящих в триггер), и, во-вторых, занимает меньшую площадь на кристалле, там, где в SRAM размещается один триггер, хранящий 1 бит, можно разместить несколько конденсаторов и транзисторов для хранения нескольких бит. DRAM имеет определённые недостатки. Во-первых, работает медленнее, поскольку, если в SRAM изменение управляющего напряжения на входе триггера сразу очень быстро изменяет его состояние, то для того, чтобы изменить состояние конденсатора, его нужно зарядить или разрядить. Перезаряд конденсатора гораздо более длителен (в 10 и более раз), чем переключение триггера, даже если ёмкость конденсатора очень мала. Второй существенный недостаток — конденсаторы со временем разряжаются. Причём разряжаются они тем быстрее, чем меньше их электрическая ёмкость и больше ток утечки, в основном, это утечка через ключ. Именно из-за того, что заряд конденсатора постепенно уменьшается во времени, память на конденсаторах получила своё название DRAM — динамическая память. Поэтому, дабы не потерять содержимое памяти, величина заряда конденсаторов периодически восстанавливается («регенерируется») через определённое время, называемое циклом регенерации, для современных микросхем памяти это время не должно превышать 2 мс. Для регенерации в современных микросхемах достаточно выполнить циклограмму чтения по всем строкам запоминающей матрицы. Процедуру регенерации выполняет процессор или контроллер памяти. Так как для регенерации памяти периодически приостанавливается обращение к памяти, это снижает среднюю скорость обмена с этим видом ОЗУ. ОЗУ, которое не надо регенерировать, обычно схемотехнически выполненное в виде массива триггеров, называют статической памятью с произвольным доступом или просто статической памятью. Достоинство этого вида памяти — скорость. Поскольку триггеры являются соединением нескольких логических вентилей, а время задержки на вентиль очень мало, то и переключение состояния триггера происходит очень быстро. Данный вид памяти не лишён недостатков. Во-первых, группа транзисторов, входящих в состав триггера, обходится дороже, чем ячейка динамической памяти, даже если они изготавливаются групповым методом миллионами на одной кремниевой подложке. Кроме того, группа транзисторов, входящих в статический триггер занимает гораздо больше площади на кристалле, чем ячейка динамической памяти, поскольку триггер состоит минимум из 2 вентилей, в каждый вентиль входит по меньшей мере один транзистор, а ячейка динамической памяти — только из одного транзистора и одного конденсатора. Память статического типа используется для организации сверхбыстродействующего ОЗУ, обмен информацией с которым критичен для производительности системы. В реальном режиме память делится на следующие участки: 1 История 2 ОЗУ современных компьютеров

2.1 Память динамического типа
2.2 Память статического типа 2.1 Память динамического типа 2.2 Память статического типа 3 Логическая структура памяти в IBM PC 4 Литература 5 Ссылки на электромагнитных реле; на акустических линиях задержки; на электронно-лучевых трубках; на электростатических трубках. статическая память (SRAM) в виде массива триггеров; динамическая память (DRAM) в виде массива конденсаторов. основная область памяти (англ. conventional memory), расширенная память (EMS), дополнительная память (XMS), Upper Memory Area (UMA), High Memory Area (HMA). Скотт Мюллер. Глава 6. Оперативная память // Модернизация и ремонт ПК = Upgrading and Repairing PCs. — 17-е изд. — М.: Вильямс, 2007. — С. 499—572. — ISBN 0-7897-3404-4. Под. ред. чл.-корр. АН УССР Б. Н. Малиновского. Глава 2.3 БИС ЗУ для построения внутренней памяти // Справочник по персональным ЭВМ. — К.: Тэхника, 1990. — С. 384. — ISBN 5-335-00168-2. Дмитрий Беседин, Современная оперативная память (RAM FAQ 1.01) Архивная копия от 10 февраля 2009 на Wayback Machine, ixbt, 12 МАЯ 2006 FAQ по чипам памяти Архивная копия от 15 октября 2018 на Wayback Machine, FAQ по модулям памяти Архивная копия от 15 октября 2018 на Wayback Machine, FAQ по подсистеме памяти Архивная копия от 15 октября 2018 на Wayback Machine 1998, ixbt Введение в цифровую схемотехнику, МИФИ, 2006. Лекция 12: Оперативная память Архивная копия от 15 октября 2018 на Wayback Machine Оперативная память Страницы, использующие волшебные ссылки ISBN Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад العربية Български Čeština Dansk English Suomi Қазақша Nederlands Slovenčina Shqip Svenska Тоҷикӣ Türkmençe Українська Эта страница в последний раз была отредактирована 20 мая 2024 в 16:51. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Data Definition Language (DDL) (язык описания данных) — это семейство компьютерных языков, используемых в компьютерных программах для описания структуры баз данных. На текущий момент наиболее популярным языком DDL является SQL, используемый для получения и манипулирования данными в РСУБД, и сочетающий в себе элементы DDL, DML и DCL. Функции языков DDL определяются первым словом в предложении (часто называемом запросом), которое почти всегда является глаголом. В случае с SQL это глаголы — «create» («создать»), «alter» («изменить»), «drop» («удалить»). Эти запросы или команды часто смешиваются с другими командами SQL, в связи с чем DDL не является отдельным компьютерным языком. Запрос «create» используется для создания базы данных, таблицы, индекса, представления или хранимой процедуры.
Запрос «alter» используется для изменения существующего объекта базы данных (таблицы, индекса, представления или хранимой процедуры) или самой базы данных.
Запрос «drop» используется для удаления существующего объекта базы данных (таблицы, индекса, представления или хранимой процедуры) или самой базы данных.
И наконец, в DDL существуют понятия первичного и внешнего ключа, которые осуществляют соблюдение целостности данных. Команды «первичный ключ» primary key, «внешний ключ» foreign key включаются в запросы «create table», «alter table».[1] Языки DDL могут существенно различаться у различных производителей СУБД. Существует ряд стандартов SQL, установленный ISO/IEC (SQL-89,SQL-92, SQL:1999, SQL:2003, SQL:2008), но производители СУБД часто предлагают свои собственные «расширения» языка и, часто, не поддерживают стандарт полностью. ↑ Beynon-Davies P. (2004). Database Systems 3rd Edition. Palgrave, Basingstoke, UK. ISBN 1-4039-1601-2 Найти и оформить в виде сносок ссылки на независимые авторитетные источники, подтверждающие написанное. Модель данных Реляционная
модель
алгебра
Нормальная форма
Ссылочная целостность
БД
СУБД модель алгебра Нормальная форма Ссылочная целостность БД СУБД Иерархическая модель Сетевая модель Объектно-ориентированная
БД
СУБД БД СУБД Объектно-реляционная СУБД Транзакция Журнализация
упреждающая упреждающая Секционирование Сегментирование Столбцовое хранение Схема Отношение Столбец
виртуальный виртуальный Строка Таблица Представление
материализованное материализованное Хранимая процедура Триггер Курсор Индекс Табличное пространство Первичный
суррогатный суррогатный Внешний Потенциальный Суперключ Язык запросов Оптимизатор запросов Планировщик запросов План выполнения запроса Кэш запросов ODBC ADO ADO.NET JDBC SELECT INSERT UPDATE DELETE MERGE CREATE ALTER DROP TRUNCATE COMMIT ROLLBACK SAVEPOINT SQL Языки баз данных Страницы, использующие волшебные ссылки ISBN Википедия:Статьи без ссылок на источники Википедия:Статьи без источников (тип: не указан) Википедия:Статьи с шаблонами недостатков по алфавиту Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати العربية Deutsch English Español Euskara Français Italiano 日本語 Қазақша 한국어 Latviešu Nederlands Polski Português Тоҷикӣ Українська 中文 Эта страница в последний раз была отредактирована 22 ноября 2022 в 11:56. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

В классической теории баз данных, модель данных есть формальная теория представления и обработки данных в системе управления базами данных (СУБД), которая включает, по меньшей мере, три аспекта: Аспект структуры определяет, что из себя логически представляет база данных.
Аспект манипуляции определяет способы перехода между состояниями базы данных (то есть способы модификации данных) и способы извлечения данных из базы данных.
Аспект целостности определяет средства описаний корректных состояний базы данных. Модель данных — это абстрактное, самодостаточное, логическое определение объектов, операторов и прочих элементов, в совокупности составляющих абстрактную машину доступа к данным, с которой взаимодействует пользователь. Эти объекты позволяют моделировать структуру данных, а операторы — поведение данных[1]. Каждая БД и СУБД строится на основе некоторой явной или неявной модели данных. Все СУБД, построенные на одной и той же модели данных, относят к одному типу. Например, основой реляционных СУБД является реляционная модель данных, сетевых СУБД — сетевая модель данных, иерархических СУБД — иерархическая модель данных и т. д. В литературе, статьях и в обиходной речи иногда встречается использование термина «модель данных» в смысле «схема базы данных» («модель базы данных»). Такое использование является неверным, на что указывают многие авторитетные специалисты, в том числе К. Дж. Дейт, М. Р. Когаловский, С. Д. Кузнецов. Модель данных есть теория, или инструмент моделирования, в то время как модель базы данных (схема базы данных) есть результат моделирования. По выражению К. Дейта соотношение между этими понятиями аналогично соотношению между языком программирования и конкретной программой на этом языке[1]. М. Р. Когаловский поясняет эволюцию смысла термина следующим образом. Первоначально понятие модели данных употреблялось как синоним структуры данных в конкретной базе данных. В процессе развития теории систем баз данных термин «модель данных» приобрел новое содержание. Возникла потребность в термине, который обозначал бы инструмент, а не результат моделирования, и воплощал бы, таким образом, множество всевозможных баз данных некоторого класса. Во второй половине 1970-х годов во многих публикациях, посвященных указанным проблемам, для этих целей стал использоваться все тот же термин «модель данных». В настоящее время в научной литературе термин «модель данных» трактуется в подавляющем большинстве случаев в инструментальном смысле (как инструмент моделирования)[2]. Тем не менее, длительное время термин «модель данных» использовался без формального определения. Одним из первых специалистов, который достаточно формально определил это понятие, был Э. Кодд. В статье «Модели данных в управлении базами данных»[3] он определил модель данных как комбинацию трёх компонентов: Различают как минимум следующие модели данных: аспект структуры: методы описания типов и логических структур данных в базе данных; аспект манипуляции: методы манипулирования данными; аспект целостности: методы описания и поддержки целостности базы данных. 1 О терминологии 2 Примеры 3 См. также 4 Примечания 5 Литература коллекции типов объектов данных, образующих базовые строительные блоки для любой базы данных, соответствующей модели; коллекции общих правил целостности, ограничивающих набор экземпляров тех типов объектов, которые законным образом могут появиться в любой такой базе данных; коллекции операций, применимых к таким экземплярам объектов для выборки и других целей[4]. Логические модели:
Иерархическая модель
Сетевая модель
Реляционная модель
Модель «сущность — связь» (ER)
Модель «сущность — атрибут — значение»[англ.] (EAV)
Объектно-ориентированная модель (из ООП)
Документная модель
Звёздная модель и модель снежинки Иерархическая модель Сетевая модель Реляционная модель Модель «сущность — связь» (ER) Модель «сущность — атрибут — значение»[англ.] (EAV) Объектно-ориентированная модель (из ООП) Документная модель Звёздная модель и модель снежинки Физические модели:
Плоская модель[англ.]
Табличная модель
Инвертированная модель Плоская модель[англ.] Табличная модель Инвертированная модель Прочие модели:
Ассоциативная модель[англ.]
Корреляционная модель[англ.]
Семантическая модель[англ.]
Модель XML[англ.]
MultiValue[англ.]
Семантическая паутина и именованные графы[англ.]
Склад троек Ассоциативная модель[англ.] Корреляционная модель[англ.] Семантическая модель[англ.] Модель XML[англ.] MultiValue[англ.] Семантическая паутина и именованные графы[англ.] Склад троек Онтология (информатика) Моделирование знаний Представление знаний ↑ 1 2 Дейт К. Дж. Введение в системы баз данных. — 8-е изд. — М.: «Вильямс», 2006. ↑ М. Р. Когаловский. Абстракции и модели в системах баз данных  (неопр.). Дата обращения: 2 марта 2010. Архивировано из оригинала 13 июня 2008 года. ↑ Codd, E.F. "Data Models in Database Management. Proc. Workshop in Data Abstraction, Databases, and Conceptual Modelling (Michael L. Brodie and Stephen N. Zilles, eds.), Pingree Park, Colo. (June 1980): ACM SIGART Newsletter No. 74 (January 1981); ACM SIGMOD Record 11(2), February 1981; ACM SIGPLAN Notices 16(1), January 1981 ↑ Дейт К. Дж. Реляционная модель выдержит испытание временем Архивная копия от 12 декабря 2009 на Wayback Machine (пер. с Date, C.J. The relational model will stand the test of time // Intelligent Enterprise, June 1, 1999, Volume 2, Number 8) Дейт К. Дж. Введение в системы баз данных = Introduction to Database Systems. — 8-е изд. — М.: «Вильямс», 2006. — 1328 с. — ISBN 0-321-19784-4. Когаловский М. Р. Перспективные технологии информационных систем. — М.: ДМК Пресс; Компания АйТи, 2003. — 288 с. — ISBN 5-279-02276-4. Когаловский М. Р. Энциклопедия технологий баз данных. — М.: Финансы и статистика, 2002. — 800 с. — ISBN 5-279-02276-4. Цикритзис Д., Лоховски Ф. Модели данных = D. Tsichritzis, F. Lochovsky. Data Models. Prentice Hall, 1982. — М.: Финансы и статистика, 1985. — 344 с. Стадии разработки Анализ требований Проектирование Программирование Тестирование Документирование Архитектура ПО Парадигма Методология Процесс разработки Качество Программирование (Аспектно-ориентированное Объектно-ориентированное Предметно-ориентированное) Agile Cleanroom CASE UP RUP OpenUP RAD Scrum SAFe Модель Spotify MSF XP DSDM Итеративная Каскадная Спиральная V-Model Dual Vee Model CMM CMMI Данных Function model[англ.] IDEF Информационная Метамодель Object model[англ.] View model[англ.] UML Кент Бек Гради Буч Фред Брукс Уорд Каннингем Оле-Йохан Даль Том Демарко Эдсгер Дейкстра Дональд Кнут Алан Кэй Мартин Фаулер Энтони Хоар Ивар Якобсон Бертран Мейер Никлаус Вирт Эдвард Йордан Стив Макконнелл Джеймс Рамбо Барри Боэм Уоттс Хамфри[англ.] Майкл А. Джексон[англ.] Крэг Ларман Роберт Мартин Джеймс Мартин[англ.] Дэвид Парнас[англ.] Уинстон Ройс Модель данных Реляционная
модель
алгебра
Нормальная форма
Ссылочная целостность
БД
СУБД модель алгебра Нормальная форма Ссылочная целостность БД СУБД Иерархическая модель Сетевая модель Объектно-ориентированная
БД
СУБД БД СУБД Объектно-реляционная СУБД Транзакция Журнализация
упреждающая упреждающая Секционирование Сегментирование Столбцовое хранение Схема Отношение Столбец
виртуальный виртуальный Строка Таблица Представление
материализованное материализованное Хранимая процедура Триггер Курсор Индекс Табличное пространство Первичный
суррогатный суррогатный Внешний Потенциальный Суперключ Язык запросов Оптимизатор запросов Планировщик запросов План выполнения запроса Кэш запросов ODBC ADO ADO.NET JDBC SELECT INSERT UPDATE DELETE MERGE CREATE ALTER DROP TRUNCATE COMMIT ROLLBACK SAVEPOINT Теоретические основы баз данных Модель данных Википедия:Ссылка на Викиучебник непосредственно в статье Страницы, использующие волшебные ссылки ISBN Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад العربية Azərbaycanca Català Deutsch Ελληνικά English Español فارسی Suomi Français Hrvatski Magyar Bahasa Indonesia Italiano 日本語 Қазақша 한국어 Монгол Bahasa Melayu Nederlands Norsk bokmål தமிழ் ไทย Українська 中文 Эта страница в последний раз была отредактирована 4 сентября 2023 в 17:03. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Жизненный цикл программного обеспечения (ПО) — период времени, который начинается с момента принятия решения о необходимости создания программного продукта и заканчивается в момент его полного изъятия из эксплуатации[1]. Частный случай жизненного цикла системы (в данном случае программной системы). Стандарт ГОСТ 34.601-90 предусматривал следующие стадии и этапы создания автоматизированной системы (АС): Эскизный, технический проекты и рабочая документация — это последовательное построение все более точных проектных решений. Допускается исключать стадию «Эскизный проект» и отдельные этапы работ на всех стадиях, объединять стадии «Технический проект» и «Рабочая документация» в «Технорабочий проект», параллельно выполнять различные этапы и работы, включать дополнительные. Федеральным агентством по техническому регулированию и метрологии РФ 01.03.2012 г. взамен ГОСТ Р ИСО/МЭК 12207-99 принят стандарт ГОСТ Р ИСО/МЭК 12207-2010 «Информационная технология. Системная и программная инженерия. Процессы жизненного цикла программных средств», идентичный международному стандарту ISO/IEC 12207:2008 «System and software engineering — Software life cycle processes». Данный стандарт, используя устоявшуюся терминологию, устанавливает общую структуру процессов жизненного цикла программных средств, на которую можно ориентироваться в программной индустрии. Стандарт определяет процессы, виды деятельности и задачи, которые используются при приобретении программного продукта или услуги, а также при поставке, разработке, применении по назначению, сопровождении и прекращении применения программных продуктов. Стандарт группирует различные виды деятельности, которые могут выполняться в течение жизненного цикла программных систем, в семь групп процессов. Каждый из процессов жизненного цикла в пределах этих групп описывается в терминах цели и желаемых выходов, списков действий и задач, которые необходимо выполнять для достижения этих результатов. Каждый процесс включает ряд действий. Например, процесс приобретения охватывает следующие действия: Каждое действие включает ряд задач. Например, подготовка заявочных предложений должна предусматривать: Модель жизненного цикла ПО — структура, определяющая последовательность выполнения и взаимосвязи процессов, действий и задач на протяжении жизненного цикла. Модель жизненного цикла зависит от специфики, масштаба и сложности проекта и специфики условий, в которых система создается и функционирует. Стандарт ГОСТ Р ИСО/МЭК 12207-2010 не предлагает конкретную модель жизненного цикла. Его положения являются общими для любых моделей жизненного цикла, методов и технологий создания ИС. Он описывает структуру процессов жизненного цикла, не конкретизируя, как реализовать или выполнить действия и задачи, включенные в эти процессы. Модель ЖЦ ПО включает в себя: Стадия — часть процесса создания ПО, ограниченная определёнными временными рамками и заканчивающаяся выпуском конкретного продукта (моделей, программных компонентов, документации), определяемого заданными для данной стадии требованиями. На каждой стадии могут выполняться несколько процессов, определённых в стандарте ГОСТ Р ИСО/МЭК 12207-2010, и наоборот, один и тот же процесс может выполняться на различных стадиях. Соотношение между процессами и стадиями также определяется используемой моделью жизненного цикла ПО. 1 Стандарты жизненного цикла ПО 2 Стандарт ГОСТ 34.601-90 3 Стандарт ГОСТ Р ИСО/МЭК 12207 (ISO/IEC 12207) 4 Процессы жизненного цикла ПО 5 Стадии жизненного цикла ПО, взаимосвязь между процессами и стадиями 6 См. также 7 Примечания 8 Литература 9 Ссылки ГОСТ 34.601-90 ISO/IEC 15288:2015 Systems and software engineering — System life cycle processes ISO/IEC/IEEE 12207:2017 System and software engineering — Software life cycle processes Формирование требований к АС
Обследование объекта и обоснование необходимости создания АС
Формирование требований пользователя к АС
Оформление отчета о выполнении работ и заявки на разработку АС Обследование объекта и обоснование необходимости создания АС Формирование требований пользователя к АС Оформление отчета о выполнении работ и заявки на разработку АС Разработка концепции АС
Изучение объекта
Проведение необходимых научно-исследовательских работ
Разработка вариантов концепции АС и выбор варианта концепции АС, удовлетворяющего требованиям пользователей
Оформление отчета о проделанной работе Изучение объекта Проведение необходимых научно-исследовательских работ Разработка вариантов концепции АС и выбор варианта концепции АС, удовлетворяющего требованиям пользователей Оформление отчета о проделанной работе Техническое задание
Разработка и утверждение технического задания на создание АС Разработка и утверждение технического задания на создание АС Эскизный проект
Разработка предварительных проектных решений по системе и её частям
Разработка документации на АС и её части Разработка предварительных проектных решений по системе и её частям Разработка документации на АС и её части Технический проект
Разработка проектных решений по системе и её частям
Разработка документации на АС и её части
Разработка и оформление документации на поставку комплектующих изделий
Разработка заданий на проектирование в смежных частях проекта Разработка проектных решений по системе и её частям Разработка документации на АС и её части Разработка и оформление документации на поставку комплектующих изделий Разработка заданий на проектирование в смежных частях проекта Рабочая документация
Разработка рабочей документации на АС и её части
Разработка и адаптация программ Разработка рабочей документации на АС и её части Разработка и адаптация программ Ввод в действие
Подготовка объекта автоматизации
Подготовка персонала
Комплектация АС поставляемыми изделиями (программными и техническими средствами, программно-техническими комплексами, информационными изделиями)
Строительно-монтажные работы
Пусконаладочные работы
Проведение предварительных испытаний
Проведение опытной эксплуатации
Проведение приёмочных испытаний Подготовка объекта автоматизации Подготовка персонала Комплектация АС поставляемыми изделиями (программными и техническими средствами, программно-техническими комплексами, информационными изделиями) Строительно-монтажные работы Пусконаладочные работы Проведение предварительных испытаний Проведение опытной эксплуатации Проведение приёмочных испытаний Тестирование АС. Сопровождение АС.
Выполнение работ в соответствии с гарантийными обязательствами
Послегарантийное обслуживание Выполнение работ в соответствии с гарантийными обязательствами Послегарантийное обслуживание процессы соглашения — два процесса; процессы организационного обеспечения проекта — пять процессов; процессы проекта — семь процессов; технические процессы — одиннадцать процессов; процессы реализации программных средств — семь процессов; процессы поддержки программных средств — восемь процессов; процессы повторного применения программных средств — три процесса. Основные:
Приобретение (действия и задачи заказчика, приобретающего ПО)
Поставка (действия и задачи поставщика, который снабжает заказчика программным продуктом или услугой)
Разработка (действия и задачи, выполняемые разработчиком: создание ПО, оформление проектной и эксплуатационной документации, подготовка тестовых и учебных материалов и т. д.)
Эксплуатация (действия и задачи оператора — организации, эксплуатирующей систему)
Сопровождение (действия и задачи, выполняемые сопровождающей организацией, то есть службой сопровождения). Сопровождение — внесение изменений в ПО в целях исправления ошибок, повышения производительности или адаптации к изменившимся условиям работы или требованиям. Приобретение (действия и задачи заказчика, приобретающего ПО) Поставка (действия и задачи поставщика, который снабжает заказчика программным продуктом или услугой) Разработка (действия и задачи, выполняемые разработчиком: создание ПО, оформление проектной и эксплуатационной документации, подготовка тестовых и учебных материалов и т. д.) Эксплуатация (действия и задачи оператора — организации, эксплуатирующей систему) Сопровождение (действия и задачи, выполняемые сопровождающей организацией, то есть службой сопровождения). Сопровождение — внесение изменений в ПО в целях исправления ошибок, повышения производительности или адаптации к изменившимся условиям работы или требованиям. Вспомогательные
Документирование (формализованное описание информации, созданной в течение ЖЦ ПО)
Управление конфигурацией (применение административных и технических процедур на всем протяжении ЖЦ ПО для определения состояния компонентов ПО, управления его модификациями).
Обеспечение качества (обеспечение гарантий того, что ИС и процессы её ЖЦ соответствуют заданным требованиям и утверждённым планам)
Верификация (определение того, что программные продукты, являющиеся результатами некоторого действия, полностью удовлетворяют требованиям или условиям, обусловленным предшествующими действиями)
Аттестация (определение полноты соответствия заданных требований и созданной системы их конкретному функциональному назначению)
Совместная оценка (оценка состояния работ по проекту: контроль планирования и управления ресурсами, персоналом, аппаратурой, инструментальными средствами)
Аудит (определение соответствия требованиям, планам и условиям договора)
Разрешение проблем (анализ и решение проблем, независимо от их происхождения или источника, которые обнаружены в ходе разработки, эксплуатации, сопровождения или других процессов) Документирование (формализованное описание информации, созданной в течение ЖЦ ПО) Управление конфигурацией (применение административных и технических процедур на всем протяжении ЖЦ ПО для определения состояния компонентов ПО, управления его модификациями). Обеспечение качества (обеспечение гарантий того, что ИС и процессы её ЖЦ соответствуют заданным требованиям и утверждённым планам) Верификация (определение того, что программные продукты, являющиеся результатами некоторого действия, полностью удовлетворяют требованиям или условиям, обусловленным предшествующими действиями) Аттестация (определение полноты соответствия заданных требований и созданной системы их конкретному функциональному назначению) Совместная оценка (оценка состояния работ по проекту: контроль планирования и управления ресурсами, персоналом, аппаратурой, инструментальными средствами) Аудит (определение соответствия требованиям, планам и условиям договора) Разрешение проблем (анализ и решение проблем, независимо от их происхождения или источника, которые обнаружены в ходе разработки, эксплуатации, сопровождения или других процессов) Организационные
Управление (действия и задачи, которые могут выполняться любой стороной, управляющей своими процессами)
Создание инфраструктуры (выбор и сопровождение технологии, стандартов и инструментальных средств, выбор и установка аппаратных и программных средств, используемых для разработки, эксплуатации или сопровождения ПО)
Усовершенствование (оценка, измерение, контроль и усовершенствование процессов ЖЦ)
Обучение (первоначальное обучение и последующее постоянное повышение квалификации персонала) Управление (действия и задачи, которые могут выполняться любой стороной, управляющей своими процессами) Создание инфраструктуры (выбор и сопровождение технологии, стандартов и инструментальных средств, выбор и установка аппаратных и программных средств, используемых для разработки, эксплуатации или сопровождения ПО) Усовершенствование (оценка, измерение, контроль и усовершенствование процессов ЖЦ) Обучение (первоначальное обучение и последующее постоянное повышение квалификации персонала) Инициирование приобретения Подготовка заявочных предложений Подготовка и корректировка договора Надзор за деятельностью поставщика Приёмка и завершение работ Формирование требований к системе Формирование списка программных продуктов Установление условий и соглашений Описание технических ограничений (среда функционирования системы и т. д.) Стадии; Результаты выполнения работ на каждой стадии; Ключевые события — точки завершения работ и принятия решений. Версия программного обеспечения ↑ Стандарт IEEE Std 610.12, Глоссарий Братищенко В.В. Проектирование информационных систем. — Иркутск: Изд-во БГУЭП, 2004. — 84 с. Вендров А.М. Проектирование программного обеспечения экономических информационных систем. — М.: Финансы и статистика, 2000. Грекул В.И., Денищенко Г.Н., Коровкина Н.Л. Проектирование информационных систем. — М.: Интернет-университет информационных технологий - ИНТУИТ.ру, 2005. Мишенин А.И. Теория экономических информационных систем. — М.: Финансы и статистика, 2000. — 240 с. Зараменских Е. П. (2014) Управление жизненным циклом информационных систем. Новосибирск : СИБПРИНТ (недоступная ссылка) Грекул В. И., Денищенко Г. Н., Коровкина Н. Л. (2005). Курс лекций «Проектирование ИС» М.: Интернет-университет информационных технологий Коровкина Н. Л., Куприянов Ю. В., Грекул В. И. (2010) Методические основы управления ИТ-проектами. М. : Национальный открытый университет «ИНТУИТ», 2010 Wissenschaftliche Kommission Wirtschaftsinformatik im Verband der Hochschulleh- rer für Betriebswirtschaft, (2007) Rahmenempfehlung für die Universitätsausbildung in Wirt- schaftsinformatik. Wirtschaftsinformatik. 49 (2007) 4, S. 318—325. Информационные системы Разработка программного обеспечения Технологии организации программирования Википедия:Статьи с нерабочими ссылками Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Текущая версия Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад العربية Català Čeština Dansk English Esperanto فارسی Français हिन्दी Magyar Bahasa Indonesia 日本語 한국어 Nederlands Norsk bokmål Português Svenska தமிழ் ไทย Українська Tiếng Việt 中文 Эта страница в последний раз была отредактирована 17 декабря 2023 в 10:05. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Жизненный цикл успешной компьютерной программы может быть очень долгим; изменения в программе бывают разными — от исправления ошибки до полного переписывания. В большинстве случаев название программы остаётся тем же, изменяется подназвание — так называемая версия. Версия программы может быть целым числом (Corel Draw 11), последовательностью чисел (JDK 1.0.3), годом (Windows 2000) или текстом (Embarcadero Delphi XE). В любом случае, система версионирования выбирается по нескольким критериям: Иногда присутствие человеческого фактора в создании номеров версий приводит к ошибкам в изменении версий. Например, разработчики могут изменить номер версии, даже если ни одна строчка кода не была переписана, чтобы создать ложное впечатление, что были внесены значительные изменения. Изначально программы нумеровались числами 1, 2, 3 и т. д. — аналогично изданиям книг. Также последовательные номера могут быть основаны на каком-то техническом счётчике (например, номер версии в системе управления версиями). Ныне последовательными номерами обозначают редко выпускаемые программы, которые выходят уже стабильными. Например, Corel Draw 11, Windows 10. У таких программ мелкие сервисные изменения обычно «заметаются под ковёр», не изменяя видимой версии (меняя лишь техническую, доступную, например, из меню «О программе»). Крупные изменения с новой функциональностью, но не тянущие на новый продукт, как правило, обозначают десятичной дробью (Windows 8.1). Исторически первый способ нумерации, разделяющий малые и серьёзные изменения. Номер версии является десятичной дробью в американском формате (через точку). Например, первая версия получает номер 1.0, следующая за ней — 1.1, с небольшим изменением — 1.11, создаётся новый продукт с новой функциональностью — 2.0. Чем сильнее увеличивается дробь, тем более значимо изменение. Разработчики порой перескакивают, например, от версии 2.0 сразу к 2.5, чтобы обозначить добавление нескольких значимых функций в программу, но их недостаточно, чтобы изменить главный номер версии (Turbo Pascal 5.0 → 5.5). Для предварительных, неофициальных версий применяют числа меньше 1: скажем, 0.1 или 0.9. Сравнение версий идёт по правилам десятичных дробей: 0.9 < 1.0 < 1.01 < 1.1 = 1.10 < 1.11 < 1.2 = 1.20 < 2.0 < 2.5. Этот способ принят, например, в Windows API. Версия состоит из нескольких чисел (как правило, трёх), разделённых точкой: например, 1.5.2. Первое из них — старшая версия (major), второе — младшая (minor), третья — мелкие изменения (maintenance, micro). При увеличении одного из чисел все идущие после него сбрасываются до нуля: 1.0.0, 1.0.1, 1.0.2, 1.1.0, 1.2.0, 1.2.1, 2.0.0… Последний ноль может опускаться: 1.0.0 = 1.0. Библиотеки Unix используют схему версионирования current.revision.age. Current — текущий номер API, revision — счётчик версий в пределах одного API, age — разница между последней и первой версиями поддерживаемого API[1]. Для определения старшинства версий сравнивают сначала старшие версии, потом младшие, потом микро- как целые числа: 1.1.0 = 1.1 < 1.1.2 < 1.10.0 = 1.10 < 1.11.0 < 1.20.0 < 1.100.0 < 1.100.1 < 2.0.0. Иногда четвёртым числом идёт номер сборки со сквозной нумерацией. Эта цифра может увеличиваться на единицу с каждым выпуском (1.0.0.1 < 1.0.1.2 < 1.0.2.3 < 1.1.0.4), либо браться из какого-нибудь технического счётчика (компиляций, ночных сборок, версий кода в системе контроля версий — например, 1.5.2.7682). В Microsoft Office четвёртым числом закодирована дата выпуска[2]. Опять-таки, 1.0 считается первой официальной версией; 0.1 или 0.9 — предварительными выпусками. Иногда вместо третьего числа применяется буква. Так, когда в DotA 6.42 нашли ошибку, новой версии дали название 6.42b. Это значит: игра остаётся той же, с тем же расположением препятствий и тем же балансом, но с исправленной ошибкой. Дальнейшие исправления ошибок именуются 6.42c, 6.42d и т. д. Аналогично нумеруются версии tz database: 2010a, 2010b, 2010c и далее. Если разработчику приходится полагаться на внештатных тестировщиков, в версии может указываться уровень зрелости программы: альфа-версия, бета-версия, выпуск-кандидат, окончательный выпуск, исправление ошибок (service release). Например, 2.0 alpha1 < 2.0 alpha2 < 2.0 beta < 2.0 rc1 < 2.0 < 2.0 sr1. Существуют разные схемы обозначения стадий разработки. Например, третье число может означать: Например: Внутри компании также может указываться стадия разработки (например, 1.2.3 < 1.2.3r9 < 1.2.4), в то время как в официальных выпусках такого нет — например, чтобы исключить путаницу среди тестеров или выдать клиенту какую-то версию — возможно, нестабильную, но исправляющую его ошибку. Между сериями 1.0 и 2.6.x ядро Linux использовало нечётные номера для бета-версий, и чётные — для стабильных. Например, Linux 2.3 был серией в разработке, а Linux 2.4 — серией стабильных выпусков, в которую перерос Linux 2.3. В номере выпуска Linux kernel сначала писался номер второстепенной версии, а затем номер выпуска в возрастающем порядке. Например Linux 2.4.0 → Linux 2.4.22. После выпуска 2.6 в 2004 году Linux больше не использует эту систему, теперь цикл выпуска намного короче. Сейчас они просто увеличивают третье число, используя при необходимости четвёртое. Такая же система «чёт-нечет» используется некоторыми другими продуктами с длинным циклом разработки, такими как GNOME. Чаще всего применяется ПО с долгой историей и редко выходящими версиями (Windows Vista). Если счётчик версий зашёл слишком далеко и надо его сбросить, также используются алфавитные коды: Adobe Photoshop 7.0 < CS < CS2 < … < CS6 < CC < CC 2014. Иногда в дополнение к обычной версии используется алфавитно-цифровое подназвание: Ubuntu 9.04 Jaunty Jackalope, Embarcadero Delphi 10.2 Tokyo. Год выпуска применяется чаще всего в ПО с редко выходящими версиями, например: Windows Server 2003, Microsoft Office 2014. Разработчики проекта Wine также сначала использовали даты при нумерации версий, они указывали год, месяц и день выпуска: «Wine 20040505». Сейчас Wine использует «стандартную» нумерацию выпусков, последняя версия 2010 года имеет номер 1.2. Компания Ubuntu Linux использует похожую схему нумерации, например, выпуск октября 2010 года пронумерован как Ubuntu 10.10. Аналогичная схема на текущий период используется компанией Microsoft для нумерации обновлений Windows 10, хотя у них номер версии обычно на 1 меньше номера месяца, например, Fall Creators Update (1709) вышел 17 октября 2017 года, а April 2018 Update (1803) несмотря на номер «03» в названии вышло в апреле 2018. При использовании дат в нумерации версий следует использовать схему ISO «год-месяц-день» (это упрощает сравнение версий на старшинство), причём дефис можно опускать. Часто программа имеет как торговое название, так и внутреннюю версию, составленную по всем правилам. Например, Java SE 5.0 имеет внутреннюю версию 1.5.0, Windows 7 — версию 6.1[3]. Различные сборки файлов Windows могут называться, например, 6.1.7600.16385. Подобные технические версии сравнивают с солдатским жетоном[2]. Как и на поле боя, они нужны в экстренных случаях — когда программа работает не так и нужно связаться с разработчиком. Дональд Кнут нумерует версии системы компьютерной вёрстки ΤΕΧ последовательными приближениями числа 



π


{\displaystyle \pi }

: 3.0 < 3.1 < 3.14 и т. д. Номер последнего стабильного выпуска — 3.141592653. Версии другого детища Дональда Кнута языка METAFONT нумеруются приближениями к числу e. Версия за март 2008 года имела номер 2.718281. SuSE Linux начал счёт версий с 4.2, как отсылка на известную книгу Дугласа Адамса. Коммерческие программы, как правило, начинают нумеровать свои версии с 1.0. Считается даже, что версия 1.0 исключительно сыра и поэтому нужно как можно быстрее дойти до 1.2 или даже до 2.0. В бесплатных и свободных программах 1.0 считается моментом, когда программа признана готовой к широкому применению неспециалистами. При этом первоначальные версии программы нумеруются как 0.1, 0.2 и т. д. FreeDOS пришёл к версии 1.0 в 2006 году — когда DOS уже практически нигде не использовался. Эмулятор игровых автоматов MAME никогда не дойдёт до версии 1.0, поскольку история игровых автоматов продолжается и поныне. Коммерческому ПО, чтобы название лучше смотрелось, приходится подключать маркетологов. Например, в странах Азии распространена тетрафобия, поэтому в номерах версий избегают цифры 4. В Европе число 13 считается несчастливым, его или пропускают, или заменяют на X3. Если история программы очень длинна, её иногда приходится сбрасывать: Adobe Photoshop 7.0 < 8.0 < CS < CS2. Одной из причин того, что не было Winamp 4, стал каламбур: Winamp 4 skin и англ. foreskin — «крайняя плоть»[4]. Иногда разработчик пропускает номер версии, чтобы не отставать от конкурентов или других продуктов той же компании: например, Microsoft Access перепрыгнул сразу от 2.0 к 7.0. Netscape Communicator пропустил пятую версию, так как Internet Explorer добрался уже до 6.0; к тому же версию 5.0 в User-Agent’ах застолбили тестовые выпуски браузера Mozilla Suite. В Sun Solaris отбросили первую цифру: 2.8 и 2.9 в маркетинговых материалах именовались 8 и 9; Java SE 1.5.0 и 1.6.0 — как Java 5 и 6. Slackware Linux в 1999 году прыгнул от версии 4 сразу к 7. Microsoft Windows 10 выходит после 8.1. PHP перескакивает от 5 к 7, причиной объявлено то, что версия 6 оказалась распиаренной, но нереализуемой, и многие из её нововведений были присоединены к 5-й ветке[5]. Часто нужно программно определять, какая из двух версий старше — например, «пузыри» поддерживаются в Windows начиная с 2000[6], а в более ранних версиях надо поступать другими способами. Такая проверка делается по довольно сложным правилам: например, если версия — десятичная дробь, сначала требуется сравнить целые части как числа; если они равны, то дробные — как строки. Если версия — тройка или четвёрка чисел, то сравнивают числа по одному, пока не будет зафиксировано неравенство. Поскольку чрезмерно сложные алгоритмы чреваты ошибками[7], а модульные тесты писать не всегда есть время, часто обходятся упрощёнными вариантами: например, строят с помощью битовых полей длинное число (1.2.3.4 → 0102030416); либо сравнивают версии как строки в лексикографическом порядке. Первое не сработает, если одно из чисел перейдёт за 256 (1.0.257 < 1.1.0, но 01010116 > 01010016), второе — если выйдет версия 10 (9.5 < 10.0, но «9.5» > «10.0»). Иногда подобные упрощения играют злую шутку: в первые годы популярности Windows выяснилось, что множество программ некорректно проверяло версию ОС, отказываясь работать под 4.0. Поэтому Windows 95 и Windows 98 имели внутренние версии 3.95 и 3.98[8]. Похожие ухищрения применялись в User-Agent’е браузера Opera при переходе с версии 9.64 на 10.00. Это вызвано тем, что некоторые сайты, реагирующие на User-Agent, либо сравнивали номера как строки (10.0 < 9.5), либо брали первую цифру (10.0 = 1.0)[9]. Разработчикам пришлось использовать запись Opera/9.80 вместо Opera/10.00, а настоящий номер версии добавить в конце UserAgent’а[10]. Планировалось, что к 11-й версии UserAgent примет привычный вид, однако это ухищрение использовалось вплоть до перехода на движок Blink (начало 2013 — при том, что переход на 10-ю версию произошёл ещё в 2009 году). В PHP имеется специальная функция version_compare() для определения старшинства версий[11]. Поддержка той или иной системы со стороны ПО для разработки (компилятора, системы контроля версий и т. д.). Частота выхода новых версий и их «сырость». Сложная программа, выпускаемая раз в несколько лет и перед выпуском проходящая всеобъемлющее тестирование, может именоваться как «Microsoft Word 97 SP2», в то время как в программе с частыми малостабильными выпусками приходится вводить более сложную нумерацию. Степень совместимости сетевых протоколов, документов или надстроек сторонних разработчиков — например, «старшая» версия увеличивается с каждым изменением ABI или API. Маркетинговые соображения. 1 Схемы нумерации

1.1 Последовательные номера
1.2 Десятичная дробь
1.3 Последовательность чисел
1.4 Буква в качестве младшей версии
1.5 Указание стадии разработки
1.6 Алфавитно-цифровое название
1.7 Дата
1.8 Внутренние версии
1.9 Экзотические схемы 1.1 Последовательные номера 1.2 Десятичная дробь 1.3 Последовательность чисел 1.4 Буква в качестве младшей версии 1.5 Указание стадии разработки 1.6 Алфавитно-цифровое название 1.7 Дата 1.8 Внутренние версии 1.9 Экзотические схемы 2 Значение номеров версий

2.1 Версия 1.0 как ключевой этап разработки
2.2 Маркетинг, суеверия и ОКР
2.3 Пропуски в версиях 2.1 Версия 1.0 как ключевой этап разработки 2.2 Маркетинг, суеверия и ОКР 2.3 Пропуски в версиях 3 Алгоритмы определения старшинства версий 4 Применение схем нумерации ПО в других сферах культуры 5 См. также 6 Примечания 7 Ссылки 0 — альфа 1 — бета 2 — выпуск-кандидат 3 — публичный выпуск 1.2.0.1 вместо 1.2-a 1.2.1.2 вместо 1.2-b2 (бета с несколькими исправленными ошибками) 1.2.2.3 вместо 1.2-rc3 (выпуск-кандидат) 1.2.3.0 вместо 1.2-r (для коммерческого распространения) 1.2.3.5 вместо 1.2-r5 (для коммерческого распространения со многими исправленными ошибками) Dungeons & Dragons 3.5 Крепкий орешек 4.0 Evangelion 2.0 Трон 2.0 Веб 2.0 Версия 1.0 Наука 2.0 Система управления версиями Стадии разработки программного обеспечения ↑ Versioning  (неопр.). Дата обращения: 17 ноября 2017. Архивировано 27 сентября 2019 года. ↑ 1 2 What's In a Version Number, Anyway?  (неопр.) Дата обращения: 18 ноября 2017. Архивировано 1 декабря 2017 года. ↑ Вопросы и ответы по развертыванию Windows 7  (неопр.). Дата обращения: 29 октября 2017. Архивировано 1 декабря 2017 года. ↑ FAQ — Winamp Help  (неопр.). Дата обращения: 6 мая 2011. Архивировано из оригинала 19 декабря 2013 года. ↑ Следующая версия PHP будет называться PHP 7 / Хабрахабр  (неопр.). Дата обращения: 20 мая 2015. Архивировано 20 мая 2015 года. ↑ Структура NOTIFYICONDATA на MSDN  (неопр.). Дата обращения: 7 мая 2011. Архивировано 12 июня 2011 года. ↑ Разбор функции CheckWin32Version на Embarcadero Quality Central  (неопр.). Дата обращения: 7 мая 2011. Архивировано из оригинала 29 июля 2013 года. ↑ Некорректные проверки номеров версий  (неопр.). Дата обращения: 6 мая 2011. Архивировано 16 января 2013 года. ↑ Andreas Bovens. Changes in Opera’s user agent string format (англ.) (27 мая 2009). — Описание мотивов изменений в формате AserAgent-а. Дата обращения: 18 июня 2011. Архивировано из оригинала 22 февраля 2012 года. ↑ Например: Opera/9.80 (Windows NT 6.1; U; ru) Presto/2.8.131 Version/11.11 ↑ version_compare()  (неопр.). Дата обращения: 17 ноября 2013. Архивировано 23 апреля 2014 года. Спецификация семантического версионирования Архивная копия от 2 октября 2014 на Wayback Machine (SemVer) Стадии разработки Анализ требований Проектирование Программирование Тестирование Документирование Архитектура ПО Парадигма Методология Процесс разработки Качество Программирование (Аспектно-ориентированное Объектно-ориентированное Предметно-ориентированное) Agile Cleanroom CASE UP RUP OpenUP RAD Scrum SAFe Модель Spotify MSF XP DSDM Итеративная Каскадная Спиральная V-Model Dual Vee Model CMM CMMI Данных Function model[англ.] IDEF Информационная Метамодель Object model[англ.] View model[англ.] UML Кент Бек Гради Буч Фред Брукс Уорд Каннингем Оле-Йохан Даль Том Демарко Эдсгер Дейкстра Дональд Кнут Алан Кэй Мартин Фаулер Энтони Хоар Ивар Якобсон Бертран Мейер Никлаус Вирт Эдвард Йордан Стив Макконнелл Джеймс Рамбо Барри Боэм Уоттс Хамфри[англ.] Майкл А. Джексон[англ.] Крэг Ларман Роберт Мартин Джеймс Мартин[англ.] Дэвид Парнас[англ.] Уинстон Ройс Программное обеспечение Разработка программного обеспечения Системы управления версиями Технологии и инструменты маркетинга Википедия:Cite web (не указан язык) Википедия:Cite web (заменить webcitation-архив: deadlink yes) Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Текущая версия Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад العربية Boarisch Čeština Deutsch English Español فارسی עברית Italiano 日本語 한국어 မြန်မာဘာသာ Nederlands Norsk bokmål Português Simple English Türkçe Українська 中文 Эта страница в последний раз была отредактирована 11 мая 2024 в 12:14. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Програ́ммное обеспе́чение[1][2][3] (допустимо также произношение обеспече́ние[3][4][5][6]) (ПО) — программа или множество программ, используемых для управления компьютером (ISO/IEC 26514:2008)[7]. Имеются и другие определения из международных и российских стандартов: Программное обеспечение является одним из видов обеспечения автоматизированной системы, наряду с техническим (аппаратным), математическим, информационным, лингвистическим, организационным, методическим и правовым обеспечением[13]. Академические области, изучающие программное обеспечение, — это информатика и программная инженерия. В компьютерном сленге часто используется слово «софт», произошедшее от английского слова «software», которое в этом смысле впервые применил в статье журнала American Mathematical Monthly математик из Принстонского университета Джон Тьюки в 1958 году[14]. Первую программу написала Ада Лавлейс для разностной машины Чарльза Бэббиджа, однако поскольку эта машина так и не была достроена, разработки леди Лавлейс остались чисто теоретическими[15]. Первая теория, касающаяся программного обеспечения, была предложена английским математиком Аланом Тьюрингом в 1936 году в эссе «On computable numbers with an application to the Entscheidungsproblem» («О вычислимых числах с приложением к проблеме разрешения»)[16][17][18]. Он создал так называемую машину Тьюринга, математическую модель абстрактной машины, способной выполнять последовательности рудиментарных операций, которые переводят машину из одного фиксированного состояния в другое. Главная идея заключалась в математическом доказательстве факта, что любое наперёд заданное состояние системы может быть всегда достигнуто последовательным выполнением конечного набора элементарных команд (программы) из фиксированного набора команд. Первые электронно-вычислительные машины 1940—1950-х годов перепрограммировались путём переключения тумблеров и переподключения кабелей, что требовало глубокого понимания их внутреннего устройства. К таким машинам, в частности, относился ENIAC (который, впрочем, впоследствии модифицировали, чтобы он мог, по крайней мере частично, программироваться с помощью перфокарт)[19]. Важным шагом в сторону современных компьютеров был переход к архитектуре Джона фон Неймана, впервые воплощённой в Великобритании, в разработанном под руководством Дж. Р. Уомерзли[англ.] и при участии Алана Тьюринга компьютере, известном как Марк I. Первая программа, хранимая в памяти компьютера, была запущена на нём 21 июня 1941 года. Для облегчения программирования этой машины Тьюринг придумал систему сокращённого кодирования, в которой для представления двоичного машинного кода использовалась последовательность телетайпных символов, выводимых на перфоленту[20]. Один из сотрудников Тьюринга, Джон Мочли, став позднее (вместе с Джоном Преспером Эккертом) руководителем и основателем компании Eckert–Mauchly Computer Corporation, разработавшей такие ЭВМ, как BINAC и UNIVAC, поручил своим сотрудникам создать транслятор алгебраических формул. Хотя эта амбициозная цель в 1940-х годах и не была достигнута, под руководством Мочли был разработан так называемый «Краткий код», в котором операции и переменные кодировались двухсимвольными сочетаниями. Краткий код был реализован с помощью интерпретатора[21]. Грейс Хоппер, работая с начала 1950-х годов над набором математических подпрограмм для UNIVAC I, изобрела программу-компоновщик «A-0[англ.]», которая по заданному идентификатору осуществляла выборку нужной подпрограммы из библиотеки, хранящейся на магнитной ленте, и записывала её в отведённое место оперативной памяти[22]. В 1950-е годы появились первые высокоуровневые языки программирования, Джон Бэкус разработал FORTRAN, а Грейс Хоппер — COBOL. Подобные разработки значительно упростили написание прикладного программного обеспечения, которое писала тогда каждая фирма, приобретающая вычислительную машину[23]. В начале 1950-х годов понятие программного обеспечения ещё не сложилось. Так не говорилось о нём ничего в вышедшей в январе 1952 года в журнале Fortune статье «Office Robots», описывавшем компьютеры Univac. Хотя в статье уже рассказывается о компьютере как об универсальном устройстве, процесс программирования в этой статье был анахронически описан как «переключение тумблеров»[24]. Однако к середине 50-х годов уже вполне сложилась разработка программного обеспечения на заказ[25], хотя сам термин «программное обеспечение» ещё не использовался, тогда говорили просто о «программировании на заказ» или «программистском обслуживании»[26]. Первой программной фирмой стала компания System Development Corporation, созданная в 1956 году на базе принадлежащей правительству США фирме RAND Corporation[27]. На этом этапе заказчиками программного обеспечения (уникального и не тиражируемого) были крупные корпорации и государственные структуры, и стоимость в один миллион долларов за программу не была чем-то необычным[28]. Сам термин «программное обеспечение» вошёл в широкий обиход с начала 1960-х годов, когда стало актуальным разграничение команд, управляющих компьютером, и его физических компонентов — аппаратного обеспечения[29]. Тогда же и началось становление индустрии программного обеспечения, как самостоятельной отрасли. Первой компанией по разработке ПО стала основанная в 1959 году Роем Наттом[англ.] и Флетчером Джоунсом[англ.] Computer Sciences Corporation[англ.] с начальным капиталом в 100 долларов. Первыми клиентами CSC и появившихся вслед за нею софтверных компаний были сверхкрупные корпорации и государственные организации, вроде NASA[30], и фирма продолжала работать на рынке заказного ПО, как и другие первые программистские частные стартапы, такие как Computer Usage Company[англ.] (CUC)[27]. Первыми самостоятельно выпущенными программными продуктами, не поставляемыми в комплекте с компьютерным оборудованием, были выпущенный фирмой Applied Data Research в 1965 году генератор компьютерной документации AUTOFLOW, автоматически рисующий блок-схемы, и транслятор языка программирования MARK-IV[англ.], разработанный в 1960—1967 годах в Informatics, Inc.[26][31] Становление рынка корпоративного программного обеспечения тесно связано с появлением семейства компьютеров IBM System/360. Достаточно массовые, относительно недорогие вычислительные машины, совместимые друг с другом на уровне программного кода, открыли дорогу тиражируемому программному обеспечению[32]. Постепенно круг заказчиков программного обеспечения расширялся, что стимулировало разработку новых видов программного обеспечения. Так появились первые фирмы, специализирующиеся на разработке систем автоматизированного проектирования[30]. В ноябре 1966 года журнал Business Week впервые обратился к теме индустрии программного обеспечения. Статья называлась «Software Gap — A Growing Crisis for Computers» и рассказывала как о перспективности этого бизнеса, так и о кризисе, связанном с нехваткой программистов[24]. Типичные программные продукты того времени служили для автоматизации общих для бизнеса задач, таких, как начисление заработной платы или автоматизации бизнес-процессов таких предприятий среднего бизнеса, как производственное предприятие или коммерческий банк. Стоимость такого ПО, как правило, была между пятью и ста тысячами долларов[26]. Появление в 1970-х годах первых персональных компьютеров (таких, как Альтаир 8800) создало предпосылки и для зарождения массового рынка программного обеспечения. Изначально программы для персональных компьютеров распространялись в «коробочной» форме через торговые центры или по почте и имели цену 100—500 долларов США[26]. Знаковыми для зарождающего массового рынка программного обеспечения стали такие продукты, как электронная таблица VisiCalc, идея которой пришла Дэниелу Бриклину, когда тот, будучи выпускником MIT и инженером-программистом в DEC, посещал курсы в Гарвардской школе бизнеса и хотел облегчить себе утомительные финансовые расчёты[33], и текстовый процессор WordStar[англ.], разработку которого начал Сеймур Рубинштейн[англ.], тщательно изучив потребности рынка[34]. О VisiCalc впервые заговорили, как о killer application, то есть компьютерном приложении, которое самим фактом своего существования доказывает нужность (и, зачастую, необходимость покупки) платформы, для которой реализована такая программа. Для VisiCalc и WordStar такой платформой стали персональные компьютеры, которые благодаря ним из богатой игрушки для гиков стали рабочим инструментом. С них началась микрокомпьютерная революция, а у этих программ появились конкуренты: электронные таблицы SuperCalc, Lotus 1-2-3, система управления базами данных dBase II, текстовый процессор WordPerfect и др.[35] Текстовые процессоры, электронные таблицы, системы управления базами данных, а также графические редакторы вскоре стали основными продуктами рынка программного обеспечения для персональных компьютеров[36]. Массовое тиражирование позволило снизить к середине 1990 годов стоимость программного обеспечения для персональных компьютеров до ста — пятисот долларов[26], при этом бизнес производителей ПО приобрёл определённое сходство с бизнесом звукозаписывающих компаний[35]. Подходы к классификации ПО достаточно подробно формализованы в международном стандарте ISO/IEC 12182[37]. В частности, первая версия стандарта предусматривала 16 критериев классификации программных средств: Примерами классов функции ПС являются: Примерами классов прикладной области являются: Примерами классов масштаба ПС являются: Примерами классов критичности являются: Примерами классов пользователя являются: Примерами классов стабильности являются: По степени переносимости программы делят на По способу распространения и использования программы делят на По назначению программы делят на: По видам программы делят[38] на: Классификация программного обеспечения по сектору индустрии включает несколько подходов. В целом, программное обеспечение делят на заказное, то есть создаваемое для конкретного заказчика, и продуктовое, то есть создаваемое для продажи на рынке. В свою очередь, по типам потребителя ПО делят на Business-to-Business (B2B), то есть для предприятий и организаций, и Business-to-Consumer (B2C), то есть для частных лиц[39]. Одним из вариантов классификации по сектору индустрии является деление на ПО для корпоративного заказчика (англ. enterprise software vendors), ПО для массового потребителя (англ. mass-market software vendors) и ИТ-сервисы[40]. Другой подход состоит в делении индустрии ПО на три сектора: бизнес-продукты общего назначения (англ. Business Function Software), специализированные бизнес-продукты (англ. Industrial Business Software) и продукты для частной жизни (англ. Consumer Software). Бизнес-продукты общего назначения предназначены для поддержки функционирования предприятий и организаций и включают бухгалтерские системы, финансовые системы, системы кадрового учёта и т. п. Специализированные бизнес-продукты ориентированы на задачи конкретного типа бизнеса: геоинформационные системы, медицинские системы, логистические системы и т. п. Продукты для частной жизни включают антивирусное ПО и системы для информационной безопасности, различные полезные утилиты, образовательное ПО, мультимедийное ПО и т. п.[39] Комплекс программ, которые обеспечивают управление компонентами компьютерной системы, такими как процессор, оперативная память, устройства ввода-вывода, сетевое оборудование, выступая как «межслойный интерфейс», с одной стороны которого аппаратура, а с другой — приложения пользователя. В отличие от прикладного программного обеспечения, системное не решает конкретные практические задачи, а лишь обеспечивает работу других программ, предоставляя им сервисные функции, абстрагирующие детали аппаратной и микропрограммной реализации вычислительной системы, управляет аппаратными ресурсами вычислительной системы. Отнесение того или иного программного обеспечения к системному условно, и зависит от соглашений, используемых в конкретном контексте. Как правило, к системному программному обеспечению относятся операционные системы, утилиты, системы управления базами данных, широкий класс связующего программного обеспечения. Прикладное программное обеспечение — программа, предназначенная для выполнения определённых пользовательских задач и рассчитанная на непосредственное взаимодействие с пользователем. Пользователь получает программное обеспечение вместе с лицензией, которая предоставляет ему право использовать программный продукт при условии выполнения положений о лицензировании. Как правило, эти условия ограничивают возможности пользователя передавать программный продукт другим пользователям, изменять код. Часть программного обеспечения поставляется со свободной лицензией. Такие лицензии позволяют распространять программное обеспечение, а также модифицировать его. Часть программного обеспечения распространяется как бесплатное. Существует также условно бесплатное программное обеспечение. В этом случае обычно пользователь бесплатно получает демонстрационную версию программного продукта с несколько ограниченными возможностями на определённый испытательный период, а после его окончания обязан или приобрести продукт, или деинсталлировать его. Управление процессами Прерывания Управление памятью Оперирование файлами Управление драйверами Вычисления в сети Защита компьютера Ввод-вывод Оболочка совокупность программ системы обработки информации и программных документов[8], необходимых для эксплуатации этих программ (ГОСТ 19781-90[9]); все или часть программ, процедур, правил и соответствующей документации системы обработки информации (ISO/IEC 2382-1:1993)[10][11]; компьютерные программы, процедуры и, возможно, соответствующая документация и данные, относящиеся к функционированию компьютерной системы (IEEE Std 829—2008)[12]. 1 История

1.1 Предыстория. Зарождение программирования
1.2 Ранняя история. Корпоративное ПО
1.3 Персональные компьютеры и программное обеспечение для массового потребителя 1.1 Предыстория. Зарождение программирования 1.2 Ранняя история. Корпоративное ПО 1.3 Персональные компьютеры и программное обеспечение для массового потребителя 2 Классификация ПО

2.1 Системное программное обеспечение
2.2 Прикладное программное обеспечение 2.1 Системное программное обеспечение 2.2 Прикладное программное обеспечение 3 Лицензия 4 См. также 5 Примечания 6 Литература по режиму эксплуатации; по масштабу; по стабильности; по функции; по требованию защиты; по требованию надёжности; по требуемым рабочим характеристикам; по исходному языку; по прикладной области; по вычислительной системе и среде; по классу пользователя; по требованию к вычислительным ресурсам; по критичности; по готовности; по представлению данных; по использованию программных данных. обработка деловых сообщений; компиляция; научные вычисления; обработка текстов; медицинские системы; системы управления. наука; бытовые устройства; оборудование; аппаратура управления процессом; предпринимательство; система организации сети. малый; средний; большой. национальная безопасность; человеческая жизнь; социальный хаос или паника; организационная безопасность; частная собственность; секретность. начинающий; средний; специалист (эксперт); обычный; случайный; другая система программного обеспечения; технические средства. постоянное внесение изменений; дискретное внесение изменений; маловероятное внесение изменений. платформозависимые; кроссплатформенные. проприетарные; открытые; свободные. системные; прикладные. компонент — программа, рассматриваемая как единое целое, выполняющая законченную функцию и применяемая самостоятельно или в составе комплекса; комплекс — программа, состоящая из двух или более компонентов и (или) комплексов, выполняющих взаимосвязанные функции, и применяемая самостоятельно или в составе другого комплекса. Медиафайлы на Викискладе Программно-аппаратный комплекс Патенты и программное обеспечение Лицензия на программное обеспечение
Проприетарное программное обеспечение
Свободное программное обеспечение
Открытое программное обеспечение Проприетарное программное обеспечение Свободное программное обеспечение Открытое программное обеспечение Компьютерный язык
Язык программирования Язык программирования По области применения:
Связующее программное обеспечение Связующее программное обеспечение Программная инженерия
Жизненный цикл программного обеспечения Жизненный цикл программного обеспечения Раздутое программное обеспечение Software Asset Management ↑ Ожегов С. И. Словарь русского языка. — М.: Русский язык, 1986. — С. 364. ↑ Акцентологический словарь  (неопр.). Дата обращения: 26 мая 2007. Архивировано 3 апреля 2007 года. ↑ 1 2 Словари русского языка — Проверка слова «обеспечение» Архивная копия от 3 апреля 2018 на Wayback Machine Грамота.ру ↑ Резниченко И. Л. Орфоэпический словарь русского языка: Произношение. Ударение: Ок. 25 000 единиц / Резниченко И.Л. М.: ООО «Издательство Астрель»: ООО «Издательство АСТ», 2003. — 284 c. ↑ Издание орфографического словаря Ожегова 2007 года приводит единственный вариант — обеспече́ние. // Орфографический словарь русского языка / Под редакцией С. И. Ожегова. Локид-Пресс, 2007. 912 с. ISBN 5-320-00396-X. ↑ Издание словаря Розенталя 2006 и 2007 года тоже приводит единственный вариант — обеспече́ние // Д. Э. Розенталь. Русский язык. Справочник-практикум. Оникс, Мир и образование, 2007. ISBN 5-488-00712-1, 5-94666-332-1, 978-5-488-01360-5. ↑ ISO/IEC 26514:2008 Systems and Software Engineering — Requirements for designers and developers of user documentation ↑ Согласно ГОСТ 19.101-77 К программным относят документы, содержащие сведения, необходимые для разработки, изготовления, сопровождения и эксплуатации программ. ↑ ГОСТ 19781-90 Архивная копия от 10 февраля 2019 на Wayback Machine. Обеспечение систем обработки информации программное. Термины и определения ↑ Батоврин В. К., 2012. ↑ Система обработки информации — одна или большее число компьютерных систем и устройств, таких как офисное и коммуникационное оборудование, которые выполняют обработку информации //Стандарт ISO/IEC 2382-1 Архивная копия от 18 сентября 2012 на Wayback Machine ↑ IEEE Std 829—2008 IEEE Standard for Software and System Test Documentation ↑ ГОСТ 34.003-90 Информационная технология. Автоматизированные системы. Термины и определения ↑ "John Tukey, 85, Statistician; Coined the Word 'Software'". Obituaries. New York Times. 2000-07-28. ↑ Computer Languages, 1989, 1. Невидимый конструктор § Предвестники компьютерной эры, с. 11. ↑ Turing A. On Computable Numbers, with an Application to the Entscheidungsproblem (англ.) // Proceedings of the London Mathematical Society — London Mathematical Society, 1937. — Vol. s2-42, Iss. 1. — P. 230—265. — ISSN 0024-6115; 1460-244X; 0024-6115 — doi:10.1112/PLMS/S2-42.1.230 ↑ Turing A. M. On Computable Numbers, with an Application to the Entscheidungsproblem. A Correction (англ.) // Proceedings of the London Mathematical Society — London Mathematical Society, 1938. — Vol. s2-43, Iss. 6. — P. 544—546. — ISSN 0024-6115; 1460-244X; 0024-6115 — doi:10.1112/PLMS/S2-43.6.544 ↑ Hally, Mike. Electronic brains/Stories from the dawn of the computer age (англ.). — London: British Broadcasting Corporation and Granta Books, 2005. — P. 79. — ISBN 1-86207-663-4. ↑ Computer Languages, 1989, 1. Невидимый конструктор, с. 10—11. ↑ Computer Languages, 1989, 1. Невидимый конструктор, с. 14—16. ↑ Computer Languages, 1989, 1. Невидимый конструктор § Создание кодов, понятных человеку, с. 16. ↑ Computer Languages, 1989, 1. Невидимый конструктор § Шаг на благо программирования, с. 18—20. ↑ Computer Languages, 1989, 1. Невидимый конструктор § Шаг на благо программирования, с. 20. ↑ 1 2 Campbell-Kelly, 2003, 1. The Software Industry, p. 1. ↑ Campbell-Kelly, 2003, 1. The Software Industry § Periodization, Sectorization, and Capabilities, p. 3. ↑ 1 2 3 4 5 Campbell-Kelly, 2003, 1. The Software Industry § Periodization, Sectorization, and Capabilities, p. 4. ↑ 1 2 Campbell-Kelly, 2003, 1. The Software Industry § Software Contractors, p. 5. ↑ Campbell-Kelly, 2003, 1. The Software Industry § Periodization, Sectorization, and Capabilities, p. 3—4. ↑ Computer Languages, 1989, 1. Невидимый конструктор, с. 10. ↑ 1 2 Computer Languages, 1989, 3. Расцвет программного обеспечения § Производство программного обеспечения становится самостоятельной отраслью, с. 61. ↑ Campbell-Kelly, 2003, 4. Origins of the Software Products Industry § Pioneering in the Software Products Industry: Informatics Mark IV, p. 103—104. ↑ Campbell-Kelly, 2003, 1. The Software Industry § Corporate Software Products, p. 6. ↑ Computer Languages, 1989, 3. Расцвет программного обеспечения § Первые промышленные стандарты, p. 68—69. ↑ Computer Languages, 1989, 3. Расцвет программного обеспечения § Первые промышленные стандарты, p. 68. ↑ 1 2 Campbell-Kelly, 2003, 1. The Software Industry § Mass-Market Software Products, p. 7. ↑ Computer Languages, 1989, 3. Расцвет программного обеспечения § Четыре «рабочие лошадки», с. 75—84. ↑ ISO/IEC TR 12182:2015 Systems and software engineering — Framework for categorization of IT systems and software, and guide for applying it  (неопр.). Дата обращения: 4 марта 2018. Архивировано 4 марта 2018 года. ↑ ГОСТ 19.101-77 ↑ 1 2 Werder, Karl, Wang, Hua-Ying. Towards a Software Product Industry Classification Архивная копия от 13 апреля 2021 на Wayback Machine // New Trends in Software Methodologies, Tools and Techniques. H. Fujita, G. A. Papadopoulos, IOS Press, 2016. ISBN 978-1-61499-674-3. DOI: 10.3233/978-1-61499-674-3-27 ↑ Campbell-Kelly M., Garcia-Swartz, D. From Products to Services: The Software Industry in the Internet Era Архивная копия от 12 августа 2021 на Wayback Machine // The Business History Review, Vol. 81, No. 4 (Winter, 2007), pp. 735—764. DOI: 10.2307/25097422 ГОСТ Р ИСО/МЭК 12207-2010 Информационная технология. Системная и программная инженерия. Процессы жизненного цикла программных средств. Батоврин В. К. Толковый словарь по системной и программной инженерии. — М.: ДМК Пресс, 2012. — С. 280. — ISBN 978-5-94074-818-2. Брукс Ф. Мифический человеко-месяц или как создаются программные системы. — СПб.: Символ-Плюс, 1999. ДеМарко Т. Deadline. Роман об управлении проектами. — М.: Манн, Иванов и Фербер. — 2013. — 352 с. ISBN 978-5-91657-284-1 ДеМарко Т., Листер Т. Человеческий фактор. Успешные проекты и команды. — М.: Символ-Плюс. — 2014. — 288 с. ISBN 978-5-93286-217-9 Йордан Э. Путь камикадзе. Как разработчику программного обеспечения выжить в безнадёжном проекте. — М.: Лори, 2012. — 290 с. ISBN 978-5-85582-227-3 Соммервилл И. Инженерия программного обеспечения. — Издательство Вильямс, 2002. — 624 с. ISBN 5-8459-0330-0 Time-Life Books. Язык компьютера = Computer Languages. — М.: Мир, 1989. — Т. 2. — 240 с. — (Understanding Computers). — 100 000 экз. — ISBN 5-03-001148-X. Martin Campbell-Kelly. From Airline Reservations to Sonic the Hedgehog: A History of the Software Industry. — MIT Press, 2003. — 372 с. — (History of Computing). — ISBN 978-1422391761. Большая каталанская Большая российская (научно-образовательный портал) Итальянская Корейской культуры Ларусса Britannica (онлайн) De Agostini Treccani Universalis BNE: XX530960 BNF: 133183707 GND: 4055382-6 J9U: 987007545619305171 LCCN: sh85029534 NDL: 00684642 NKC: ph125823 Стадии разработки Анализ требований Проектирование Программирование Тестирование Документирование Архитектура ПО Парадигма Методология Процесс разработки Качество Программирование (Аспектно-ориентированное Объектно-ориентированное Предметно-ориентированное) Agile Cleanroom CASE UP RUP OpenUP RAD Scrum SAFe Модель Spotify MSF XP DSDM Итеративная Каскадная Спиральная V-Model Dual Vee Model CMM CMMI Данных Function model[англ.] IDEF Информационная Метамодель Object model[англ.] View model[англ.] UML Кент Бек Гради Буч Фред Брукс Уорд Каннингем Оле-Йохан Даль Том Демарко Эдсгер Дейкстра Дональд Кнут Алан Кэй Мартин Фаулер Энтони Хоар Ивар Якобсон Бертран Мейер Никлаус Вирт Эдвард Йордан Стив Макконнелл Джеймс Рамбо Барри Боэм Уоттс Хамфри[англ.] Майкл А. Джексон[англ.] Крэг Ларман Роберт Мартин Джеймс Мартин[англ.] Дэвид Парнас[англ.] Уинстон Ройс Свободное Свободное и открытое Бесплатное Открытое Проприетарное В общественном достоянии Бесплатное Freemium Условно-бесплатное
Adware
Demoware
Donationware
Nagware
Postcardware Adware Demoware Donationware Nagware Postcardware Коммерческое On-premises Предустановленное Бандл SaaS (Software on-demand) Software plus services Вредоносная программа
Черви
Троян
Spyware Черви Троян Spyware Лжеантивирус Vaporware Abandonware Активация продукта Shovelware Легализация ПО Произведение с недоступным правообладателем Программное обеспечение Википедия:Cite web (не указан язык) Страницы, использующие волшебные ссылки ISBN Статьи со ссылками на Викисклад Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Текущая версия Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад Викиновости Afrikaans Alemannisch Aragonés العربية الدارجة مصرى Asturianu Azərbaycanca تۆرکجه Башҡортса Žemaitėška Беларуская Беларуская (тарашкевіца) Български भोजपुरी Banjar ပအိုဝ်ႏဘာႏသာႏ বাংলা བོད་ཡིག Brezhoneg Bosanski Català 閩東語 / Mìng-dĕ̤ng-ngṳ̄ ᏣᎳᎩ کوردی Qırımtatarca Čeština Cymraeg Dansk Deutsch Ελληνικά English Esperanto Español Eesti Euskara فارسی Suomi Føroyskt Français Gaeilge Gàidhlig Galego گیلکی Hausa 客家語/Hak-kâ-ngî עברית हिन्दी Hrvatski Hornjoserbsce Magyar Հայերեն Interlingua Bahasa Indonesia Ilokano Ido Íslenska Italiano ᐃᓄᒃᑎᑐᑦ / inuktitut 日本語 Jawa Қазақша ಕನ್ನಡ 한국어 Kurdî Кыргызча Latina Lëtzebuergesch Ligure Lombard Lingála ລາວ Lietuvių Latviešu Malagasy Олык марий Македонски മലയാളം Монгол मराठी Bahasa Melayu Mirandés မြန်မာဘာသာ Plattdüütsch नेपाली नेपाल भाषा Nederlands Norsk nynorsk Norsk bokmål Occitan Oromoo ଓଡ଼ିଆ ਪੰਜਾਬੀ Polski پنجابی Português Runa Simi Română Русиньскый Саха тыла Sardu Sicilianu Scots Srpskohrvatski / српскохрватски සිංහල Simple English Slovenčina Slovenščina Soomaaliga Shqip Српски / srpski Svenska Kiswahili தமிழ் తెలుగు Тоҷикӣ ไทย Tagalog Türkçe Татарча / tatarça Українська اردو Oʻzbekcha / ўзбекча Vèneto Tiếng Việt Winaray 吴语 ייִדיש 中文 閩南語 / Bân-lâm-gú 粵語 Эта страница в последний раз была отредактирована 26 мая 2024 в 13:36. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Систе́мное программное обеспечение — программы, решающие задачи общевычислительного характера — вы­де­ле­ния и разделения ресурсов, доступа к устройствам, обеспечивающие среды для разработки, запуска и выполнения других про­грамм. Системное программирование — создание системного программного обеспечения; системный программист — разработчик системного программного обеспечения. В отличие от прикладного программного обеспечения, системное не решает конкретные практические задачи, а лишь обеспечивает работу других программ, предоставляя им сервисные функции, абстрагирующие детали аппаратной и микропрограммной реализации вычислительной системы, управляет аппаратными ресурсами вычислительной системы. Отнесение того или иного программного обеспечения к системному условно и зависит от соглашений, используемых в конкретном контексте. Как правило, к системному программному обеспечению относятся операционные системы[⇨], утилиты[⇨], системы программирования[⇨], системы управления базами данных[⇨], широкий класс связующего программного обеспечения. Операционная система — комплекс системных программ, расширяющий возможности вычислительной системы, а также обеспечивающий управление её ресурсами, загрузку и выполнение прикладных программ, взаимодействие с пользователями. В большинстве вычислительных систем операционные системы являются основной, наиболее важной (а иногда единственной) частью системного программного обеспечения. Основные функции (простейшие операционные системы): Существуют две группы определений операционных систем: «совокупность программ, управляющих оборудованием» и «совокупность программ, управляющих другими программами». Обе они имеют свой точный технический смысл, который, однако, становится ясен только при более детальном рассмотрении вопроса о том, зачем вообще нужны операционные системы. Есть приложения вычислительной техники, для которых операционные системы излишни. Например, встроенные микрокомпьютеры содержатся сегодня во многих бытовых приборах, автомобилях (иногда по десятку в каждом), сотовых телефонах и т. п. Зачастую такой компьютер постоянно исполняет лишь одну программу, запускающуюся по включении. И простые игровые приставки — также представляющие собой специализированные микрокомпьютеры — могут обходиться без операционной системы, запуская при включении программу, записанную на вставленном в устройство «картридже» или компакт-диске. Тем не менее некоторые микрокомпьютеры и игровые приставки всё же работают под управлением особых собственных операционных систем. В большинстве случаев, это UNIX-подобные системы (последнее особенно верно в отношении программируемого коммутационного оборудования: файрволов, маршрутизаторов). Предшественником операционных систем следует считать служебные программы (загрузчики и мониторы), а также библиотеки часто используемых подпрограмм, начавшие разрабатываться с появлением универсальных компьютеров 1-го поколения (конец 1940-х годов). Служебные программы минимизировали физические манипуляции оператора с оборудованием, а библиотеки позволяли избежать многократного программирования одних и тех же действий (осуществления операций ввода-вывода, вычисления математических функций и т. п.). В 1950—1960-х годах сформировались и были реализованы основные идеи, определяющие функциональные возможности операционных систем: пакетный режим, разделение времени и многозадачность, разделение полномочий, реальный масштаб времени, файловые структуры файловые системы. Встроенные программы или firmware — это программы, «зашитые» в цифровые электронные устройства. В ряде случаев (например, BIOS IBM-PC совместимых компьютеров) являются по сути частью операционной системы, хранящейся в постоянной памяти. В достаточно простых устройствах вся операционная система может быть встроенной. Многие устройства современных компьютеров имеют собственные «прошивки», осуществляющие управление этими устройствами и упрощающие взаимодействие с ними. Утилиты (англ. utility или tool) — программы, предназначенные для решения узкого круга вспомогательных задач. Иногда утилиты относят к классу сервисного программного обеспечения. Утилиты используются для мониторинга показателей датчиков и производительности оборудования (например, мониторинга температур процессора или видеоадаптера), управления параметрами оборудования (ограничение максимальной скорости вращения CD-привода; изменение скорости вращения вентиляторов), контроля показателей (проверка ссылочной целостности; правильности записи данных), расширения возможностей (форматирование или переразметка диска с сохранением данных, удаление без возможности восстановления). К этой категории относятся системные программы, предназначенные для разработки программного обеспечения: Система управления базами данных (СУБД) — специализированная программа (чаще комплекс программ), предназначенная для организации и ведения базы данных. Так как системы управления базами данных не являются обязательным компонентом вычислительной системы, зачастую их не относят к системному программному обеспечению. Часто СУБД осуществляют лишь служебную функцию при работе других видов программ (веб-серверы, серверы приложений), поэтому их не всегда можно отнести к прикладному программному обеспечению. Поэтому СУБД иногда относят к промежуточному программному обеспечению (Middleware). 1 Операционные системы

1.1 Функции операционных систем
1.2 Понятие операционной системы
1.3 Основные идеи операционных систем 1.1 Функции операционных систем 1.2 Понятие операционной системы 1.3 Основные идеи операционных систем 2 Встроенные программы 3 Утилиты

3.1 Типы утилит 3.1 Типы утилит 4 Системы программирования 5 Системы управления базами данных

5.1 Основные функции СУБД

5.1.1 Классификация СУБД по способу доступа к базе данных 5.1 Основные функции СУБД

5.1.1 Классификация СУБД по способу доступа к базе данных 5.1.1 Классификация СУБД по способу доступа к базе данных 6 См. также 7 Литература Загрузка приложений в оперативную память и их выполнение. Стандартизованный доступ к периферийным устройствам (устройства ввода-вывода). Управление оперативной памятью (распределение между процессами, виртуальная память). Управление доступом к данным на энергонезависимых носителях (таких как жёсткий диск, компакт-диск и т. д.), организованным в той или иной файловой системе. Пользовательский интерфейс. Сетевые операции, поддержка стека протоколов. Дисковые утилиты
Дефрагментаторы
Проверка диска — поиск неправильно записанных либо повреждённых различным путём файлов и участков диска и их последующее удаление для эффективного использования дискового пространства.
Очистка диска — удаление временных файлов, ненужных файлов, чистка «корзины».
Разметка диска — деление диска на логические диски, которые могут иметь различные файловые системы и восприниматься операционной системой как несколько различных дисков.
Резервное копирование — создание резервных копий целых дисков и отдельных файлов, а также восстановление из этих копий.
Сжатие дисков — сжатие информации на дисках для увеличения вместимости жёстких дисков. Дефрагментаторы Проверка диска — поиск неправильно записанных либо повреждённых различным путём файлов и участков диска и их последующее удаление для эффективного использования дискового пространства. Очистка диска — удаление временных файлов, ненужных файлов, чистка «корзины». Разметка диска — деление диска на логические диски, которые могут иметь различные файловые системы и восприниматься операционной системой как несколько различных дисков. Резервное копирование — создание резервных копий целых дисков и отдельных файлов, а также восстановление из этих копий. Сжатие дисков — сжатие информации на дисках для увеличения вместимости жёстких дисков. Утилиты работы с реестром Утилиты мониторинга оборудования Тесты оборудования ассемблеры — компьютерные программы, осуществляющие преобразование программы в форме исходного текста на языке ассемблера в машинные команды в виде объектного кода; трансляторы — программы или технические средства, выполняющее трансляцию программы;
компиляторы — Программы, переводящие текст программы на языке высокого уровня, в эквивалентную программу на машинном языке.
интерпретаторы — Программы (иногда аппаратные средства), анализирующие команды или операторы программы и тут же выполняющие их; компиляторы — Программы, переводящие текст программы на языке высокого уровня, в эквивалентную программу на машинном языке. интерпретаторы — Программы (иногда аппаратные средства), анализирующие команды или операторы программы и тут же выполняющие их; компоновщики (редакторы связей) — программы, которые производят компоновку — принимают на вход один или несколько объектных модулей и собирают по ним исполнимый модуль; препроцессоры исходных текстов — это компьютерные программы, принимающие данные на входе, и выдающие данные, предназначенные для входа другой программы, например, такой, как компилятор; отла́дчики (англ. debugger) — модули среды разработки или отдельные программы, предназначенные для поиска ошибок в программах; текстовые редакторы — компьютерные программы, предназначенные для создания и изменения текстовых файлов, а также их просмотра на экране, вывода на печать, поиска фрагментов текста и т. п.;
специализированные редакторы исходных текстов — текстовые редакторы для создания и редактирования исходного кода программ. Специализированный редактор исходных текстов может быть отдельным приложением, или быть встроен в интегрированную среду разработки; специализированные редакторы исходных текстов — текстовые редакторы для создания и редактирования исходного кода программ. Специализированный редактор исходных текстов может быть отдельным приложением, или быть встроен в интегрированную среду разработки; библиотеки подпрограмм — сборники подпрограмм или объектов, используемых для разработки программного обеспечения; редакторы графического интерфейса. управление данными во внешней памяти (на дисках); управление данными в оперативной памяти с использованием дискового кэша; журнализация изменений, резервное копирование и восстановление базы данных после сбоев; поддержка языков баз данных (язык определения данных, язык манипулирования данными). Файл-серверные, в которых файлы данных располагаются централизованно на файл-сервере, а программная реализация СУБД располагается на каждом клиентском компьютере целиком. Доступ к данным осуществляется через локальную сеть. Синхронизация чтений и обновлений осуществляется посредством файловых блокировок. Всплеск популярности файл-серверных систем управления базами данных относится к концу 1980-х — началу 1990-х годов. Клиент-серверные СУБД состоят из клиентской части (которая входит в состав прикладной программы) и сервера (см. Клиент-сервер). Встраиваемые — программные библиотеки, которые позволяют унифицированным образом хранить большие объёмы данных на локальной машине. Низкоуровневый язык программирования Машинный код Васильев В. Г. Системное программное обеспечение Системное программное обеспечение — статья из Большой российской энциклопедии Найти и оформить в виде сносок ссылки на независимые авторитетные источники, подтверждающие написанное. Проставить сноски, внести более точные указания на источники. Проверить достоверность указанной в статье информации. На странице обсуждения должны быть пояснения. Оформить список литературы. Системное программное обеспечение Википедия:Статьи, достоверность которых требует проверки Википедия:Статьи с шаблонами недостатков по алфавиту Википедия:Статьи, достоверность которых требует проверки без пояснений в шаблоне Википедия:Статьи с шаблоном Falseredirect Википедия:Статьи без ссылок на источники Википедия:Статьи без источников (не распределённые по типам) Википедия:Статьи без сносок Википедия:Статьи с неоформленным списком литературы Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад العربية Azərbaycanca Беларуская Беларуская (тарашкевіца) Български বাংলা Bosanski Català Čeština Deutsch English Español Eesti فارسی Suomi Français עברית हिन्दी Հայերեն Bahasa Indonesia 日本語 ქართული Қазақша 한국어 Кыргызча Latviešu മലയാളം Монгол Bahasa Melayu Norsk nynorsk Norsk bokmål ਪੰਜਾਬੀ پښتو Português Română සිංහල Simple English Српски / srpski Kiswahili ไทย Tagalog Türkçe Українська Oʻzbekcha / ўзбекча Tiếng Việt 中文 粵語 Эта страница в последний раз была отредактирована 7 июня 2024 в 12:52. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Связу́ющее програ́ммное обеспе́чение (англ. middleware; также переводится как промежу́точное программное обеспечение, программное обеспечение среднего слоя, подпрогра́ммное обеспечение, межплатфо́рменное программное обеспечение) — широко используемый термин, означающий слой или комплекс технологического программного обеспечения для обеспечения взаимодействия между различными приложениями, системами, компонентами. Имеется несколько основных разновидностей связующего программного обеспечения[1][2][3]: Вероятно, первое употребление термина middleware относится к 1968 году, в докладе конференции научного комитета НАТО[4][5]. Среди современных частных трактовок наиболее употребляемые толкования термина middleware: В наиболее общем случае, термин middleware часто используют для обозначения инфраструктуры: веб-серверов, серверов приложений, мониторов транзакций, программного обеспечения сервисных шин, систем управления содержимым. Промежуточное программное обеспечение составляет ядро современных ИТ-решений основанных на XML, SOAP, веб-сервисах и сервисно-ориентированной архитектуре[11]. система распределённых объектов (DOS, англ. distributed object system) или технологии распределённых объектов (DOT, англ. distributed object technology) ориентированное на базы данных, такое как брокеры объектных запросов (англ. database access middleware) мониторы транзакций вызов удалённых процедур (RPC, англ. remote procedure call) ориентированное на обработку сообщений (MOM, англ. message-oriented middleware) слой для взаимодействия между клиентскими частями программного обеспечения и базами данных[6], программное обеспечение для взаимодействия системного и прикладного программного обеспечения[7], программная прослойка между операционными системами и прикладным программным обеспечением[8], программное обеспечение для взаимодействия прикладного программного обеспечения с сетью, обеспечивающее унификацию взаимодействия между программами в условиях неоднородности вычислительных платформ[9], программное обеспечение для взаимодействия различных компонентов программ и баз данных[10]. ↑ Stojmenovic, I. and Thulasiram, R.K. and Yang, L.T. Parallel and Distributed Processing and Applications: 5th International Symposium, ISPA 2007, Niagara Falls, Canada, August 29-31, 2007, Proceedings. — Springer, 2007. — P. 563-656. — ISBN 9783540747413. ↑ Ruh, W.A. and Maginnis, F.X. and Brown, W.J. Enterprise Application Integration: A Wiley Tech Brief. — Wiley, 2002. — P. 52-59. — ISBN 9780471437864. ↑ Александр Касаткин. Средства middleware и их классификация Архивная копия от 4 марта 2016 на Wayback Machine, PCWeek, (193) 19`1999 ↑ Middleware term in 1968 NATO Report  (неопр.). Дата обращения: 28 октября 2017. Архивировано 29 августа 2014 года. ↑ Ironick. Update on the origin of the term "middleware" (англ.) (30 июля 2005). Дата обращения: 30 января 2011. Архивировано 1 июня 2012 года. ↑ Middleware - Glossary of CNet.com (англ.). CNet.com. Дата обращения: 11 февраля 2011. Архивировано из оригинала 10 февраля 2012 года. ↑ Defninition of Middleware at YourDictionary.com (англ.). The American Heritage® Dictionary of the English Language, 4th edition. — «Software that serves as an intermediary between systems software and an application.» Дата обращения: 10 февраля 2011. Архивировано 10 февраля 2012 года. ↑ Define Middleware at Dictionary.com (англ.). Dictionary.com. Дата обращения: 10 февраля 2011. Архивировано 10 февраля 2012 года. ↑ Middleware from FOLDOC (англ.). FolDoc. Дата обращения: 10 февраля 2011. Архивировано 10 февраля 2012 года.Software that mediates between an application program and a network. It manages the interaction between disparate applications across the heterogeneous computing platforms ↑ IT Term definition and IT Glossary (англ.). Gartner. Дата обращения: 30 января 2011. Архивировано 10 февраля 2012 года.The software «glue» that helps programs and databases (which may be on different computers) work together. Its most basic function is to enable communication between different pieces of software ↑ Wolfgang Emmerich, Mikio Aoyama, Joe Sventek. The impact of research on the development of middleware technology (англ.) // ACM Transactions on Software Engineering and Methodology. — N. Y.: ACM, 2008. — Vol. 17, no. 4. — P. 19-48. — ISSN 1049-331X. — doi:10.1145/13487689.13487692. Связующее программное обеспечение Википедия:Cite web (не указан язык) Википедия:Cite web (заменить webcitation-архив: deadlink no) Википедия:Cite web (заменить webcitation-архив: deadlink yes) Страницы, использующие волшебные ссылки ISBN Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад العربية Azərbaycanca تۆرکجه Български Català Čeština Dansk Deutsch English Esperanto Español فارسی Suomi Français עברית Magyar Bahasa Indonesia Italiano 日本語 한국어 Lombard Македонски Монгол Bahasa Melayu Nederlands Norsk bokmål Polski Português Runa Simi Simple English Slovenčina Српски / srpski Svenska Українська Oʻzbekcha / ўзбекча Tiếng Việt 中文 粵語 Эта страница в последний раз была отредактирована 2 августа 2022 в 21:33. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Прикладное программное обеспечение — класс программ, предназначенный для решения практических задач и предназначенный на непосредственное взаимодействие с пользователями. В отличие от системного программного обеспечения, прикладные программы, как правило, не обращаются к ресурсам компьютера напрямую, взаимодействуя с оборудованием и другими программами, используя инфраструктурные и платформные средства — операционные системы, системы управления базами данных, связующее программное обеспечение. Прикладной программист, разработчик приложений — программист, создающий прикладное программное обеспечение; в отличие от системного программиста, от прикладного программиста требуются более глубокие представления о предметных областях, для которых предназначены разработки, и меньшее погружение в вычислительную технику. Существует множество классификаций прикладного программного обеспечения, как по сфере применения, так и по средствам реализации. Традиционно к прикладным программам относятся средства совместной работы (например, программы организации конференцсвязи, мессенджеры, почтовые сервисы и клиенты), офисные и графические пакеты, системы и компоненты для цифровых звуковых рабочих станций, системы автоматизированного проектирования. Основная часть повседневных программ, с которыми работает конечный пользователь персональных компьютеров и мобильных устройств — браузеры, медиаплееры, игры — также относятся к категории прикладного программного обеспечения («приложения»). Некоторые классы делового прикладного программного обеспечения для организаций: ERP, CRM, CPM, ECM, WMS, EAM, MES. В рамках облачных вычислений предоставление подписчикам прикладного программного обеспечивания относится к модели обслуживания SaaS («программное обеспечение как услуга»). ГОСТ Р 53394-2009 «Интегрированная логистическая поддержка. Основные термины и определения» п.3.7.1.3 Найти и оформить в виде сносок ссылки на независимые авторитетные источники, подтверждающие написанное. De Agostini Treccani GND: 4120906-0 NKC: ph118539 Прикладное программное обеспечение Программное обеспечение Википедия:Статьи без ссылок на источники Википедия:Статьи без источников (не распределённые по типам) Википедия:Статьи с шаблонами недостатков по алфавиту Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад Afrikaans العربية Azərbaycanca Беларуская Беларуская (тарашкевіца) Български भोजपुरी বাংলা Bosanski Català کوردی Čeština Dansk Deutsch Ελληνικά English Español Eesti Euskara فارسی Suomi Français Nordfriisk Frysk Gaeilge 客家語/Hak-kâ-ngî עברית हिन्दी Hrvatski Magyar Bahasa Indonesia Íslenska Italiano 日本語 Қазақша 한국어 Kurdî Кыргызча Latina Lietuvių Latgaļu Latviešu Malagasy Олык марий Македонски മലയാളം Монгол Bahasa Melayu مازِرونی Nederlands Norsk bokmål Polski پنجابی Português Runa Simi Română Srpskohrvatski / српскохрватски සිංහල Slovenčina Slovenščina Shqip Српски / srpski Sunda Svenska Kiswahili தமிழ் ไทย Tagalog Türkçe ئۇيغۇرچە / Uyghurche Українська اردو Oʻzbekcha / ўзбекча Vèneto Tiếng Việt 吴语 中文 粵語 IsiZulu Эта страница в последний раз была отредактирована 10 мая 2024 в 03:33. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Понятие компью́терный язы́к (калька с англ. computer language), как правило, относится к языкам, ассоциируемым с компьютерной техникой. Чаще всего, этот термин соответствует понятию языка программирования, однако это соответствие не является вполне однозначным. Компьютерный язык, как и любой другой язык, появляется, когда требуется передать информацию из одного источника другому. Языки программирования способствуют обмену информацией между программистами и компьютерами, языки разметки текста определяют понятную для людей и компьютеров структуру документов (экранных представлений) и т. п. Нередко понятие компьютерный язык также отождествляют со сленгом, распространённым среди людей, так или иначе общающихся с компьютерами.[1][2] Язык программирования Сценарный язык Предметно-ориентированный язык программирования
Псевдоестественный язык Псевдоестественный язык Информационный язык Язык описания данных
Язык разметки (обычно используются для создания документов)
Язык спецификаций (например: Каскадные таблицы стилей) Язык разметки (обычно используются для создания документов) Язык спецификаций (например: Каскадные таблицы стилей) Язык описания аппаратуры (Verilog, VHDL и др.) Протокол обмена (например: сетевой протокол) Компьютерный сленг ↑ Н. В. Виноградова. «Компьютерный сленг и литературный язык: проблемы конкуренции» Архивная копия от 19 апреля 2007 на Wayback Machine «Русский филологический портал» ↑ Объяснение компьютерного сленга Компьютерные языки Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Текущая версия Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад العربية Беларуская भोजपुरी বিষ্ণুপ্রিয়া মণিপুরী Català Cymraeg Deutsch English Español Eesti Euskara فارسی Suomi Français Gaeilge Galego עברית Hrvatski Bahasa Indonesia 日本語 한국어 Lingua Franca Nova Latviešu Bahasa Melayu Nederlands Polski پنجابی Português Ślůnski ไทย Українська اردو Tiếng Việt 吴语 ייִדיש 中文 閩南語 / Bân-lâm-gú 粵語 Эта страница в последний раз была отредактирована 6 июля 2022 в 11:32. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Язы́к программи́рования — формальный язык, предназначенный для записи компьютерных программ[1][2]. Язык программирования определяет набор лексических, синтаксических и семантических правил, определяющих внешний вид программы и действия, которые выполнит исполнитель (обычно — ЭВМ) под её управлением. Со времени создания первых программируемых машин человечество придумало более восьми тысяч языков программирования (включая эзотерические). Каждый год их число увеличивается[3]. Некоторыми языками умеет пользоваться только небольшое число их собственных разработчиков, другие становятся известны миллионам людей. Профессиональные программисты могут владеть несколькими языками программирования. Язык программирования предназначен для написания компьютерных программ, которые представляют собой набор правил, позволяющих компьютеру выполнить тот или иной вычислительный процесс, организовать управление различными объектами, и т. п. Язык программирования отличается от естественных языков тем, что предназначен для управления ЭВМ, в то время как естественные языки используются, прежде всего, для общения людей между собой. Большинство языков программирования использует специальные конструкции для определения и манипулирования структурами данных и управления процессом вычислений. Как правило, язык программирования определяется не только через спецификации стандарта языка, формально определяющие его синтаксис и семантику [⇨], но и через воплощения (реализации) стандарта — программные средства, обеспечивающие трансляцию или интерпретацию программ на этом языке [⇨]; такие программные средства различаются по производителю, марке и варианту (версии), времени выпуска, полноте воплощения стандарта, дополнительным возможностям; могут иметь определённые ошибки или особенности воплощения, влияющие на практику использования языка или даже на его стандарт. Можно сказать, что первые языки программирования возникали ещё до появления современных электронных вычислительных машин: уже в XIX веке были изобретены устройства, которые можно с долей условности назвать программируемыми — к примеру, музыкальная шкатулка (и позднее механическое пианино) посредством металлического цилиндра и Жаккардовый ткацкий станок (1804) посредством картонных карт. Для управления ими использовались наборы инструкций, которые в рамках современной классификации можно считать прототипами предметно-ориентированных языков программирования[источник не указан 522 дня]. Значимым можно считать «язык», на котором леди Ада Августа (графиня Лавлейс) в 1842 году написала программу для вычисления чисел Бернулли для аналитической машины Чарльза Бэббиджа, ставшей бы, в случае реализации, первым компьютером в мире, хотя и механическим — с паровым двигателем. В 1930—1940 годах А. Чёрч, А. Тьюринг, А. Марков разработали математические абстракции (лямбда-исчисление, машину Тьюринга, нормальные алгоритмы соответственно) — для формализации алгоритмов. В это же время, в 1940-е годы, появились электрические цифровые компьютеры и был разработан язык, который можно считать первым высокоуровневым языком программирования для ЭВМ — «Plankalkül», созданный немецким инженером К. Цузе в период с 1943 по 1945 годы[4]. Программисты ЭВМ начала 1950-х годов, в особенности таких, как UNIVAC и IBM 701, при создании программ пользовались непосредственно машинным кодом, запись программы на котором состояла из единиц и нулей и который принято считать языком программирования первого поколения (при этом разные машины разных производителей использовали различные коды, что требовало переписывать программу при переходе на другую ЭВМ). Первым практически реализованным языком стал в 1949 году так называемый «Краткий код», в котором операции и переменные кодировались двухсимвольными сочетаниями. Он был разработан в компании Eckert–Mauchly Computer Corporation, выпускавшей UNIVAC-и, созданной одним из сотрудников Тьюринга, Джоном Мокли. Мокли поручил своим сотрудникам разработать транслятор математических формул, однако для 1940-х годов эта цель была слишком амбициозна. Краткий код был реализован с помощью интерпретатора[5]. Вскоре на смену такому методу программирования пришло применение языков второго поколения, также ограниченных спецификациями конкретных машин, но более простых для использования человеком за счёт использования мнемоник (символьных обозначений машинных команд) и возможности сопоставления имён адресам в машинной памяти. Они традиционно известны под наименованием языков ассемблера и автокодов. Однако при использовании ассемблера становился необходимым процесс перевода программы на язык машинных кодов перед её выполнением, для чего были разработаны специальные программы, также получившие название ассемблеров. Сохранялись и проблемы с переносимостью программы с ЭВМ одной архитектуры на другую, и необходимость для программиста при решении задачи мыслить терминами «низкого уровня» — ячейка, адрес, команда. Позднее языки второго поколения были усовершенствованы: в них появилась поддержка макрокоманд. С середины 1950-х начали появляться языки третьего поколения, такие как Фортран, Лисп и Кобол[6]. Языки программирования этого типа более абстрактны (их ещё называют «языками высокого уровня») и универсальны, не имеют жёсткой зависимости от конкретной системы команд и конфигурации периферийных устройств. Программа на языке высокого уровня может исполняться (по крайней мере, в теории, на практике обычно имеется ряд специфических версий или диалектов реализации языка) на любой ЭВМ, на которой для этого языка имеется транслятор (инструмент, переводящий программу на язык машины, после чего она может быть выполнена процессором). Обновлённые версии перечисленных языков до сих пор имеют хождение в разработке программного обеспечения, и каждый из них оказал определённое влияние на последующее развитие языков программирования[7]. Тогда же, в конце 1950-х годов, появился Алгол, также послуживший основой для ряда дальнейших разработок в этой сфере. Необходимо заметить, что на формат и применение ранних языков программирования в значительной степени влияли интерфейсные ограничения[8]. В период 1960-х — 1970-х годов были разработаны основные парадигмы языков программирования, используемые в настоящее время, хотя во многих аспектах этот процесс представлял собой лишь улучшение идей и концепций, заложенных ещё в первых языках третьего поколения. Каждый из этих языков породил по семейству потомков, и большинство современных языков программирования в конечном счёте основано на одном из них. Кроме того, в 1960—1970-х годах активно велись споры о необходимости поддержки структурного программирования в тех или иных языках[14]. В частности, голландский специалист Э. Дейкстра выступал в печати с предложениями о полном отказе от использования инструкций GOTO во всех высокоуровневых языках. Развивались также приёмы, направленные на сокращение объёма программ и повышение продуктивности работы программиста и пользователя. В 1980-е годы наступил период, который можно условно назвать временем консолидации. Язык C++ объединил в себе черты объектно-ориентированного и системного программирования, правительство США стандартизировало язык Ада, производный от Паскаля и предназначенный для использования в бортовых системах управления военными объектами, в Японии и других странах мира осуществлялись значительные инвестиции в изучение перспектив так называемых языков пятого поколения, которые включали бы в себя конструкции логического программирования[15]. Сообщество функциональных языков приняло в качестве стандарта ML и Лисп. В целом этот период характеризовался скорее опорой на заложенный в предыдущем десятилетии фундамент, нежели разработкой новых парадигм. Важной тенденцией, которая наблюдалась в разработке языков программирования для крупномасштабных систем, было сосредоточение на применении модулей — объёмных единиц организации кода. Хотя некоторые языки, такие, как ПЛ/1, уже поддерживали соответствующую функциональность, модульная система нашла своё отражение и применение также и в языках Модула-2, Оберон, Ада и ML. Часто модульные системы объединялись с конструкциями обобщённого программирования[16]. Важным направлением работ становятся визуальные (графические) языки программирования, в которых процесс «написания» программы как текста заменяется на процесс «рисования» (конструирования программы в виде диаграммы) на экране ЭВМ. Визуальные языки обеспечивают наглядность и лучшее восприятие логики программы человеком. В 1990-х годах в связи с активным развитием Интернета распространение получили языки, позволяющие создавать сценарии для веб-страниц — главным образом Perl, развившийся из скриптового инструмента для Unix-систем, и Java. Возрастала также и популярность технологий виртуализации. Эти изменения, однако, также не представляли собой фундаментальных новаций, являясь скорее совершенствованием уже существовавших парадигм и языков (в последнем случае — главным образом семейства Си). В настоящее время развитие языков программирования идёт в направлении повышения безопасности и надёжности, создания новых форм модульной организации кода и интеграции с базами данных. Для многих широко распространённых языков программирования созданы международные стандарты. Специальные организации проводят регулярное обновление и публикацию спецификаций и формальных определений соответствующего языка. В рамках таких комитетов продолжается разработка и модернизация языков программирования и решаются вопросы о расширении или поддержке уже существующих и новых языковых конструкций. Современные языки программирования широко используют мультиязычные символы Юникода (Delphi 2006, C#, Java, Rust) для идентификаторов и хранения исходного кода. Исторически, до начала 2000-х годов в языках применялась 7-и битная кодировка ASCII, принятая стандартом в США. Ранние языки, возникшие в эпоху 6-битных символов, использовали более ограниченный набор. Например, алфавит Фортрана включает 49 символов (включая пробел): A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9 = + - * / () . , $ ' : Управляющие символы ASCII используются ограниченно: допускаются только возврат каретки CR, перевод строки LF и горизонтальная табуляция HT (иногда также вертикальная табуляция VT и переход к следующей странице FF). Заметным исключением является язык APL, в котором используется очень много специальных символов. Использование символов за пределами 7-и битного ASCII (например, символов KOI8-R) зависит от реализации: иногда они разрешаются только в комментариях и символьных/строковых константах, а иногда и в идентификаторах. В СССР и современной России существуют языки, где все ключевые слова пишутся русскими буквами, например встроенный язык программирования 1С:Предприятие и учебные языки программирования — псевдокод, школьный алгоритмический язык системы КуМир и язык РАПИРА. Расширение набора используемых символов (вне латинского алфавита) основано на том, что многие проекты по разработке программного обеспечения являются международными, а так же популяризацией графических символов из наборов эмотиконов. Существует несколько подходов к определению семантики языков программирования. Основных три: операционная, аксиоматическая и денотационная. Не существует общепринятой систематичной таксономии языков программирования. Есть множество черт, согласно которым можно производить классификацию языков, причём одни из них однозначно проводят разделы между языками на основе технических свойств, другие основываются на доминирующих признаках, имеют исключения и более условны, а третьи полностью субъективны и нередко сопровождаются заблуждениями, но на практике весьма распространены. Конкретный язык программирования в подавляющем большинстве случаев имеет более одного языка-предка. Многие языки создаются как сочетание элементов различных языков. В одних случаях такое сочетание проходит математический анализ на предмет непротиворечивости (см., например, Определение Standard ML), в других — язык формируется исходя из практических потребностей, для решения актуальных проблем с целью получения коммерческого успеха, но при этом без соблюдения математической строгости и со включением в язык взаимоисключающих идей (как в случае C++[17][18][19][20][21]). Формально язык программирования не имеет такого критерия как «уровень». Условно этот термин обычно означает одно из двух: Эта двойственность появилась в 1950-е годы, при создании языков Планкалкюль и Фортран. При их разработке ставились прямые намерения обеспечить более краткую запись часто встречающихся конструкций (например, арифметических выражений), чем требовали процессоры того времени. В этих языках вводился новый слой абстракции и предполагались преобразования программ в машинный язык, поэтому их назвали языками «высокого уровня», то есть надстройкой, надслоением над языком машины.
Однако вскоре стало ясно, что эти определения вовсе не обязательно идут бок о бок. Так, история знает случаи, когда язык, традиционно считающийся «высокоуровневым», реализовывался аппаратно (см. Лисп-машина, Java Optimized Processor[англ.]), или когда язык, являющийся «низкоуровневым» на одной платформе, компилировался как «высокоуровневый» на другой (таким образом программы на CISC-ассемблере VAX использовались на RISC-машинах DEC Alpha — см. VAX Macro[англ.]). Тем не менее, до сих пор распространено заблуждение, что эти две трактовки являются не более, чем «двумя сторонами одной медали», и первое будто бы неизбежно означает второе. По степени «высокоуровневости» языки принято делить на пять поколений. К первому поколению[англ.] относят, в первую очередь, машинные языки (или, на общеупотребимом жаргоне — машинные коды), то есть языки, реализованные непосредственно на аппаратном уровне. Появившиеся вскоре после них «языки ассемблера» относят ко второму поколению[англ.]. В простейшем случае они реализуют мнемонику над машинным языком для записи команд и их параметров (в частности, адресов в памяти), но многие языки ассемблера включают и весьма развитый макроязык; кроме того, даже в простейшем случае обратная разработка машинного кода не позволяет однозначно восстановить программу на ассемблере — например, невозможно восстановить имена переменных; могут быть нераспознаны недокументированные функции. Тем не менее, оба первых поколения общепринято относить к языкам низкого уровня. К 1970-м годам сложность программ выросла настолько, что превысила способность программистов управляться с ними, и это привело к огромным убыткам и застою в развитии информационных технологий[22]. Ответом на эту проблему стало появление массы языков высокого уровня, предлагающих самые разные способы управления сложностью (подробнее см. парадигма программирования и языки для программирования в мелком и крупном масштабе). Программы на языках «высокого уровня» гораздо легче модифицируются и совсем легко переносятся с компьютера на компьютер. На практике, наибольшее распространение получили языки третьего поколения, которые лишь претендуют на звание «высокоуровневых», но реально предоставляют лишь те «высокоуровневые» конструкции, что находят однозначное соответствие инструкциям в машине фон Неймана[23]. Более «высокоуровневыми» принято считать языки четвёртого и пятого поколения. К четвёртому поколению[англ.] относят языки запросов, языки опций и параметров, генераторы приложений, комбинированные пакеты баз данных[24]. Наиболее значимой подгруппой в четвёртом поколении принято считать функциональные>>> языки, большая часть из которых является языками высшего порядка>>>. Иногда выделяется категория языков пятого поколения[англ.], но она не является общепринятой — чаще используется термин «язык сверхвысокого уровня» (англ. very high level language). Это языки, реализация которых включает существенную алгоритмическую составляющую (то есть когда интерпретация небольшого исходного кода требует весьма сложных вычислений), поэтому порой также говорят, что языки пятого поколения — это фактически языки четвёртого поколения, дополненные базой знаний[25]. Чаще всего так называют логические языки. Язык Си является, вероятно, самым «низкоуровневым» в третьем поколении. Он изначально позиционировался как «высокоуровневый ассемблер» или «кроссплатформенный ассемблер»; его также часто называют «языком среднего уровня» или даже «языком поколения 2,5». Он позволяет в значительной степени контролировать способ реализации алгоритма с учётом свойств, типичных для весьма большого числа аппаратных архитектур, но есть платформы, под которые реализации Си (даже с в нестандартном виде) отсутствуют по причине принципиальной невозможности или нецелесообразности их создания. Классификация потомка Си, языка C++, вызывает споры: его нередко называют «высокоуровневым», несмотря на то, что технически его семантика и система типов мало отличаются от тех, на которых основан Си. Со временем появились и другие языки среднего уровня, например, LLVM, C--. Они преимущественно предназначены не для написания кода человеком, а для генерации промежуточного кода из более высокоуровневых языков с тем, чтобы обеспечить лучшее разделение компиляторов на фронтенд и бэкенд. В большинстве случаев языки высокого уровня порождают машинный код большего размера и исполняются медленнее. Однако некоторые языки высокого уровня для алгоритмически и структурно сложных программ могут давать заметное преимущество в эффективности, уступая низкоуровневым лишь на небольших и простых программах (подробнее см. эффективность языков). Иначе говоря, потенциальная эффективность языка меняется с повышением его «уровня» нелинейно и вообще неоднозначно. При этом скорость разработки и трудоёмкость модификации, устойчивость и другие показатели качества в сложных системах оказываются гораздо важнее предельно возможной скорости исполнения — они обеспечивают различие между программой, что работает, и той, что нет[26] — так что экономически более целесообразна эволюция аппаратного обеспечения (исполнение большего числа инструкций в единицу времени) и методов оптимизирующей компиляции (более того, последние десятилетия эволюция аппаратного обеспечения движется в направлении поддержки методов оптимизирующей компиляции для языков высокого уровня). К примеру, автоматическая сборка мусора, присутствующая в большинстве высокоуровневых языков программирования, считается одним из важнейших улучшений, благотворно повлиявших на скорость разработки[27]. Поэтому в наши дни языки низкого уровня используются только в задачах системного программирования. Распространено ошибочное отождествление системного программирования с «низкоуровневым», основанное на мнении, что если необходим точный контроль за ресурсами, то язык сам не должен предполагать масштабных преобразований, иначе все усилия программиста окажутся напрасными. В действительности есть примеры, опровергающие это. Так, язык BitC является функциональным>>> языком высшего порядка>>>, то есть представителем четвёртого поколения («высокоуровневым»), но целиком и полностью ориентирован именно на системное программирование и уверенно конкурирует по скорости с Си. Языки третьего поколения C# и Limbo разрабатывались для использования одновременно как в системном программировании (с целью повышения отказоустойчивости операционной системы), так и в прикладном — это обеспечивает единство платформы, что сокращает потери при трансляции. Современные компьютеры представляют сложные данные реального мира в виде чисел в памяти компьютера. Это вводит в дисциплину программирования риск человеческого фактора, в том числе вероятность ошибок доступа к памяти. Поэтому многие языки программирования сопровождаются средством контроля смысла операций над двоичными данными на основе сопровождающей их логической информации — системой типов. Однако существуют и бестиповые языки, например, Forth. Большинство языков ассемблера являются бестиповыми, но существуют и типизированные языки ассемблера[англ.], нацеленные на обеспечение минимальной безопасности низкоуровневых программ. Системы типов языков делятся на динамические (потомки Lisp, Smalltalk, APL) и статические, а последние, в свою очередь, делятся на неполиморфные (потомки Алгола и BCPL) и полиморфные (потомки ML)[28]. Кроме того, они делятся на явные (англ. explicit) и неявные (англ. implicit) — другими словами, требующие явной декларации типов для объектов в программе или статически выводящие их самостоятельно. Системы типов бывают сильные и слабые. Сильная система типов назначает тип для всякого выражения раз и навсегда (когда бы конкретно это ни происходило — в динамике или в статике), а слабая позволяет впоследствии переназначать типы. Сильная типизация порой ошибочно отождествляется со статической. В общем и целом, язык называется безопасным, если программы на нём, которые могут быть приняты компилятором как правильно построенные, в динамике никогда не выйдут за рамки допустимого поведения[29]. Это не значит, что такие программы не содержат ошибок вообще. Термин «хорошее поведение программы» (англ. well-behavior) означает, что даже если программа содержит некий баг (в частности, логическую ошибку), то она тем не менее не способна нарушить целостность данных и обрушиться (англ. crash). Хотя термины неформальны, безопасность некоторых языков (например, Standard ML) математически доказуема[28]. Безопасность других (например, Ada) была обеспечена ad hoc-образом, без обеспечения концептуальной целостности, что может обернуться катастрофами, если положиться на них в ответственных задачах (см. концептуальная целостность языков). Неформальная терминология была популяризована Робином Милнером, одним из авторов теории формальной верификации и собственно языка Standard ML. Степень контроля ошибок и реакция языка на них могут различаться. Простейшие системы типов запрещают, к примеру, вычитать строку из целого числа. Однако целыми числами могут представляться и миллиметры, и дюймы, но было бы логической ошибкой вычитать дюймы из миллиметров. Развитые системы типов позволяют (а наиболее развитые — принуждают) внедрять в программу такую логическую информацию. Для ЭВМ она является избыточной и полностью удаляется при порождении машинного кода тем или иным образом>>>. В частности, Standard ML не допускает над данными никаких операций, кроме тех, что разрешены явно и формализованы; однако программы на нём всё же могут завершаться порождением необработанного исключения (например, при попытке деления на ноль). Его потомок, MLPolyR гарантирует также и отсутствие необработанных исключений. Такие языки называются «типобезопасными». Java и C# менее строги и контролируют лишь утечки памяти, поэтому в их контексте чаще используют более узкий термин «безопасность типов в отношении доступа к памяти» (англ. memory type safety) или (чаще) просто «безопасность доступа к памяти». Сильно динамически типизируемые языки отслеживают поведение программ в динамике (что влечёт снижение быстродействия) и реагируют на ошибки порождением исключения. Все эти языки ориентированы на практичность, предоставляя оптимальный компромисс между пресечением серьёзных сбоев и высокой скоростью разработки программ. Существуют языки, предназначенные для написания программ, которые верны по построению, то есть обеспечивают гарантию того, что исполнимая программа по структуре и поведению будет тождественна её спецификации (см. параметричность[англ.], зависимый тип). Как следствие, программы на таких языках часто называют «исполнимыми спецификациями» (см. Соответствие Карри — Говарда). Трудоёмкость разработки на таких языках возрастает на порядки, к тому же они требуют очень высокой квалификации разработчика — поэтому их применяют только в формальной верификации. Примерами таких языков служат Agda, Coq. Языки Си и его потомок C++ являются небезопасными[30]. В программах на них обширно встречаются ситуации ослабления типизации (приведение типов) и прямого её нарушения (каламбур типизации), так что ошибки доступа к памяти являются в них статистической нормой (но крах программы наступает далеко не сразу, что затрудняет поиск места ошибки в коде). Самые мощные системы статического анализа для них (такие, как PVS-Studio[31][32]) способны обнаруживать не более 70 — 80 % ошибок, но их использование обходится очень дорого, как в финансовом смысле, так и с точки зрения трудоёмкости и наукоёмкости. Достоверно же гарантировать безотказность программ на этих языках невозможно, не прибегая к формальной верификации, что не только ещё дороже, но и требует специальных знаний. У Си есть и безопасные потомки, такие как Cyclone. Язык Forth не претендует на звание «безопасного», но тем не менее на практике существование программ, способных повредить данные, почти исключено, так как содержащая потенциально опасную ошибку программа аварийно завершается на первом же тестовом запуске, принуждая к коррекции исходного кода. В сообществе Erlang принят подход «let it crash» (с англ. — «дай ей обрушиться»), также нацеленный на раннее выявление ошибок. Можно выделить три принципиально разных способа реализации языков программирования: компиляция, интерпретация и встраивание. Распространено заблуждение, согласно которому способ реализации является присущим конкретному языку свойством. В действительности, это деление до определённой степени условно. В ряде случаев язык имеет формальную семантику, ориентированную на интерпретацию, но все или почти все его действительные реализации являются компиляторами, порой весьма эффективно оптимизирующими (примерами могут служить языки семейства ML, такие как Standard ML, Haskell). Есть языки, размывающие границы между интерпретацией и компиляцией — например, Forth. Компиляция означает, что исходный код программы сначала преобразуется в целевой (машинный) код специальной программой, называемой компилятором — в результате получается исполнимый модуль, который уже может быть запущен на исполнение как отдельная программа. Интерпретация же означает, что исходный код выполняется непосредственно, команда за командой (иногда — с минимальной подготовкой, буквально после разбора исходного кода в AST),— так что программа просто не может быть запущена без наличия интерпретатора. Встраивание языка можно философски рассматривать как «реализацию без трансляции» — в том смысле, что такой язык является синтаксическим и семантическим подмножеством некого другого языка, без которого он не существует. Говоря же более точно, встраиваемые языки добавляют к сказанному ещё четыре способа реализации. Естественный для языка способ реализации определяется временем связывания программных элементов с их характеристиками. В частности, в языках со статической типизацией переменные и другие объекты программы связываются с типом данных на этапе компиляции, а в случае типизации динамической — на этапе выполнения, как правило — в произвольной точке программы. Некоторые свойства элементов языка, такие как значение арифметических операторов или управляющих ключевых слов, могут быть связаны уже на этапе определения языка. В других языках возможно их переназначение (см. связывание имён[англ.]). Раннее связывание обычно означает бо́льшую эффективность программы, в то время как позднее — большую гибкость, ценой которого является меньшая скорость и/или усложнение соответствующего этапа[33]. Но даже из, казалось бы, очевидных случаев есть исключения — например, интенсиональный полиморфизм откладывает обработку статической типизации до этапа выполнения, но не замедляя, а повышая общее быстродействие (по крайней мере, в теории). Для любого традиционно компилируемого языка (такого как Паскаль) можно написать интерпретатор. Но многие интерпретируемые языки предоставляют некоторые дополнительные возможности, такие как динамическая генерация кода (см. eval[англ.]), так что их компиляция должна быть динамической (см. динамическая компиляция). Таким образом, составной термин «язык + способ его реализации» в ряде случаев оказывается уместен. Кроме того, большинство современных «чистых» интерпретаторов не исполняют конструкции языка непосредственно, а компилируют их в некоторое высокоуровневое промежуточное представление (например, с разыменованием переменных и раскрытием макрокоманд). Большинство традиционно интерпретируемых или компилируемых языков могут реализовываться как встраиваемые, хотя метаязыков, которые были бы способны охватить другие языки как своё подмножество, не так много (наиболее ярким представителем является Lisp). Как правило, скомпилированные программы выполняются быстрее и не требуют для выполнения дополнительных программ, так как уже переведены на машинный язык. Вместе с тем, при каждом изменении текста программы требуется её перекомпиляция, что замедляет процесс разработки. Кроме того, скомпилированная программа может выполняться только на том же типе компьютеров и, как правило, под той же операционной системой, на которую был рассчитан компилятор. Чтобы создать исполняемый файл для машины другого типа, требуется новая компиляция. Интерпретируемые языки позволяют запускать программы сразу же после изменения, причём на разных типах машин и операционных систем без дополнительных усилий, а гомоикони́чные — и вовсе динамически перемещать программу между разными машинами без прерывания её работы (наиболее общий случай сериализации), позволяя разрабатывать системы непрерывной доступности[англ.] (см. тж. системы высокой доступности). Портируемость интерпретируемой программы определяется только наличием реализаций интерпретаторов под те или иные аппаратные платформы. Ценой всего этого становятся заметные потери быстродействия; кроме того, если программа содержит фатальную ошибку, то об этом не будет известно, пока интерпретатор не дойдёт до её места в коде (в отличие от статически типобезопасных языков>>>). Реализация некоторых языков, например, Java и C#, занимают промежуточную ступень между компиляцией и интерпретацией. А именно, программа компилируется не в машинный язык, а в машинно-независимый код низкого уровня, байт-код. Далее байт-код выполняется виртуальной машиной. Для выполнения байт-кода обычно используется интерпретация, хотя отдельные его части для ускорения работы программы могут быть транслированы в машинный код непосредственно во время выполнения программы по технологии компиляции «на лету» (Just-in-time compilation, JIT). Для Java байт-код исполняется виртуальной машиной Java (Java Virtual Machine, JVM), для C# — Common Language Runtime. Подобный подход в некотором смысле позволяет использовать плюсы как интерпретаторов, так и компиляторов. Математическая логика классифицируется по порядку — см. логика первого порядка и логика высшего порядка. Эта терминология естественным образом наследуется информатикой, образуя семантики, соответственно, первого и высшего порядка[34]. Языки первого порядка (например, потомки Алгола, такие как Basic или классический Pascal Вирта) позволяют определять только зависимости первого порядка между величинами. Например, значение square x зависит от значения x. Такие зависимости называются функциями. Языки высшего порядка позволяют определять зависимости между зависимостями. Например, значение map f x зависит от значений f и x, где значение f само выражает абстрактную зависимость (другими словами, параметр f варьируется над множеством функций определённой сигнатуры). Такие зависимости называются функциями высшего порядка. При этом в большинстве случаев говорят, что такой язык рассматривает зависимости (функции) как объекты первого класса, иначе говоря, допускает функции первого класса (некоторые языки, например Си, не поддерживают первоклассные функции, но предоставляют ограниченные возможности строить функции высшего порядка). Эти термины ввёл Кристофер Стрэчи[англ.] в публикации 1967 года[англ.]. К языкам высшего порядка относятся почти все функциональные языки (исключения очень редки; примером функционального языка первого порядка долгое время являлся SISAL[англ.], но в 2018 году в него была добавлена поддержка первоклассных функций). С развитием систем типов различение порядков распространилось и на типы (см. конструктор типов). Языки первого порядка позволяют воплощать в виде кода алгоритмы, но не архитектуру программ. По мнению Стрэчи[англ.], это ограничение унаследовано языком Алгол (а от него другими языками) из классической математики, где используются только константные операции и функции, однозначно распознаваемые вне контекста, и отсутствует систематичная нотация для произвольной работы с функциями (в качестве такой нотации в 1930-х годах было построено лямбда-исчисление, которое позже легло в основу языков высшего порядка)[35]. Схемы взаимодействия компонентов (процедур, функций, объектов, процессов и др.) для программ на языках первого порядка могут существовать лишь на условном уровне, вне самих программ. Со временем были обнаружены многократно повторяющиеся однотипные схемы такого рода, в результате чего вокруг них выстроилась самостоятельная методология — шаблоны проектирования. Языки высшего порядка позволяют воплощать такие схемы в виде исполнимого кода, пригодного для многократного использования (функций, предназначенных для преобразования и композиции других функций — см., например, конверторы и сканеры в SML)[36][37]. В результате, решения, которые на языках первого порядка могут быть представлены фрагментами программ (порой довольно сложными и громоздкими), на языках высшего порядка могут сокращаться до одной команды или вообще использования элемента семантики самого языка, не имеющего синтаксического выражения. Например, шаблон «Команда», часто применяемый в языках первого порядка, эквивалентен непосредственно самому понятию функции первого класса. То же распространяется и на более высокие слои языков — типизацию (см. полиморфизм в высших рода́х) и типизацию типизации (см. полиморфизм родо́в). Сказанное преимущественно относится к языкам, семантика которых основана на лямбда-исчислении (потомки Lisp, ML). Однако некоторые языки иной природы также предоставляют возможность программирования высшего порядка[англ.]. Примерами служат стековые языки (Forth) и определённая разновидность объектно-ориентированных языков (Smalltalk, CLOS, см. сообщение высшего порядка[англ.]). Введя терминологию «сущностей первого и второго класса», Стрэчи[англ.] тут же акцентировал внимание на том, что из личного опыта и обсуждений со множеством людей он убедился, что невероятно тяжело перестать думать о функциях как об объектах второго класса[35]. То есть порядок языка имеет ярко выраженное психологическое влияние (см. гипотеза Сепира — Уорфа). Владение языками более высокого уровня поможет программисту думать в терминах более высокоуровневых абстракций[38]. Низкоуровневые же языки могут навязывать обратное, в связи с чем широко известно следующее высказывание: Практически невозможно обучить хорошему программированию студентов, имевших опыт работы с Бейсиком: как потенциальные программисты они ментально исковерканы без надежды на восстановление. Это значит, что само по себе использование языка высшего порядка не означает автоматически изменение архитектуры и повышение коэффициента повторного использования (см. серебряной пули нет) — определяющим фактором является умение конкретного разработчика применять соответствующие идиомы[39]. Понимание возможностей и ограничений высокоуровневых конструкций, базовых принципов их реализации не только дают программисту возможность наиболее эффективно использовать изученный им язык, но и позволят создавать и использовать аналогичные механизмы в случае разработки на языке, где они не реализованы[38]. Разработчику, владеющему бо́льшим спектром языков программирования, будет проще выбрать среди них инструмент, наиболее подходящий для решения стоящей перед ним задачи, изучить, в случае необходимости, новый язык или реализовать предметно-ориентированный язык, к которым, к примеру, можно отнести интерфейс командной строки достаточно сложной программы[40].  Язык может технически допускать или не допускать, а также в той или иной степени поощрять или не поощрять реализацию определённых идиом и разработку в некоторой парадигме программирования (если таких парадигм несколько, язык называют мультипарадигменным). Технически языки делятся, например, на допускающие побочные эффекты и не допускающие их. Во втором случае язык называют ссылочно-прозрачным и относят к «чисто функциональной парадигме». Также в качестве парадигмы иногда рассматриваются определённые свойства системы типов и стратегии вычисления языка (например, для параметрически полиморфных систем типов нередко говорят о реализации парадигмы обобщённого программирования) или наличие определённых семантических свойств (например, свойство гомоикони́чности, открывающее целый спектр разновидностей метапрограммирования). Существует масса «языков, наследованных от математики»>>>, многие из которых формируют уникальные парадигмы. Яркими представителями являются Lisp, впервые воплотивший лямбда-исчисление и положивший таким образом начало функциональной парадигме; Smalltalk, впервые воплотивший объектно-ориентированную парадигму (появившаяся за много лет до него Симула поддерживала понятие класса, но воплощала структурную парадигму) и стековый язык Forth, воплощающий конкатенативную парадигму. Низкоуровневые языки ориентированы на специфику конкретного аппаратного обеспечения, и обычно не соотносятся с какой-либо парадигмой, кроме императивной (см. далее), хотя конкретный разработчик на них, разумеется, может идеологически следовать определённым тенденциям. Однако, некоторые архитектуры могут реализовывать нетипичные возможности, существенно влияющие на подход к декомпозиции задачи в низкоуровневом программировании, например, параллелизм на уровне команд. С точки зрения общей философии программирования языки делятся на императивные и декларативные. Императивные языки подразумевают программирование посредством пошагового инструктирования машины, детального указания уже придуманного программистом способа реализации технического задания (термин «императив» означает «приказной порядок»). Декларативные языки подразумевают программирование посредством описания требуемого результата в терминах предметной области и возложение работы по получению способа реализации полностью или почти полностью на автоматику (компилятор, библиотеку, макроподсистему и др.) с применением методов автоматических преобразований программ[англ.]. На таких языках в большинстве случаев достаточно просто перекомпилировать программу под определенную архитектуру и операционную систему, а адаптации исходного кода не требуется (термин «декларатив» означает «описание»). Чем точнее язык позволяет контролировать, как требуемая функциональность будет исполняться на данном процессоре с учётом особенностей его архитектуры, тем легче обеспечить достоверно высокое быстродействие и компактность программ. Оборотной стороной медали является снижение портируемости: для переноса программы на другую аппаратную платформу её придётся перекодировать с нуля (а зачастую и перепроектировать — столь сильны могут быть различия между архитектурами процессоров), хотя в ряде случаев и удаётся обеспечить хорошую портируемость кода между большим числом процессорных архитектур. На декларативных языках в большинстве случаев достаточно просто перекомпилировать программу под определенную архитектуру и операционную систему, а адаптации исходного кода не требуется. Порой для них применяется компиляция в языки более низкого уровня, в том числе в языки третьего поколения (в большинстве случаев это Си, но иногда в роли целевых платформ выступают Java, JavaScript, Ada и др.). В соответствии с этим, нередко выделяются «как-языки» (языки, ориентированные на машину) и «что-языки» (языки, ориентированные на человека). Распространено заблуждение относительно того, где находится верхний порог степени «высокоуровневости» или «декларативности»: глядя на программы на истинных что-языках, опытные программисты на как-языках зачастую не могут поверить, что перед ними действительно исполнимый код[41]. Вследствие этого, однозначное отнесение языков третьего поколения к императивным (как-языкам) зачастую вызывает споры и попытки продемонстрировать на них «декларативные» фрагменты кода. В действительности, как выше отмечено>>>, языки третьего поколения предоставляют лишь те «высокоуровневые» конструкции, что находят однозначное соответствие инструкциям в машине фон-Неймана[42]. Существуют процессорные архитектуры, под которыми использование многих распространённых языков третьего поколения затруднено или невозможно, и в лучшем случае разрабатываются специализированные языки третьего поколения (как, например, Occam для транспьютеров, или шейдерные языки для графических процессоров). Кроме того, зачастую упускается из виду, что объектно-ориентированное программирование в большинстве случаев представляет собой однозначно заданную цепочку обмена объектов сообщениями с целью изменения их состояния, что подпадает под определение «императив» (исключение может составлять агентное моделирование). Что-языки могут использоваться не только для разработки прикладных программ под экзотичные системы, но даже для моделирования внутри языка модели выполнения самих этих систем (см., например, Clash[43]). Как и с другими видами классификации, это деление языков не является строгим, а представляет своего рода градацию. К тому же развитые механизмы абстракции позволяют повышать степень «декларативности» языка с исходно императивной семантикой (подробнее см. встраиваемый язык). Многие декларативные языки также предусматривают императивные возможности. Более того, для множества задач полностью автоматическое порождение по-настоящему эффективной реализации алгоритмически неразрешимо, так что на практике даже на что-языках нередко используются определённые алгоритмические ухищрения, хотя и существуют методы получения эффективных реализаций из основанных на определении (реализаций «в лоб»), такие как изобретённая в СССР суперкомпиляция. Но в целом, функциональные и логические языки принято относить к декларативным, а процедурные и объектно-ориентированные — к императивным. Уже при использовании языков второго поколения начала формироваться парадигма процедурного программирования, требующая производить декомпозицию крупных процедур в цепочку иерархически связанных более мелких. С появлением языков третьего поколения сформировалось сперва структурное программирование как прямое развитие процедурного, а затем и модульное. Все эти парадигмы реализованы во всех поколениях языков, начиная с третьего, они применяются и в императивных, и в декларативных языках (например, в функциональных языках структурное программирование реализуется посредством лексической области видимости — см. Lexical scope[англ.] и замыкание). Среди функциональных языков выделяются «чисто функциональные» (англ. purely functional, соответствующие выше упомянутой технической категории ссылочно-прозрачных); остальные называются «не чисто функциональными» (англ. impurely functional) или просто «языками высшего порядка»>>>. Среди языков логического программирования, помимо традиционного, выделяется несколько особых форм, например, программирование ограничениями. Существует особый случай объектно-ориентированной парадигмы — ООП высшего порядка[англ.] (см. также #Языки первого и высшего порядка). Распространено мнение, что во многих процедурных языках возможно идиоматическое изображение ООП, однако это неверно, если говорить об ООП высшего порядка. Ещё по одной «шкале» можно выстроить языки по степени возможности избавиться от точек следования для реализации бесточечного стиля. По одну сторону в этом случае окажутся, например, Си и Паскаль, по другую — Joy, APL/J/K. Бесточечный стиль широко применяется в Haskell, поддерживается в OCaml. Программы могут решать задачи различного масштаба[англ.]: одна программа строит график для заданной функции, а другая управляет документооборотом крупного предприятия. Различные языки программирования рассчитаны на разный исходный масштаб задачи и, что ещё более важно, по-разному справляются с ростом сложности программных систем. Ключевым качеством языка, от которого зависит, как меняется трудоёмкость разработки по мере наращивания системы, является абстракция, то есть возможность отделять смысл (поведение) компонента системы от способа его реализации[44][45].  Рост сложности любой программной системы принципиально ограничен тем пределом, до которого ещё можно сохранять контроль над ней: если объём информации, требуемый для осмысления компонента этой системы, превышает «вместимость» мозга одного человека, то этот компонент не будет до конца понят. Станет чрезвычайно тяжело дорабатывать его или исправлять ошибки, и от каждой корректировки можно ждать введения новых ошибок из-за этого неполного знания. Такие показатели качества исходного кода, как тестируемость и модифицируемость, очевидным образом определяются коэффициентом повторного использования. Это может означать как применение разных функций к одному и тому же компоненту, так и возможность применять одну и ту же функцию к разным компонентам. Параметрически полиморфные (особенно выводящие) и динамические системы типов существенно повышают коэффициент повторного использования: например, функция, вычисляющая длину массива, будет применима к бесконечному множеству типов массивов[28][47]. Если же язык требует в сигнатуре функции указывать конкретный способ реализации входных данных, то этот коэффициент резко страдает. Например, Pascal критиковался за необходимость всегда указывать конкретный размер массива[48], а C++ — за необходимость различать . и -> при обращении к компонентам составных данных[англ.][49]. Языки высшего порядка>>> позволяют выделять схемы взаимодействия функций в многократно вызываемый блок кода (функцию высшего порядка)[36][50], а наибольших значений повторное использование достигает при переходе к языку более высокого уровня — при необходимости специально разрабатываемого для данной задачи — в этом случае повторно используется язык, а не одна функция[46], а сама разработка языка может вестись с интенсивным повторным использованием компонентов компилятора[41]. С развитием языков появились особые (присущие исключительно программированию, не требовавшиеся ранее в математике) категории компонентов и зависимостей: монады, классы типов, полиморфные ветвления, аспекты и др. Их использование позволяет выражать бо́льшую функциональность в том же объёме кода, тем самым переводя программирование-по-крупному[англ.] в более мелкий масштаб. Другие фундаментальные проблемы, связанные со сложностью крупных систем, лежат вне самих программ: это взаимодействие разрабатывающих её программистов между собой, документирование и т. д. Помимо обеспечения абстракции, не последнюю роль в этом играет концептуальная целостность>>> выбранного языка программирования[51][46]. Кроме свойств семантики языка, повторное использование может обеспечиваться посредством модульной структуры программной системы или комплекса. Более того, сколь бы гибким ни был язык, работа с огромными объёмами кодов, особенно множеством людей, требует их декомпозиции на модули тем или иным образом. Модульная структура подразумевает не просто разбиение монолитного исходного кода программы на множество текстовых файлов, а обеспечение абстракции в более крупном масштабе, то есть определение интерфейса для всякого логически завершённого фрагмента и сокрытие деталей его реализации. В зависимости от применённых в языке правил определения области видимости язык может допускать или не допускать автоматическое определение зависимостей. Если согласно правилам возможен конфликт имён, то автоопределение зависимостей невозможно, и тогда в заголовке модуля требуется явно перечислять имена модулей, компоненты которых в нём используются. Некоторые языки (например, Basic или классический Pascal Вирта) ориентированы исключительно на разработку мелких, структурно простых программ. Они не обеспечивают ни развитой системы модулей, ни гибкости конкретных фрагментов. Язык Си создавался как «высокоуровневый ассемблер», что само по себе не предполагает разработку систем выше некоторого порога сложности, поэтому поддержка крупномасштабного программирования в него заложена также не была. Некоторые языки высокого и сверхвысокого уровня (Erlang, Smalltalk, Prolog) предоставляют в качестве базовых примитивных элементов концепции, которые в других языках представляются конструктивно и алгоритмически сложными (процессы, классы, базы знаний) — аналогично разнообразным математическим исчислениям (см. также концептуальная целостность языков). Поэтому такие языки нередко рассматриваются в роли предметно-специфичных — на них выглядят простыми некоторые (но далеко не все) задачи, которые на других языках выглядят сложными. Однако расширение функциональности в других аспектах на этих языках может оборачиваться затруднениями. Standard ML и его родственники расслаиваются на два языка, из которых один — «язык-ядро» (англ. core language) — ориентирован на разработку простых программ, а другой — «язык модулей» (англ. module language),— соответственно, на нелинейную компоновку их в сложные программные системы. Со временем были построены варианты слияния их воедино (1ML). Многие другие языки также включают системы модулей, но большинство из них являются языками модулей первого порядка>>>. Язык модулей ML является единственным в своём роде языком модулей высшего порядка>>>. Языки Lisp и Forth позволяют наращивать системы произвольно и безгранично, в том числе позволяя создавать встраиваемые предметно-специфичные языки внутри себя (как своё синтаксическое и семантическое подмножество) — поэтому их нередко называют метаязыками. Наиболее популярным на сегодняшний день подходом к решению проблемы комплексирования является объектно-ориентированное программирование, хотя успешность его применения на протяжении десятилетий существования неоднократно подвергалась скепсису, и до сих пор отсутствуют достоверные данные о том, что он приносит выигрыш по сравнению с другими подходами по тем или иным показателям качества. Ему сопутствуют (а порой конкурируют) различные технологии регламентирования зависимостей между компонентами: метаклассы, контракты, прототипы, примеси, типажи и др. Более мощным подходом исторически считалось использование различных форм метапрограммирования, то есть автоматизации самого процесса разработки на различных уровнях. Принципиально различается метапрограммирование внешнее по отношению к языку и доступное в самом языке. При использовании языков первого порядка>>> сложность растущих программных систем быстро переходит порог способностей человека по восприятию и переработке информации, поэтому применяются внешние средства предварительного визуального проектирования, позволяющие обозревать сложные схемы в упрощённом виде и в уменьшенном масштабе и затем автоматически порождать каркас кода — см. CASE. В сообществах разработчиков, использующих языки высшего порядка>>>, доминирует прямо противоположный подход — пресекать саму возможность выхода сложности из-под контроля за счёт разделения информационных моделей на независимые составляющие и разработки средств автоматического преобразования одних моделей в другие — см. языково-ориентированное программирование. Фредерик Брукс[52] и Ч. Э. Р. Хоар[53] делают акцент на необходимости обеспечения концептуальной целостности информационных систем вообще и языков программирования в частности, чтобы в каждой части системы использовались сходные синтаксические и семантические формы и не требовалось осваивать помимо собственно состава системы также и правила её идиоматического использования. Хоар предсказывал, что сложность Ады станет причиной катастроф. Алан Кэй отделяет языки, являющиеся «стилем во плоти» (англ. crystalization of style) от прочих языков, являющихся «склеиванием возможностей» (англ. agglutination of features)[54]. Грег Нельсон[55] и Эндрю Аппель[англ.][28] выделяют в особую категорию «языки, наследованные от математики» (англ. mathematically-derived languages). Эти акценты призывают к использованию языков, воплощающих некое математическое исчисление, аккуратно адаптированное для того, чтобы быть более практичным языком для разработки реальных программ. Такие языки отличаются ортогональностью, и хотя это означает необходимость вручную реализовывать многие распространённые идиомы, доступные в более популярных языках в качестве примитивов языка, выразительность таких языков в целом может быть существенно выше. Лишь некоторые языки попадают под эту категорию; большинство же языков проектируются приоритетно исходя из возможности эффективной трансляции в машину Тьюринга. Многие языки опираются на общие теории, но при разработке они почти никогда не проверяются на безопасность совместного использования конкретных языковых элементов, являющихся частными приложениями этих теорий, что неизбежно приводит к несовместимости между реализациями языка. Эти проблемы либо игнорируются, либо начинают преподноситься как естественное явление (англ. «not a bug, but a feature»), но в действительности их причиной является то, что язык не был подвергнут математическому анализу[56]. Примеры математически обоснованных языков и воплощаемых ими математических моделей: Наличие математического обоснования для языка может гарантировать (или, как минимум, обещать с очень высокой вероятностью) некоторые или все из следующих положительных свойств: В. Ф. Турчин отмечает[64], что достоинства всякого формализованного языка определяются не только тем, сколь он удобен для непосредственного использования человеком, но и тем, в какой степени тексты на этом языке поддаются формальным преобразованиям. Например, ссылочная прозрачность означает, что параметры функций не обязаны вычисляться перед вызовом — вместо этого фактически переданное выражение может быть целиком подставлено на место переменной в функции, и поведение функции от этого не изменится. Это открывает возможности почти произвольных автоматических преобразований программ[англ.]: могут устраняться ненужные промежуточные представления данных, редуцироваться сложные цепочки вычислений, подбираться оптимальное количество параллельных процессов, вводиться мемоизация, и пр. С другой стороны, это означает полное отсутствие побочных эффектов, а это делает реализацию некоторых алгоритмов заведомо менее эффективной, чем при использовании изменяемого состояния. Для небольших и простых программ языки высокого уровня порождают машинный код большего размера и исполняются медленнее. Однако для алгоритмически и структурно сложных программ преимущество может быть на стороне некоторых языков высокого уровня, так как человек физически не способен выражать сложные концепции с учётом их эффективного исполнения на языке машины. К примеру, существует бенчмарк, на котором MLton и Stalin Scheme[англ.] уверенно опережают GCC. Есть масса частных причин, по которым автоматическая оптимизация в ходе трансляции языков высокого уровня даёт в принципе более высокую скорость исполнения, чем сознательный контроль способа реализации на языках низкого уровня. Например, имеются достоверные данные о том, что автоматическое управление памятью более эффективно, чем ручное, уже только при использовании динамического метода (см. сборка мусора)[65], а существует и потенциально более эффективный статический метод (см. управление памятью на основе регионов). Далее, для каждого микроконтекста необходимо распределить регистры с учётом минимизации обращения к памяти, а это требует решения задачи раскраски графа. Такого рода особенностей машинной логики очень много, так что общая информационная сложность возрастает экспоненциально при каждом «шаге на уровень вниз», а компиляция языка высокого уровня может включать десятки таких шагов. Существует множество стратегий автоматической оптимизации. Некоторые универсальны, другие могут быть применимы лишь к языкам определённой природы, а некоторые зависят от способа использования языка. Примером может служить оптимизация хвостовых вызовов и её частный случай — оптимизация хвостовой рекурсии. Хотя компиляторы многих языков осуществляют оптимизацию хвостовой рекурсии при определённых условиях, лишь некоторые языки способны семантически гарантировать оптимизацию хвостовых вызовов в общем случае. Стандарт языка Scheme требует, чтобы всякая реализация гарантировала её. Для многих функциональных языков она в принципе применима, но лишь оптимизирующие компиляторы её выполняют. В языках вроде Си или C++ она может производиться лишь в определённых случаях и лишь при использовании глобального анализа потока управления[66]. Языки высшего порядка в большинстве случаев вынуждены исполняться медленнее, чем языки первого порядка. Причины лежат как в самой декомпозиции линейного кода на цепочку вложенных вызовов, так и в вытекающих особенностях низкоуровневого представления функций (см. замыкание) и данных (обёрнутое (англ. boxed), теговое). Однако существуют техники агрессивной оптимизации программ, позволяющие редуцировать языки высшего порядка до языков первого порядка (см. дефункционализация, MLton, Stalin Scheme[англ.]). Трудно определить, какой язык программирования наиболее популярен, так как значение слова «популярность» зависит от контекста (в английском языке используется термин «usage», имеющий ещё более размытое значение). Один язык может отнимать наибольшее количество человеко-часов, на другом написано наибольшее число строк кода, третий занимает наибольшее процессорное время, а четвёртый наиболее часто служит исследовательской базой в академических кругах. Некоторые языки очень популярны для конкретных задач. Например, Кобол до сих пор доминирует в корпоративных дата-центрах, Фортран — в научных и инженерных приложениях, вариации языка Си — в системном программировании, а различные потомки ML — в формальной верификации[источник не указан 2728 дней]. Другие языки регулярно используются для создания самых разнообразных приложений. Существуют различные метрики для измерения популярности языков, каждая из которых разработана с пристрастием к определённому смыслу понятия популярности: Следует заметить, что высокие оценки по этим показателям не только никак не свидетельствуют о высоком техническом уровне языка и/или оптимизации расходов при его использовании, но и, напротив, порой могут говорить об обратном. Например, язык Кобол входит в число лидеров по количеству написанных на нём строк кода, но причиной этому является крайне низкий показатель модифицируемости кода, что делает этот код не повторно используемым, а legacy-кодом. Как следствие, поддержка программ на Коболе в кратковременной перспективе обходится значительно дороже, чем программ на большинстве современных языков, но переписывание их с нуля потребовало бы значительных единовременных вложений и может сравниваться только с долговременными расходами. Техническое несовершенство Кобола обусловлено тем, что его разрабатывали без привлечения экспертов в области информатики[67][68]. 1 История

1.1 Ранние этапы развития
1.2 Совершенствование
1.3 Объединение и развитие 1.1 Ранние этапы развития 1.2 Совершенствование 1.3 Объединение и развитие 2 Спецификация языков

2.1 Стандартизация
2.2 Алфавит
2.3 Грамматика
2.4 Семантика 2.1 Стандартизация 2.2 Алфавит 2.3 Грамматика 2.4 Семантика 3 Классификация

3.1 Языки низкого и высокого уровня
3.2 Безопасные и небезопасные языки
3.3 Компилируемые, интерпретируемые и встраиваемые языки
3.4 Языки первого и высшего порядка

3.4.1 Начальные сведения
3.4.2 Выразительность
3.4.3 Изучение


3.5 Парадигма программирования
3.6 Языки для программирования в мелком и крупном масштабе
3.7 Концептуальная целостность языков
3.8 Особые категории языков 3.1 Языки низкого и высокого уровня 3.2 Безопасные и небезопасные языки 3.3 Компилируемые, интерпретируемые и встраиваемые языки 3.4 Языки первого и высшего порядка

3.4.1 Начальные сведения
3.4.2 Выразительность
3.4.3 Изучение 3.4.1 Начальные сведения 3.4.2 Выразительность 3.4.3 Изучение 3.5 Парадигма программирования 3.6 Языки для программирования в мелком и крупном масштабе 3.7 Концептуальная целостность языков 3.8 Особые категории языков 4 Формальные преобразования и оптимизация 5 Популярность языков 6 См. также 7 Примечания 8 Литература 9 Ссылки Язык APL оказал влияние на функциональное программирование и стал первым языком, поддерживавшим обработку массивов[9]. Язык ПЛ/1 (NPL) был разработан в 1960-х годах как объединение лучших черт Фортрана и Кобола. Язык Snobol, разработанный и совершенствуемый в течение 1960-х годов, ориентированный на обработку текстов, ввёл в число базовых операций языков программирования сопоставление с образцом[10][11][12]. Язык Симула, появившийся примерно в это же время, впервые включал поддержку объектно-ориентированного программирования. В середине 1970-х группа специалистов представила язык Smalltalk, который был уже всецело объектно-ориентированным. В период с 1969 по 1973 годы велась разработка языка Си, популярного и по сей день[13] и ставшего основой для множества последующих языков, например, столь популярных, как C++ и Java. В 1972 году был создан Пролог — наиболее известный (хотя и не первый, и далеко не единственный) язык логического программирования. В 1973 году в языке ML была реализована расширенная система полиморфной типизации, положившая начало типизированным языкам функционального программирования. Контекстно-свободная грамматика Контекстно-зависимая грамматика Регулярный язык
регулярные выражения регулярные выражения Грамматика с фразовой структурой LL(n) LALR(1) Yacc ANTLR Parsec AST Дерево разбора[англ.] Абстрактный синтаксис первого порядка[англ.] Абстрактный синтаксис высшего порядка[англ.] При описании семантики в рамках операционного подхода обычно исполнение конструкций языка программирования интерпретируется с помощью некоторой воображаемой (абстрактной) ЭВМ. Аксиоматическая семантика описывает последствия выполнения конструкций языка с помощью языка логики и задания пред- и постусловий. Денотационная семантика оперирует понятиями, типичными для математики — множества, соответствия, а также суждения, утверждения и др. «приближенность» языка программирования к естественному человеческому языку и образу мысли, «удалённость» семантики языка программирования от машинного кода целевой архитектуры процессора — то есть наименьший масштаб преобразований, которые должен претерпеть код программы перед тем, как он сможет исполняться. Императивная(контрастирует с декларативной)
Процедурная
Структурная
Аспектно-ориентированная
Объектно-ориентированная
Агентно-ориентированная
Компонентно-ориентированная
Прототипно-ориентированная
Обобщённое программирование Процедурная Структурная Аспектно-ориентированная Объектно-ориентированная
Агентно-ориентированная
Компонентно-ориентированная
Прототипно-ориентированная Агентно-ориентированная Компонентно-ориентированная Прототипно-ориентированная Обобщённое программирование Декларативная(контрастирует с императивной)
Чистота языка
Чистота функции
Функциональная
В терминах рефал-машины
Аппликативная
Комбинаторная
Бесточечная
(чистая конкатенативная)
Логическая
Ограничениями Чистота языка
Чистота функции Чистота функции Функциональная
В терминах рефал-машины
Аппликативная
Комбинаторная
Бесточечная
(чистая конкатенативная) В терминах рефал-машины Аппликативная Комбинаторная Бесточечная
(чистая конкатенативная) (чистая конкатенативная) Логическая
Ограничениями Ограничениями Конкатенативная Векторная[англ.] Метапрограммирование
Языково-ориентированная
Предметно-ориентированная
Пользователями
Автоматизация процесса программирования Языково-ориентированная
Предметно-ориентированная
Пользователями Предметно-ориентированная Пользователями Автоматизация процесса программирования Рефлексивность
Гомоикони́чность Гомоикони́чность Связанные темы
Программирование в крупном и мелком масштабе[англ.]
Модульность
Полиморфизм
Продолжения и CPS
Параллелизм Программирование в крупном и мелком масштабе[англ.] Модульность Полиморфизм Продолжения и CPS Параллелизм Методы и алгоритмы
Автоматное
Потоков данных
Событийно-ориентированное
Реактивное
Сервис-ориентированное Автоматное Потоков данных Событийно-ориентированное Реактивное Сервис-ориентированное Agda, Epigram[англ.], Idris — интуиционистская теория типов Мартин-Лёфа. APL и его потомки (J, K) — оригинальная семантика, не имеющая названия, воплощающая нотацию Айверсона для исчисления массивов (часто встречается термин «array languages»). Coq — исчисление индуктивных конструкций. Erlang — исчисление процессов (первоначально в форме модели акторов, позже также построено обоснование на 



π


{\displaystyle \pi }

-исчислении[57]). Forth — стековая машина[англ.] и конкатенативный язык программирования. Haskell — теория категорий (включая «декартово замкнутую категорию», воплощающую лямбда-исчисление; категорию монад для моделирования побочных эффектов; расширение системы типов Хиндли — Милнера; систему родо́в; и др.). Joy — композиция функций и гомоморфизм (иначе говоря, чистый конкатенативный язык программирования и, как следствие, чистый функциональный). Lisp — лямбда-исчисление Чёрча (в том числе язык S-выражений, воплощающий нотацию пар Чёрча).
Scheme — «облагороженный» диалект Лиспа (сильнее типизированный, в большей степени гомоиконичный, ограничивающийся гигиеническими макроопределениями[англ.] и соблюдающий числовую башню[англ.]), дополненный нотацией продолжений. Scheme — «облагороженный» диалект Лиспа (сильнее типизированный, в большей степени гомоиконичный, ограничивающийся гигиеническими макроопределениями[англ.] и соблюдающий числовую башню[англ.]), дополненный нотацией продолжений. ML — типизированное лямбда-исчисление, то есть лямбда-исчисление, дополненное системой типов Хиндли — Милнера. Prolog — исчисление предикатов.
Mercury — исчисление предикатов, дополненное системой типов Хиндли — Милнера. Mercury — исчисление предикатов, дополненное системой типов Хиндли — Милнера. Smalltalk — теория множеств[58] (с соблюдением числовой башни[англ.]). SQL — исчисление кортежей (вариант реляционного исчисления, в свою очередь основанного на исчислении предикатов первого порядка). SGML и его потомки (HTML, XML) — нотация деревьев (важный случай графов). Unlambda — комбинаторная логика. Регулярные выражения. Рефал — оригинальная семантика Турчина, носящая название «Рефал-машины» или «Рефал-автомата», созданная на основе нормального алгоритма Маркова, воплощающая композицию теории автоматов, сопоставления с образцом и переписывания термов. Существенное повышение стабильности программ. В одних случаях — за счёт построения доказательства надёжности для самого языка (см. типобезопасность), существенного упрощения формальной верификации программ и даже получения языка, который сам является системой автоматического доказательства (Coq, Agda). В других случаях — за счёт раннего обнаружения ошибок на первых же пробных запусках программ (Forth и регулярные выражения). Обеспечение потенциально более высокой эффективности программ. Даже если семантика языка далека от архитектуры целевой платформы компиляции, к нему могут быть применимы формальные методики глобального анализа программ (хотя трудоёмкость написания даже тривиального транслятора может оказаться выше). Например, для языков Scheme и Standard ML существуют развитые полнопрограммно-оптимизирующие компиляторы и суперкомпиляторы, результат работы которых может уверенно конкурировать по скорости с языком низкого уровня Си и даже опережать последний (хотя ресурсоёмкость работы самих компиляторов оказывается значительно выше). Одна из самых быстрых СУБД — KDB[59] — написана на языке K. Язык Scala (унаследовавший математику от ML) обеспечивает на платформе JVM более высокую скорость, чем «родной» для неё язык Java[источник не указан 2698 дней]. С другой стороны, Forth имеет репутацию одного из самых нетребовательных к ресурсам языков (менее требователен, чем Си) и используется для разработки приложений реального времени под самые маломощные ЭВМ; кроме того, транслятор Форта является одним из наименее трудоёмких в реализации на ассемблере. Заранее известный (неограниченный или, наоборот, чётко очерченный) предел роста сложности программных компонентов, систем и комплексов, которые можно выразить средствами этого языка с сохранением показателей качества[28][60]. Языки, не имеющие математического обоснования (а именно такие наиболее часто применяются в мейнстриме: C++, Java, C#, Delphi и др.), на практике ограничивают реализуемую функциональность и/или снижают качество по мере усложнения системы[61], так как им присущи экспоненциальные кривые роста сложности как относительно работы одного отдельно взятого человека, так и относительно сложности управления проектом в целом[51][62]. Прогнозируемая сложность системы приводит либо к поэтапной декомпозиции проекта на множество более мелких задач, каждая из которых решается соответствующим языком, либо к языково-ориентированному программированию для случая, когда адресуемой языком задачей является как раз описание семантик и/или символьные вычисления (Lisp, ML, Haskell, Рефал, Регулярные выражения). Языки с неограниченным пределом роста сложности программ нередко относят к метаязыкам (что в непосредственном толковании термина не верно, но практике сводимо, так как всякий мини-язык, выбранный для решения некоторой подзадачи в составе общей задачи, может быть представлен в виде синтаксического и семантического подмножества данного языка, не требуя трансляции[63]). Удобство для человека при решении задач, на которые этот язык ориентирован по своей природе (см. проблемно-ориентированный язык), что в некоторой степени также способно (косвенно) повлиять на повышение стабильности результирующих программ за счёт повышения вероятности обнаружения ошибок в исходном коде и снижения дублирования кода. Учебные Предметно-специфичные Эзотерические Визуальные подсчёт числа вакансий, упоминающих язык; количество проданных книг (учебников или справочников); оценка количества строк кода, написанных на языке (что не принимает в расчёт редко публикуемые случаи использования языков); подсчёт упоминаний языка в запросах поисковиков. Компьютерный язык Программирование Hello, world! Стандарт оформления кода Теория языка программирования ↑ ISO/IEC/IEEE 24765:2010 Systems and software engineering — Vocabulary ↑ ISO/IEC 2382-1:1993, Information technology — Vocabulary — Part 1: Fundamental terms ↑ Sammar Qayyum, Saqib Ali. A Pragmatic Comparison of Four Different Programming Languages // ScienceOpen Preprints. — 2021-06-21. — doi:10.14293/S2199-1006.1.SOR-.PP5RV1O.v1. Архивировано 10 июня 2023 года. ↑ Rojas, Raúl, et al. (2000). «Plankalkül: The First High-Level Programming Language and its Implementation». Institut für Informatik, Freie Universität Berlin, Technical Report B-3/2000. (full text) Архивная копия от 18 октября 2014 на Wayback Machine ↑ Computer Languages, 1989, 1. Невидимый конструктор § Создание кодов, понятных человеку, с. 16. ↑ Linda Null, Julia Lobur, The essentials of computer organization and architecture, Edition 2, Jones & Bartlett Publishers, 2006, ISBN 0-7637-3769-0, p. 435 ↑ O'Reilly Media. History of programming languages  (неопр.) (PDF). Дата обращения: 5 октября 2006. Архивировано из оригинала 28 февраля 2008 года. ↑ Frank da Cruz. IBM Punch Cards Архивная копия от 13 мая 2011 на Wayback Machine Columbia University Computing History Архивная копия от 23 мая 2011 на Wayback Machine. ↑ Richard L. Wexelblat: History of Programming Languages, Academic Press, 1981, chapter XIV. ↑ Пратт, 1979, 4.6. Сопоставление с образцом, с. 130—132. ↑ Пратт, 1979, 15. Снобол 4, с. 483—516. ↑ Пратт, Зелковиц, 2002, 8.4.2. Сопоставление с образцом, с. 369—372. ↑ François Labelle. Programming Language Usage Graph  (неопр.). SourceForge. Дата обращения: 21 июня 2006. Архивировано из оригинала 17 июня 2006 года. ↑ Hayes, Brian. The Semicolon Wars (англ.) // American Scientist[англ.] : magazine. — 2006. — Vol. 94, no. 4. — P. 299—303. ↑ Tetsuro Fujise, Takashi Chikayama, Kazuaki Rokusawa, Akihiko Nakase (December 1994). «KLIC: A Portable Implementation of KL1» Proc. of FGCS '94, ICOT Tokyo, December 1994. http://www.icot.or.jp/ARCHIVE/HomePage-E.html Архивная копия от 25 сентября 2006 на Wayback Machine KLIC is a portable implementation of a concurrent logic programming language KL1. ↑ Jim Bender. Mini-Bibliography on Modules for Functional Programming Languages  (неопр.). ReadScheme.org (15 марта 2004). Дата обращения: 27 сентября 2006. Архивировано из оригинала 24 сентября 2006 года. ↑ Stroustrup, Bjarne Evolving a language in and for the real world: C++ 1991-2006  (неопр.). Дата обращения: 16 января 2017. Архивировано 20 ноября 2007 года. ↑ Т. Пратт, М. Зелковиц. Языки программирования. Разработка и реализация. — 4. — Санкт-Петербург : Питер, 2002. — С. 203. — 688 с. — 4000 экз. — ISBN 5-318-00189-0. ↑ Страуструп Б. Дизайн и эволюция C++. — Санкт-Петербург : Питер, 2006. — С. 74—76. — 448 с. — 2000 экз. — ISBN 5-469-01217-4. ↑ Сейбел - Кодеры за работой, 2011, Глава 12. Кен Томпсон, с. 414. ↑ Зуев Е.А., Кротов А.Н., Сухомлин В.А. Язык программирования Си++: этапы эволюции и современное состояние  (неопр.) (4 октября 1996). Дата обращения: 16 января 2017. Архивировано 18 января 2017 года. ↑ Paulson, «ML for the Working Programmer», 1996, с. 213. ↑ Paulson, «ML for the Working Programmer», 1996, с. 1. ↑ Брукс, 1995. ↑ Mernik, 2012, с. 2—12. ↑ Paulson, «ML for the Working Programmer», 1996, с. 9. ↑ Rick Byers. Garbage Collection Algorithms  (неопр.). courses.cs.washington.edu. — Project for CSEP 521, Winter 2007. Дата обращения: 28 декабря 2016. Архивировано 29 августа 2017 года. ↑ 1 2 3 4 5 Appel - A Critique of Standard ML, 1992. ↑ Harper — Practical Foundations for Programming Languages, 2012, Chapter 4. Statics, с. 35. ↑ Mitchel, 2004, 6.2.1 Type Safety, с. 132—133. ↑ Comparison of static code analyzers: CppCat, Cppcheck, PVS-Studio and Visual Studio  (неопр.). Дата обращения: 25 октября 2016. Архивировано 26 октября 2016 года. ↑ Comparing PVS-Studio with other code analyzers  (неопр.). Дата обращения: 25 октября 2016. Архивировано 26 октября 2016 года. ↑ Пратт, 1979, 2.7. Связывание и время связывания, с. 46—51. ↑ Reynolds, «Theories of programming languages», 1998, 12.4 Deriving a First-Order Semantics. ↑ 1 2 Strachey — Fundamental Concepts, 1967, 3.5.1. First and second class objects, с. 32—34. ↑ 1 2 SICP. ↑ Harper — Practical Foundations for Programming Languages, 2012, 8.2 Higher-Order Functions, с. 67. ↑ 1 2 Пратт, Зелковиц, 2002, 1.1 Зачем изучать языки программирования, с. 17—18. ↑ Bruce A. Tate. Foreword // Seven Languages in Seven Weeks: A Pragmatic Guide to Learning Programming Languages. — Pragmatic Bookshelf, 2010. — С. 14—16. — ISBN 978-1934356593. ↑ Пратт, Зелковиц, 2002, 1.1 Зачем изучать языки программирования, с. 18. ↑ 1 2 Hudak, 1998. ↑ Paulson, "ML for the Working Programmer", 1996, с. 1. ↑ Clash Архивная копия от 4 января 2024 на Wayback Machine — встраиваемый DSL на Haskell, предназначенный для моделирования процессоров и генерации описаний на Verilog/VHDL ↑ Ахо, Ульман, 1992. ↑ Joyner, 1996, 2.2 Communication, abstraction and precision, с. 4. ↑ 1 2 3 Ward, 1994. ↑ Paulson, «ML for the Working Programmer», 1996, с. 63—64. ↑ Kernigan about Pascal, 1981. ↑ Joyner, 1996, 3.17 ‘.’ and ‘->’, с. 26. ↑ Paulson, «ML for the Working Programmer», 1996, с. 177—178. ↑ 1 2 Брукс, 1975, 1995. ↑ Брукс, 1975, 1995, Достижение концептуальной целостности, с. 30. ↑ C.A.R. Hoare — The Emperor’s Old Clothes, Communications of the ACM, 1981 ↑ Алан Кэй. The Early History of Smalltalk. — Apple Computer, ACM SIGPLAN Notices, vol.28, № 3, March 1993. Архивировано 14 сентября 2012 года. ↑ Greg Nelson. Systems Programming with Modula-3. — NJ: Prentice Hall, Englewood Cliffs, 1991. — 288 с. — ISBN 978-0135904640. ↑ Commentary on SML, 1991, Aims of the Commentary, с. vii. ↑ Thomas Noll, Chanchal Kumar Roy. Modeling Erlang in the Pi–Calculus. — ACM 1-59593-066-3/05/0009, 2005. Архивировано 1 августа 2014 года. ↑ Design Principles Behind Smalltalk  (неопр.). Дата обращения: 3 июня 2014. Архивировано 19 июня 2014 года. ↑ kx: Calibrated performance  (неопр.). Дата обращения: 3 июня 2014. Архивировано 21 июня 2014 года. ↑ Luca Cardelli. Typeful programming. — IFIP State-of-the-Art Reports, Springer-Verlag, 1991. Архивировано 22 марта 2016 года. ↑ Ward, 1994: «There is a fundamental limit to complexity of any software system for it to be still manageable: if it requires more than «one brainfull» of information to understand a component of the system, then that component will not be understood fully. It will be extremely difficult to make enhancements or ﬁx bugs, and each ﬁx is likely to introduce further errors due to this incomplete knowledge.». ↑ Гласс, 2004. ↑ Czarnecki et al, 2004. ↑ Турчин В. Ф. Эквивалентные преобразования программ на РЕФАЛе: Труды ЦНИПИАСС 6: ЦНИПИАСС, 1974. ↑ B. Zorn. The Measured Cost of Conservative Garbage Collection. Technical Report CU-CS-573-92. // University of Colorado at Boulder. — 1993. — doi:10.1.1.14.1816. ↑ Ehud Lamm. ↑ Richard L. Conner. Cobol, your age is showing (англ.) // Computerworld : magazine. — International Data Group, 1984. — 14 May (vol. 18, no. 20). — P. ID/7—ID/18. — ISSN 0010-4841. ↑ Robert L. Mitchell. Cobol: Not Dead Yet  (неопр.). Computerworld (4 октября 2006). Дата обращения: 27 апреля 2014. Архивировано 27 апреля 2014 года. Гавриков М. М., Иванченко А. Н., Гринченков Д. В. Теоретические основы разработки и реализации языков программирования. — КноРус, 2013. — 178 с. — ISBN 978-5-406-02430-0. Криницкий Н. А., Миронов Г. А., Фролов Г. Д. Программирование. — ГИФМЛ, 1963. — 384 с. Братчиков И. Л. Синтаксис языков программирования. — Наука, 1975. — 230 с. Лавров С. С. Основные понятия и конструкции языков программирования. — Финансы и статистика, 1982. — 80 с. Christopher Strachey. Fundamental Concepts in Programming Languages ( (англ.)). — 1967. Архивировано 12 августа 2017 года.
Повторно опубликовано: Christopher Strachey. Fundamental Concepts in Programming Languages ( (англ.)) // Higher-Order and Symbolic Computation. — 2000. — Т. 13. — С. 11—49. — doi:10.1023/A:1010000313106. Повторно опубликовано: Christopher Strachey. Fundamental Concepts in Programming Languages ( (англ.)) // Higher-Order and Symbolic Computation. — 2000. — Т. 13. — С. 11—49. — doi:10.1023/A:1010000313106. Харольд Абельсон, Джеральд Джей Сассман, Джули Сассман. Структура и интерпретация компьютерных программ (SICP). Фредерик Брукс. Мифический человеко-месяц или Как создаются программные системы. — Addison-Wesley, 1975, 1995. — ISBN ISBN 5-93286-005-7 (1-е изд.). Теренс Пратт. Языки программирования: разработка и реализация = Programming Language Design and Implementation (PLDI). — 1-е издание. — Мир, 1979. Альфред Ахо, Рави Сети, Джеффри Ульман. Компиляторы: принципы, технологии и инструменты. — Addison-Wesley Publishing Company, Издательский дом «Вильямс», 1985, 2001, 2003. — 768 с. — ISBN 5-8459-0189-8 (рус.), 0-201-10088-6 (ориг.). Time-Life Books. Язык компьютера = Computer Languages. — М.: Мир, 1989. — Т. 2. — 240 с. — (Understanding Computers). — 100 000 экз. — ISBN 5-03-001148-X. Лука Карделли[англ.]. Typeful programming ( (англ.)) // IFIP State-of-the-Art Reports. — Springer-Verlag, 1991. — Вып. Formal Description of Programming Concepts. — С. 431—507. Robin Milner, Mads Tofte[англ.]. Commentary on Standard ML. — MIT Press, 1991. — ISBN 0-262-63132-7. Архивировано 1 декабря 2014 года. Альфред Ахо, Джеффри Ульман. Foundations of Computer Science. — Computer Science Press, 1992. Andrew W. Appel. A Critique of Standard ML. — Princeton University, revised version of CS-TR-364-92, 1992. Martin Ward. Language Oriented Programming. — Computer Science Department, Science Labs, 1994. Ian Joyner. A Critique of C++ and Programming and Language Trends of the 1990s - 3rd Edition. // копирайт и список изданий. — 1996. Lawrence C. Paulson[англ.]. ML for the Working Programmer. — 2nd. — Cambridge, Great Britain: Cambridge University Press, 1996. — 492 с. — ISBN 0-521-57050-6 (твёрдый переплёт), 0-521-56543-X (мягкий переплёт). John C. Reynolds. Theories of programming languages. — Cambridge University Press, 1998. — ISBN 978-0-521-59414-1 (hardback), 978-0-521-10697-9 (paperback). Andrew W. Appel. Modern compiler implementation in ML (in C, in Java) (неопр.). — Cambridge, Great Britain: Cambridge University Press, 1998. — 538 с. — ISBN (ML) 0-521-58274-1 (hardback), 0-521-60764-7 (paperback). Paul Hudak. Modular Domain Speciﬁc Languages and Tools. — IEEE Computer Society Press, Department of Computer Science, Yale University, 1998. Архивировано 17 октября 2013 года. Роберт У. Себеста. Основные концепции языков программирования = Concepts of Programming Languages / Пер. с англ. — 5-е изд. — М.: Вильямс, 2001. — 672 с. — 5000 экз. — ISBN 5-8459-0192-8 (рус.), ISBN 0-201-75295-6 (англ.). Вольфенгаген В. Э. Конструкции языков программирования. Приёмы описания. — М.: Центр ЮрИнфоР, 2001. — 276 с. — ISBN 5-89158-079-9. Паронджанов В. Д. Как улучшить работу ума. Алгоритмы без программистов — это очень просто! — М.: Дело, 2001. — 360 с. — ISBN 5-7749-0211-0. Pierce, Benjamin C. Types and Programming Languages. — MIT Press, 2002. — ISBN 0-262-16209-1.
Перевод на русский язык: Пирс Б. Типы в языках программирования. — Добросвет, 2012. — 680 с. — ISBN 978-5-7913-0082-9. Перевод на русский язык: Пирс Б. Типы в языках программирования. — Добросвет, 2012. — 680 с. — ISBN 978-5-7913-0082-9. Теренс Пратт, Марвин Зелковиц. Языки программирования: разработка и реализация. — 4-е издание. — Питер, 2002. — (Классика Computer Science). — ISBN 978-5-318-00189-5. Martin Campbell-Kelly. From Airline Reservations to Sonic the Hedgehog: A History of the Software Industry. — MIT Press, 2003. — 372 с. — (History of Computing). — ISBN 978-1422391761. Роберт Гласс. Факты и заблуждения профессионального программирования. — «Символ-Плюс», 2004. — 240 с. — ISBN 5-93286-092-8, 978-5-93286-092-2. John C. Mitchell. Concepts in Programming Languages. — Cambridge University Press, 2004. — ISBN 0-511-04091-1 (eBook in netLibrary); 0-521-78098-5 (hardback). K. Czarnecki, J. O’Donnell, J. Striegnitz, W. Taha. DSL implementation in metaocaml, template haskell, and C++. — University of Waterloo, University of Glasgow, Research Centre Julich, Rice University, 2004. Архивировано 5 марта 2016 года. Ф. Бьянкуцци, Ш. Уорден. Пионеры программирования. Диалоги с создателями наиболее популярных языков программирования. — СПб.: Символ-Плюс, 2010. — 608 с. — ISBN 978-5-93286-170-7. Питер Сейбел. Кодеры за работой. Размышления о ремесле программиста. — Символ-Плюс, СПб. — 2011. — ISBN 978-5-93286-188-2, 978-1-4302-1948-4 (англ.). Robert Harper[англ.]. Practical Foundations for Programming Languages. — version 1.37 (revised 01.11.2014). — licensed under the Creative Commons Attribution-Noncommercial-No Derivative Works 3.0 United States License., 2012. — 544 с. Архивная копия от 24 октября 2015 на Wayback Machine Marjan Mernik. Formal and Practical Aspects of Domain-Specific Languages. — IGI Global, 2012. — ISBN 978-1-4666-2092-6. Книги в Викиучебнике Медиафайлы на Викискладе The Language List (недоступная ссылка — история) (англ.) — более 2500 языков с кратким описанием Computer Languages History (англ.) — история языков программирования (с 1954 по май 2004) (содержит регулярно обновляемую диаграмму) Examples (недоступная ссылка — история) (англ.) — примеры программирования на 162 языках Programming Language Popularity (англ.) — регулярно обновляемое исследование популярности языков программирования 10 языков программирования, которые стоит изучать (2006 г.) Архивная копия от 9 ноября 2011 на Wayback Machine Programming Community Index (англ.) — регулярно обновляемый рейтинг популярности языков программирования Computer Language Shootout Benchmarks (недоступная ссылка — история) (англ.) — сравнение языков программирования по эффективности Programming Languages that are Loved (англ.) — сравнение языков программирования по «любви» и «ненависти» к ним Брайан Керниган. Why Pascal is Not My Favorite Programming Language. — 1981. Ehud Lamm. Hidden complexities of tail-call/tail-recursion optimization. LtU Classic Archives (англ.). Lambda the Ultimate (7 декабря 2003). Дата обращения: 30 ноября 2016. nLab Большая датская Большая китайская Большая российская (старая версия) Ларусса Britannica (онлайн) Treccani BNF: 13318353n GND: 4047409-4 J9U: 987007538690905171 LCCN: sh85107313 NDL: 00569224 NKC: ph115890 История Хронология 1C Ада Алгол Ассемблер APL Бейсик Си C++ C# D Delphi Кобол Erlang F# Форт Фортран Go Groovy Haskell Java JavaScript Julia Kotlin Лисп Lua MATLAB Оберон Objective-C OCaml Паскаль Perl PL/SQL PHP Python Ruby Rust Scala UNIX Shell Smalltalk Swift Visual Basic .NET Zig Языки программирования Википедия:Cite web (не указан язык) Страницы, использующие волшебные ссылки ISBN Википедия:Статьи с неэнциклопедическим содержанием Википедия:Статьи с шаблонами недостатков по алфавиту Википедия:Статьи со слишком большим количеством внутренних ссылок Википедия:Статьи без источников (не распределённые по типам) Википедия:Нет источников с января 2023 Википедия:Статьи с утверждениями без источников более 14 дней Википедия:Статьи с незавершёнными разделами Википедия:Нет источников с января 2017 Википедия:Нет источников с декабря 2016 Википедия:Статьи с некорректным использованием шаблонов:Книга (указан неверный код языка) Статьи со ссылками на Викиучебник Статьи со ссылками на Викисклад Википедия:Статьи с нерабочими ссылками Википедия:Статьи с некорректным использованием гарвардской системы цитирования Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Викисклад Медиавики Викиучебник Викифункции Викиновости Afrikaans Alemannisch አማርኛ Aragonés अंगिका العربية الدارجة مصرى অসমীয়া Asturianu Azərbaycanca تۆرکجه Башҡортса Boarisch Žemaitėška Беларуская Беларуская (тарашкевіца) Български भोजपुरी ပအိုဝ်ႏဘာႏသာႏ বাংলা Brezhoneg Bosanski Basa Ugi Català 閩東語 / Mìng-dĕ̤ng-ngṳ̄ کوردی Čeština Чӑвашла Cymraeg Dansk Deutsch Zazaki Ελληνικά English Esperanto Español Eesti Euskara Estremeñu فارسی Suomi Na Vosa Vakaviti Français Nordfriisk Gaeilge Gàidhlig Galego עברית हिन्दी Hrvatski Hornjoserbsce Magyar Հայերեն Interlingua Bahasa Indonesia Interlingue Ilokano Ido Íslenska Italiano 日本語 La .lojban. Jawa ქართული Taqbaylit Қазақша ភាសាខ្មែរ 한국어 Kurdî Кыргызча Latina Lëtzebuergesch Lombard Lietuvių Latviešu Олык марий Македонски മലയാളം Монгол मराठी Bahasa Melayu Mirandés မြန်မာဘာသာ Plattdüütsch नेपाली Nederlands Norsk nynorsk Norsk bokmål ߒߞߏ Occitan ਪੰਜਾਬੀ Polski Piemontèis پنجابی پښتو Português Runa Simi Română Русиньскый Саха тыла Sardu Scots Srpskohrvatski / српскохрватски ၽႃႇသႃႇတႆး සිංහල Simple English Slovenčina Slovenščina Shqip Српски / srpski Sunda Svenska Kiswahili Ślůnski தமிழ் తెలుగు Tetun Тоҷикӣ ไทย Tagalog Türkçe Татарча / tatarça ئۇيغۇرچە / Uyghurche Українська اردو Oʻzbekcha / ўзбекча Vèneto Tiếng Việt Winaray 吴语 მარგალური ייִדיש Yorùbá 中文 文言 閩南語 / Bân-lâm-gú 粵語 IsiZulu Эта страница в последний раз была отредактирована 3 мая 2024 в 16:34. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Электро́нная вычисли́тельная маши́на (сокращённо ЭВМ) — комплекс технических, аппаратных и программных средств, предназначенных для автоматической обработки информации, вычислений, автоматического управления. При этом основные функциональные элементы (логические, запоминающие, индикационные и др.) выполнены на электронных элементах[1]. Термин машина означает устройство, выполняющее механические движения. Современные компьютеры не являются машинами, название сохранилось за ними от простых счётных машин[2]. Согласно Большому энциклопедическому словарю (2000) ЭВМ — то же, что компьютер. Задолго до появления ЭВМ существовали другие виды вычислительных машин. Понятие «электронно-вычислительная машина» следует отличать от более широкого понятия «вычислительная машина» (компьютер);[источник не указан 2336 дней] ЭВМ является одним из способов воплощения вычислителя. ЭВМ подразумевает использование электронных компонентов в качестве её функциональных узлов, однако вычислитель может быть устроен и на других принципах — вычисления могут быть произведены механическим, биологическим, оптическим, квантовым и другими способами, работая за счёт перемещения механических частей, движения электронов, фотонов или за счёт других физических явлений. Кроме того, по типу функционирования вычислительная машина может быть аналоговой, цифровой и комбинированной (аналого-цифровой).[источник не указан 2336 дней] В настоящее время термин «ЭВМ», как относящийся больше к вопросам конкретного физического воплощения вычислителя, почти вытеснен из бытового употребления и в основном используется инженерами цифровой электроники, как правовой термин в юридических документах, а также в историческом смысле — для обозначения вычислительной техники 1940—1980-х годов и больших вычислительных устройств, в отличие от персональных. Во времена широкого распространения аналоговых вычислительных машин, что тоже были, в своём подавляющем большинстве, электронными, во избежание недоразумений использовалось название «цифровая электронная вычислительная машина» (ЦЭВМ) или «счётная электронная вычислительная машина» (СЭВМ); для подчёркивания того, что это устройство осуществляет непосредственно вычисления результата, в то время как аналоговая машина по сути осуществляет процесс физического моделирования с получением результата измерением). По размеру аппаратной части могут быть выделены различные классы ЭВМ[5]. 1 Особенности терминологии 2 История создания ЭВМ 3 Основные виды ЭВМ 4 См. также 5 Примечания 6 Ссылки Первые гражданские электромеханические вычислительные машины Z1 и Z2 были созданы в конце 1930-х годов в Германии. 1941 год — Конрад Цузе создал вычислительную машину Z3, которая имела все свойства современного компьютера. 1942 год — в университете штата Айова Джон Атанасов и его аспирант Клиффорд Берри создали (а точнее — разработали и начали монтировать) первую в США электронную цифровую вычислительную машину. Хотя эта машина так и не была завершена в связи с уходом Атанасова на войну, она, как пишут историки, оказала большое влияние на Джона Мокли, который, спустя четыре года создал первую в мире ЭВМ ЭНИАК. В начале 1943 года успешные испытания прошла первая американская вычислительная машина Марк I, предназначенная для выполнения сложных баллистических расчётов для ВМС США. В конце 1943 года заработала английская вычислительная машина специального назначения «Колосс». Машина работала над расшифровкой секретных кодов нацистской Германии. В 1944 году Конрад Цузе разработал ещё более быструю вычислительную машину — Z4. 1946 год стал годом создания первой американской гражданской универсальной электронной цифровой вычислительной машины ЭНИАК. В 1950 году в Киеве под руководством академика С. А. Лебедева был создан первый советский сверхвычислитель МЭСМ, на следующий год в Москве под руководством И. С. Брука была создана ЭВМ М-1. В 1959 году в Париже состоялся Всемирный компьютерный конгресс и была создана международная федерация по обработке информации[3] С 1962 года ЭВМ применяются на космических кораблях Союз и Л-1 (облёт Луны). 1967 стал годом, посвящённым формальным методам проектирования электронных вычислительных машин под руководством Глушкова. 30 октября 1967 года в СССР произведена первая в мире полностью автоматическая стыковка двух космических аппаратов (беспилотных кораблей «Союз» под названиями «Космос-186» и «Космос-188»[4]. В 1969 году ЭВМ ракеты Н-1 обрабатывал данные с более чем 13 тысячи датчиков ракеты. К 1984 году в СССР было 10 тыс. компьютеров в школах. Супер ЭВМ (Суперкомпьютеры). Большие ЭВМ (Мэйнфреймы). Мини-ЭВМ — малая ЭВМ, имеет небольшие размеры и стоимость. Появившись в конце 1960-х годов, мини-ЭВМ имели широкие возможности в решении задач различных классов. МикроЭВМ — ЭВМ малых размеров, созданная на базе микропроцессора. Ранее различали микроЭВМ следующих видов: встроенные и персональные, настольные и портативные, профессиональные и бытовые. Термин ПЭВМ (персональная ЭВМ)[6][7] вытеснен синонимом «персональный компьютер» (сокращённо: ПК). В настоящее время персональные компьютеры не относятся к микрокомпьютерам[источник не указан 308 дней]. Вычислительная машина Чарлз Бэббидж Ада Лавлейс Энциклопедия кибернетики ZX Spectrum БЦВМ ЕС ЭВМ СМ ЭВМ ЕС ПЭВМ Квантовый компьютер Биокомпьютер Оптический компьютер ↑ Першиков В. И., Савинков В. М. Толковый словарь по информатике / Рецензенты: канд. физ.-мат. наук А. С. Марков и д-р физ.-мат. наук И. В. Поттосин. — М.: Финансы и статистика, 1991. — 543 с. — 50 000 экз. — ISBN 5-279-00367-0. ↑ Машина//Философский словарь инженера —М.: Издательский дом МЭИ, 2016. ↑ Всемирные компьютерные конгрессы  (неопр.). Дата обращения: 31 мая 2023. Архивировано 31 мая 2023 года. ↑ Первая в мире полностью автоматическая стыковка двух космических аппаратов  (неопр.). Дата обращения: 14 июля 2022. Архивировано 24 октября 2021 года. ↑ Федотова Е. Л., Федотов А. А. ИНФОРМАТИКА: КУРС ЛЕКЦИЙ. ↑ Музей компьютеров ПЭВМ Искра  (неопр.). Дата обращения: 14 июля 2022. Архивировано 25 ноября 2018 года. ↑ Архивированная копия  (неопр.). Дата обращения: 16 декабря 2016. Архивировано из оригинала 27 октября 2016 года. «История советских компьютеров» — фильм от 26 мая 2018 года на YouTube-канале «House of NHTi». Башкирская Большая российская (научно-образовательный портал) Современной Украины Вычислительная техника Страницы, использующие волшебные ссылки ISBN Википедия:Статьи к переработке Википедия:Статьи с шаблонами недостатков по алфавиту Википедия:Статьи без источников (тип: не указан) Википедия:Нет источников с января 2018 Википедия:Статьи с утверждениями без источников более 14 дней Википедия:Статьи с незавершёнными разделами Википедия:Нет источников с июля 2023 Статьи с дополнительными интервики-ссылками Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати Аԥсшәа Acèh Afrikaans Alemannisch አማርኛ Aragonés Ænglisc अंगिका العربية ܐܪܡܝܐ الدارجة مصرى অসমীয়া Asturianu अवधी Aymar aru Azərbaycanca تۆرکجه Башҡортса Boarisch Žemaitėška Bikol Central Беларуская Беларуская (тарашкевіца) Betawi Български भोजपुरी Bislama ပအိုဝ်ႏဘာႏသာႏ বাংলা བོད་ཡིག বিষ্ণুপ্রিয়া মণিপুরী Brezhoneg Bosanski Basa Ugi Буряад Català 閩東語 / Mìng-dĕ̤ng-ngṳ̄ Нохчийн Cebuano Tsetsêhestâhese کوردی Qırımtatarca Čeština Kaszëbsczi Словѣньскъ / ⰔⰎⰑⰂⰡⰐⰠⰔⰍⰟ Чӑвашла Cymraeg Dansk Deutsch Thuɔŋjäŋ Zazaki डोटेली Ελληνικά Emiliàn e rumagnòl English Esperanto Español Eesti Euskara Estremeñu فارسی Suomi Võro Na Vosa Vakaviti Føroyskt Français Nordfriisk Furlan Gaeilge 贛語 Kriyòl gwiyannen Gàidhlig Galego گیلکی Avañe'ẽ 𐌲𐌿𐍄𐌹𐍃𐌺 ગુજરાતી Wayuunaiki Gaelg Hausa 客家語/Hak-kâ-ngî עברית हिन्दी Fiji Hindi Hrvatski Kreyòl ayisyen Magyar Հայերեն Արեւմտահայերէն Interlingua Bahasa Indonesia Interlingue Igbo Iñupiatun Ilokano Ido Íslenska Italiano ᐃᓄᒃᑎᑐᑦ / inuktitut 日本語 Patois La .lojban. Jawa ქართული Qaraqalpaqsha Kabɩyɛ Kongo Gĩkũyũ Қазақша ភាសាខ្មែរ ಕನ್ನಡ 한국어 Къарачай-малкъар कॉशुर / کٲشُر Kurdî Коми Kernowek Кыргызча Latina Ladino Lëtzebuergesch Лезги Lingua Franca Nova Limburgs Ligure Lombard Lingála ລາວ Lietuvių Latviešu मैथिली Basa Banyumasan Malagasy Олык марий Minangkabau Македонски മലയാളം Монгол ဘာသာမန် मराठी Bahasa Melayu Malti Mirandés မြန်မာဘာသာ Эрзянь مازِرونی Napulitano Plattdüütsch Nedersaksies नेपाली नेपाल भाषा Nederlands Norsk nynorsk Norsk bokmål ߒߞߏ Occitan Livvinkarjala Oromoo ଓଡ଼ିଆ Ирон ਪੰਜਾਬੀ Kapampangan Polski Piemontèis پنجابی Ποντιακά پښتو Português Runa Simi Romani čhib Română Русиньскый संस्कृतम् Саха тыла ᱥᱟᱱᱛᱟᱲᱤ Sardu Sicilianu Scots سنڌي Srpskohrvatski / српскохрватски Taclḥit සිංහල Simple English Slovenčina سرائیکی Slovenščina Gagana Samoa ChiShona Soomaaliga Shqip Српски / srpski Sesotho Seeltersk Sunda Svenska Kiswahili Ślůnski Sakizaya தமிழ் Tayal ತುಳು తెలుగు Тоҷикӣ ไทย Türkmençe Tagalog Tolışi Türkçe Xitsonga Татарча / tatarça ئۇيغۇرچە / Uyghurche Українська اردو Oʻzbekcha / ўзбекча Vèneto Vepsän kel’ Tiếng Việt West-Vlams Volapük Walon Winaray Wolof 吴语 IsiXhosa მარგალური ייִדיש ⵜⴰⵎⴰⵣⵉⵖⵜ ⵜⴰⵏⴰⵡⴰⵢⵜ 中文 文言 閩南語 / Bân-lâm-gú 粵語 IsiZulu Эта страница в последний раз была отредактирована 28 апреля 2024 в 09:42. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Прогресс компьютерных технологий определил процесс появления новых разнообразных знаковых систем для записи алгоритмов языков программирования. Смысл появления такого языка — упрощение программного кода. Языки программирования принято делить на пять поколений. В первое поколение входят языки, созданные в начале 50-х годов, когда первые компьютеры только появились на свет. Это был первый язык ассемблера, созданный по принципу «одна инструкция — одна строка». Физические принципы работы электронных устройств ЭВМ таковы, что компьютер может воспринимать команды, состоящие только из единиц и нулей — последовательность перепада напряжения, то есть машинный код. На начальной стадии развития ЭВМ человеку было необходимо составлять программы на языке, понятном компьютеру, в машинных кодах. Каждая команда состояла из кода операций и адресов операндов, выраженных в виде различных сочетаний единиц и нулей. Итак, любая программа для процессора выглядела на то время как последовательность единиц и нулей. Как показала в дальнейшем практика общения с компьютером, такой язык громоздок и неудобен. При пользовании им легко допустить ошибку, записав не в той последовательности 1 или 0. Программу очень трудно контролировать. Кроме того, при программировании в машинных кодах надо хорошо знать внутреннюю структуру ЭВМ, принцип работы каждого блока. И самое плохое в таком языке, что программы на данном языке — очень длинные последовательности единиц и нулей являются машинно зависимыми, то есть для каждой ЭВМ необходимо было составлять свою программу, а также программирование в машинных кодах требует от программиста много времени, труда, повышенного внимания. Довольно скоро стало понятно, что процесс формирования машинного кода можно автоматизировать. Уже в 1950 году для записи программ начали применять мнемонический язык — язык ассемблера. Язык ассемблера позволил представить машинный код в более удобной для человека форме: для обозначения команд и объектов, над которыми эти команды выполняются, вместо двоичных кодов использовались буквы или сокращенные слова, которые отражали суть команды. Например, на языке ассемблера команда сложения двух чисел обозначается словом add, тогда как ее машинный код может быть таким: 000010. Ассемблер — язык программирования низкого уровня. Язык программирования низкого уровня — язык программирования, который ориентирован на конкретный тип процессора и учитывает его особенности. В данном случае «низкий уровень» не значит «плохой». Имеется в виду, что операторы языка близки к машинному коду и ориентированы на конкретные команды процессора. Появление языка ассемблера значительно облегчило жизнь программистов, так как теперь вместо рябящих в глазах нулей и единиц они могли писать программу командами, состоящими из символов, приближенных к обычному языку. Для того времени этот язык был новшеством и пользовался популярностью, так как позволял писать программы небольшого размера, что при тех машинах - критерий значительный. Но сложность разработки в нём больших программных комплексов привела к появлению языков третьего поколения — языков высокого уровня. Но на этом применение ассемблера не закончилось, он пользуется популярностью в узких кругах и по сей день. Сейчас его используют в написании отдельных фрагментов программ или иногда в написании самих программ. Примеров может быть много, но самые яркие это использование ассемблера в написании драйверов, игр и загрузчиков ОС. Не стоит забывать, что у хакеров этот язык так же пользуется популярностью, в связи с тем, что скорость работы полученной программы значительно выше скорости программы написанной на языке программирования высокого уровня. Это объясняется тем, что получившийся размер программы очень мал. Разработчики антивирусов так же используют ассемблер в некоторых модулях своих программ, что так же обеспечивает их быстродействие.[1] Середина 50-х гг. характеризуется стремительным прогрессом в области программирования. Роль программирования в машинных кодах стала уменьшаться, стали появляться языки программирования нового типа, выступающие в роли посредника между машинами и программистами. Наступило время второго и третьего поколений языков программирования. С середины 50-х г. XX в. начали создавать первые языки программирования высокого уровня (high-level programming languages). Эти языки не были привязаны к определенному типу ЭВМ (машинонезависимы). Для каждого из них были разработаны собственные компиляторы. Компиляция — трансляция программы, составленной на исходном языке высокого уровня, в эквивалентную программу на низкоуровневом языке, близком машинному коду (абсолютный код, объектный модуль, иногда язык ассемблера). Первый язык высокого уровня Фортран был создан в период с 1954 по 1957 год группой программистов под руководством Джона Бэкуса в корпорации IBM. Он предназначался для научных и технических расчетов. Название Fortran является сокращением от FORmula TRANslator (переводчик формул). В конце 1953 Джон Бэкус предложил начать разработку эффективной альтернативы ассемблеру для программирования на ПК IBM 704. Уже к середине 1954 была закончена черновая спецификация языка Fortran. Первое руководство для Fortran появилось в октябре 1956 вместе с первым компилятором, поставленным в апреле 1957. Компилятор был оптимизирующим, потому что клиенты отказывались использовать язык программирования высокого уровня, который генерировал код с производительностью ниже, чем у ассемблера. В то время сообщество относилось скептически к новому способу программирования и не верили в то, что Fortran позволит программировать быстрее и эффективнее. По словам самого Джона Бэкуса, большая часть его работы была направлена на то, чтобы «быть ленивым». Ему жутко не нравилось писать программы под IBM 701 на ассемблере. Язык был широко принят учеными для написания программ с интенсивными вычислениями. Включение комплексного типа данных сделало его особенно подходящим для технических приложений. К 1960 году существовали версии Fortran для компьютеров IBM 709, 650, 1620, 7090. Его большая популярность побуждала конкурирующих изготовителей компьютеров создавать компиляторы Fortran для своих компьютеров. Таким образом, уже к 1963 существовало более 40 компиляторов для разных платформ. Именно поэтому Fortran считают первым широко используемым языком программирования.[2] Фортран в СССР появился позже, чем на Западе, поскольку поначалу в СССР более перспективным языком считался Алгол. Во внедрении Фортрана большую роль сыграло общение советских физиков со своими коллегами из CERN, где в 1960-х годах почти все расчёты велись с использованием программ на Фортране. Первый советский компилятор с Фортрана был создан в 1967 г. для машины «Минск-2», однако он не получил большой известности. Широкое внедрение Фортрана началось после создания в 1968 г. компилятора ФОРТРАН-ДУБНА для машины БЭСМ-6. Машины ЕС ЭВМ, появившиеся в 1972 г., уже изначально имели транслятор Фортрана («позаимствованный» с IBM/360 вместе с другим программным обеспечением) Фортран широко использовался в основном для научных и инженерных вычислений. Он прекрасно подходит для решения численных задач, так как за время его существования было написано множество библиотек. Он используется и по сей день, но не столько по причине удачного дизайна, сколько в силу большого количества написанных на нём программ, изменять и, тем более, переписывать которые нет смысла. Его структура способствует тому, что компилятор может очень хорошо оптимизировать вычисления. Среди учёных ходит такая присказка, что любая математическая задача уже имеет решение на Фортране, и, действительно, можно найти среди тысяч фортрановских пакетов, и пакет для перемножения матриц, и пакет для решения сложных интегральных уравнений, и многие, многие другие. Поскольку Фортран оказался столь успешным языком, в Европе возникли опасения, что IBM будет доминировать в компьютерной отрасли[источник не указан 1596 дней]. Немецкое Общество прикладной математики и механики (GAMM) создало комитет по разработке универсального языка. В то же время Ассоциация вычислительной техники (ACM) организовала похожий комитет в США. Несмотря на то, что у европейцев было некоторое беспокойство по поводу господства американцев, оба этих комитета слились в один. Алгол был разработан в 1958 году на недельной конференции в ETH (Цюрих, Швейцария) как универсальный язык программирования для широкого круга применений, а затем доработан комитетом, созданным Международной федерацией по обработке информации. В комитет вошёл ряд ведущих европейских и американских учёных и инженеров-разработчиков языков, среди которых были Джон Бэкус, Джон Маккарти, Петер Наур, Эдсгер Дейкстра и Джозеф Уэгстен[англ.], впоследствии возглавивший комитет по разработке языка Кобол. В ходе работы возникали большие трудности непринципиального характера. Так, например, один из членов комитета вспоминал «десятичную бурю» — крайне резкую дискуссию между американскими и европейскими участниками по поводу того, какой именно символ должен быть использован в качестве разделителя целой и дробной частей числа. Американцы настаивали на точке, европейцы же требовали применять традиционную для Европы запятую. Чтобы избежать конфликтов по мелким вопросам, было решено, что описание Алгола будет трёхуровневым, включающим уровень описаний, публикаций и реализации. Мелкие вопросы, типа выбора между точкой и запятой или используемого алфавита, были вынесены на второй-третий уровень, что позволило относительно быстро решить принципиальные вопросы. На уровне публикаций, согласованном позже, допускалось использование национальных ключевых слов и стандартов представления данных (в том числе и десятичной точки), уровень реализации определял язык совершенно строго — согласно ему должны были строиться трансляторы. Вначале предлагавшееся название ALGOL (ALGOrithmic Language) было отвергнуто. Но поскольку оно стало общеупотребительным, официальное имя IAL пришлось впоследствии изменить на ALGOL 58. Новая версия появилась в 1960 г., и ALGOL 60 (с небольшими изменениями, сделанными в 1962 г.) с 60-х и до начала 70-х гг. прошлого века был стандартом академического языка программирования. У нового языка нашлись как приверженцы, так и критики. В США Алгол приняли холодно, он был популярен только в академической среде, и то не повсеместно. Те, кто попытался реализовать Алгол, столкнулись с целым рядом сложностей. Так, например, обнаружилось, что ни один из существовавших тогда компьютеров не поддерживал ввод-вывод всех 116 литер, из которых состоял алфавит Алгола. А вот в Европе Алгол приняли с энтузиазмом. Он быстро завоевал популярность в академической среде, повсеместно шла разработка компиляторов, многие из которых, несмотря на сложности реализации, оказались весьма успешными. Алгол распространился от Великобритании до Дальнего востока СССР, став как универсальным языком описания алгоритмов в научных публикациях, так и средством реального программирования. В Алголе появилось представление о программе не как о свободной последовательности команд, а как о блочной структуре, состоящей из чётко описанных и отделённых друг от друга частей. Основной блок программы на Алголе — это сама главная программа. Она содержит свою исполняемую часть, заключённую в блок, ограниченный парой ключевых слов begin и end, а также описания подпрограмм. Каждая подпрограмма — это программа в миниатюре, имеющая собственные, описанные внутри неё данные, однозначно определённый интерфейс в виде имени и списка формальных параметров, и блок кода. При этом в блоке могут выделяться подблоки. Были выделены структурные управляющие конструкции: ветвления, циклы, последовательные участки, исполняющие условно или многократно вложенные наборы операторов, также ограниченные теми же ключевыми словами begin и end. Современным программистам подобная структура программы кажется очевидной, кое в чём устаревшей и не всегда удобной, но на момент появления Алгола всё это было заметным шагом вперёд. Программы становились регулярными, это давало возможность наращивать их по объёму, сохраняя обозримыми, понятными, доступными анализу и исправлению. Именно на базе Алгола и его языков-потомков были выполнены успешные работы по аналитическому доказательству правильности программ. В Алголе было предложено два способа передачи параметров в подпрограмму — по имени и по значению. Если второй способ возражений не вызывает (он широко используется в абсолютном большинстве языков по сей день), то первый (он предполагает, что в процедуру передаётся имя фактического параметра, и процедура работает так, как будто в точке обращения записан её код, где вместо формального параметра написано имя фактического) приводил к трудностям реализации компиляторов и появлению труднообнаруживаемых ошибок. Язык Лисп был предложен Дж. Маккарти в работе в 1960 году и ориентирован на разработку программ для решения задач не численного характера. Английское название этого языка — LISP является аббревиатурой выражения LISt Processing (обработка списков) и хорошо подчеркивает основную область его применения. Понятие «список» оказалось очень емким. В виде списков удобно представлять алгебраические выражения, графы, элементы конечных групп, множества, правила вывода и многие другие сложные объекты. Списки являются наиболее гибкой формой представления информации в памяти компьютеров. Неудивительно, что удобный язык, специально предназначенный для обработки списков, быстро завоевал популярность. На протяжении почти сорокалетней истории его существования появился ряд диалектов этого языка: Common LISP, Mac LISP, Inter LISP, Standard LISP и др. Различия между ними не носят принципиального характера и в основном сводятся к несколько отличающемуся набору встроенных функций и некоторой разнице в форме записи программ. Поэтому программист, научившийся работать на одном из них, без труда сможет освоить и любой другой. Большим достоинством Лиспа является его функциональная направленность, то есть программирование ведется с помощью функций. Причем функция понимается как правило, сопоставляющее элементам некоторого класса соответствующие элементы другого класса. Сам процесс сопоставления не оказывает никакого влияния на работу программы, важен только его результат — значение функции. Это позволяет относительно легко писать и отлаживать большие программные комплексы. Ясность программ, четкое разграничение их функций, отсутствие каверзных побочных эффектов при их выполнении является обязательными требованиями к программированию таких логически сложных задач, каковыми являются задачи искусственного интеллекта. Дисциплина в программировании становится особенно важной, когда над программой работает не один человек, а целая группа программистов. Кобол был разработан в 1959 году и предназначался прежде всего для написания программ для разработки бизнес приложений, а также для работы в экономической сфере. Спецификация языка была создана в 1959 году. Создатели языка ставили своей целью сделать его машинонезависимым и максимально приближенным к естественному английскому языку. Обе цели были успешно достигнуты; программы на COBOL считаются понятными даже неспециалистам, поскольку тексты на этом языке программирования не нуждаются в каких-либо специальных комментариях (самодокументирующиеся программы). COBOL — язык очень старый и в свое время использовался крайне активно, поэтому существует множество реализаций и диалектов. Для языка был утвержден ряд стандартов: в 1968, 1974, 1985 и 2002 годах. Последний стандарт добавил в язык поддержку объектно-ориентированной парадигмы. Язык позволяет эффективно работать с большим количеством данных, он насыщен разнообразными возможностями поиска, сортировки и распределения. К числу других плюсов COBOL обычно относят его структурированность. Довольно мощные компиляторы с этого языка разработаны для персональных компьютеров. Некоторые из них столь эффективны, что программу, отлаженную на персональном компьютере, нетрудно перенести на большие ЭВМ. Перечисляя минусы, нельзя не вспомнить о том, что на Коболе можно запрограммировать лишь простейшие алгебраические вычисления. Для сложных инженерных расчетов этот язык не годится. На заре компьютеризации (в начале 1950-х г.г.), машинный язык был единственным языком, большего человек к тому времени не придумал. Языки низкого уровня мало похожи на нормальный, привычный человеку язык. Большие, громоздкие программы на таких языках пишутся редко. Зато если программа будет написана на таком языке, то она будет работать быстро, занимая маленький объем и допуская минимальное количество ошибок. Чем ниже и ближе к машинному уровень языка, тем меньше и конкретнее задачи, которые ставятся перед каждой командой. Для спасения программистов от сурового машинного языка программирования, были созданы языки высокого уровня (то есть немашинные языки), которые стали своеобразным связующим мостом между человеком и машинным языком компьютера. Языки высокого уровня работают через трансляционные программы, которые вводят «исходный код» (гибрид английских слов и математических выражений, который считывает машина), и в конечном итоге заставляет компьютер выполнять соответствующие команды, которые даются на машинном языке. С появлением языков высокого уровня программисты получили возможность больше времени уделять решению конкретной проблемы, не отвлекаясь на весьма тонкие вопросы организации самого процесса выполнения задания на машине. Кроме того, появление этих языков ознаменовало первый шаг на пути создания программ, которые вышли за пределы научно-исследовательских лабораторий и финансовых отделов. Подводя итог данному периоду развития языков программирования, можно сделать вывод, что языки программирования высокого уровня (FORTRAN, ALGOL, LISP, COBOL и т. д.) не похожи на язык ассемблера. Языки высокого уровня разработаны специально для того, чтобы можно было иметь дело непосредственно с задачей, решаемой программой. В этом качестве они иногда называются процедурными языками, поскольку описывают процедуру, используемую для решения задачи. Языки высокого уровня машинонезависимы. Программы же на языке ассемблера непосредственно относятся к той машине, на которой они должны выполняться. Достоинства языков программирования высокого уровня: Недостатком языков высокого уровня является больший размер программ по сравнению с программами на языке низкого уровня. Поэтому в основном языки высокого уровня используются для разработок программного обеспечения компьютеров и устройств, которые имеют большой объем памяти. А разные подвиды ассемблера применяются для программирования других устройств, где критичным является размер программы. Началось развитие компаративных и логических языков в 1970-е годы. В 1980-е годы началось развитие императивных языков. Появились языки Ada, C++, Matlab, Objective-C, dBase, Wolfram Language, Perl. В 1990-е годы началось развитие интернета . Появились языки Visual Basic, Delphi, Perl. Неизвестно, насколько бы ускорилось развитие программирования, если бы наработки Цузе стали доступны другим учёным в конце 40-х годов, но на практике с развитием компьютерной техники сначала получил распространение машинный язык. С его помощью программист мог задавать команды, оперируя с ячейками памяти, полностью используя возможности машины. Суть этого языка — набор кодов, обязательно понятных процессору, к которому обращаются. Части («слова») этого языка называются инструкциями, каждая из которых представляет собой одно элементарное действие для центрального процессора, как, например, считывание информации из ячейки памяти. Лишь при понимании устройства компьютерного оборудования и знания этих целочисленных кодов можно было непосредственно управлять процессором. Тогда ещё компьютеры были простыми вычислительными машинами, применяемыми для различных математических расчётов. Но они развивались, а использование большинства компьютеров на уровне машинного языка затруднительно, особенно сложным было чтение и модификация подобных программ, что усугублялось использованием абсолютной адресации памяти[3]. Поэтому со временем от использования машинных кодов пришлось отказаться. Например, для организации чтения блока данных с гибкого диска программист может использовать 16 различных команд, каждая из которых требует 13 параметров, таких как номер блока на диске, номер сектора на дорожке и т. п. Когда выполнение операции с диском завершается, контроллер возвращает 23 значения, отражающие наличие и типы ошибок, которые необходимо анализировать. Уже одно обращение к процессору громоздко, а анализ ошибок и вовсе представляется невообразимым, особенно, если не именно с этим процессором приходится работать. Таким образом, набор команд машинного языка сильно зависит от типа процессора. На протяжении 1950-х годов запросы на разработку программного обеспечения возросли и программы стали очень большими. Приходилось писать очень много кода, хотя обеспечение и было весьма простым: по тем временам дизайн рабочего стола был проще нынешнего, программы работали с элементарными вещами, а компьютер только ещё начинал победно шествовать. Однако программы запутывались всё больше, их структура усложнилась, потому что всё время развивалась компьютерная техника. Тогда стали пользоваться специальными программами-сборщиками программ из маленьких кусочков кодов — ассемблерами. Начался новый этап развития. Теперь, когда была нужна эффективная программа, вместо машинных языков использовались
близкие к ним машиноориентированные языки ассемблера. К таковым относились, например, Autocode, с 1954-го г. — IPL (предшественник языка LISP), с 1955-го г. — FLOW-MATIC. Теперь люди стали использовать мнемонические команды взамен машинных команд. Но даже работа с ассемблером достаточно сложна и требует специальной подготовки.
Например, для процессора Zilog Z80 машинная команда 00000101 предписывает процессору уменьшить на единицу свой регистр B. На языке ассемблера это же будет записано как DEC B. Следующий шаг был сделан в 1954 году, когда была начата разработка языка высокого уровня — Фортран (англ. FORTRAN — FORmula TRANslator), компилятор для которого впервые появился в апреле 1957 года[4]. К разработке такого языка подтолкнули новые возможности внедрённого в 1954 году компьютера IBM 704, в котором на аппаратном уровне были реализованы индексная адресация и операции с плавающей точкой[5]. Вслед за ним появились и некоторые другие языки, например: LISP, ALGOL 58, FACT. Языки высокого уровня имитируют естественные языки, используя некоторые слова разговорного языка и общепринятые математические символы. Эти языки более удобны для человека, с помощью них можно писать программы до нескольких тысяч строк длиной. Условными словами можно было, как привычно человеку, гораздо более просто выразить сложную программную операцию из битов. Однако ранние варианты Фортрана значительно уступают поздним концепциям и языкам, использовался он для создания относительно простых по современным меркам программ[6]. Во второй половине 50-х интернациональная команда разработчиков попыталась создать универсальный язык программирования. В результате появился ALGOL 58 (англ. ALGOrithmic Language), по многим параметрам являвшийся наследником Фортрана. В него были добавлены новые концепции и обобщения, формализована концепция типов данных, разрешено использование идентификаторов любой длины, когда в Фортране было ограничение в 6 символов[7]. Этот вариант языка был скорее черновым, поэтому в январе 1960 года в Париже состоялось второе собрание комитета по его разработке, где было решено внести значительные изменения. Новый вариант получил название ALGOL 60, основными новшествами в нём были: концепция блочной структуры, возможность создания рекурсивных процедур, автоматические массивы[8]. Несмотря на свои многочисленные достоинства, ALGOL так и не получил большого распространения, в первую очередь из-за сложности в его реализации и отсутствии поддержки от корпорации IBM[9]. В дальнейшем появились COBOL (1959), Паскаль (1970), Си (1972). К концу 1960-х годов в связи с ростом сложности программ и дальнейшим развитием программных средств возникла необходимость увеличить производительность труда программистов, что привело к разработке структурного программирования. Основоположником данной методологии считается Эдсгер Дейкстра, который в 1968 году опубликовал своё знаменитое письмо «Оператор Goto считается вредным»[10], а также описал основные принципы структурного программирования[11]. С развитием структурного программирования следующим достижением были процедуры и функции. То есть, если есть задача, которая выполняется несколько раз, то её можно объявить как функцию или как процедуру и в выполнении программы просто вызывать её. Общий код программы в данном случае становится меньше. Это способствовало созданию модульных программ. Следующим достижением было объединение разнородных данных, которые используются в программе в связке, в структуры. Структуры — это составные типы данных, построенные с использованием других типов данных. Например, структура времени разбивается на: часы, минуты, секунды. В свою очередь и часы, и минуты, и секунды описаны при помощи более простых и элементарных типов данных. И вместо работы с отдельными переменными, в которых легко запутаться, можно перейти к структуре «время», включающее в себя уже часы, минуты и секунды, и работать с ней, как с единым типом одного формата. Структурное программирование предполагает точно обозначенные управляющие структуры, программные блоки, отсутствие инструкций безусловного перехода (GOTO), автономные подпрограммы, поддержку рекурсии и локальных переменных. Суть такого подхода заключается в возможности разбиения программы на составляющие элементы с увеличением читабельности программного кода[12]. Также создавались функциональные (аппликативные) языки (Пример: Lisp — англ. LISt Processing, 1958) и логические языки (пример: Prolog — англ. PROgramming in LOGic, 1972). Хотя внедрение структурного программирования дало положительный результат, даже оно оказывалось несостоятельным тогда, когда программа достигала определённой длины. Для того чтобы написать более сложную и длинную программу, нужен был новый подход к программированию. При использовании структур данных в программе вырабатываются и соответствующие им функции для работы с ними. Это привело к мысли их объединить и использовать совместно - так появились классы. Класс — это структура данных, содержащая в себе не только переменные, но и функции, которые работают с этими переменными. Коротко, это достижение в области программирования было очень велико. Теперь программирование можно было разбить на классы и тестировать не всю программу, состоящую, например, из 10 000 строк кода, а разбить эту программу на 100 классов и тестировать каждый класс. Это существенно облегчило написание программного продукта. В итоге, в конце 1970-х и начале 1980-х были разработаны принципы объектно-ориентированного программирования. ООП сочетает лучшие принципы структурного программирования с новыми концепциями инкапсуляции, полиморфизма подтипов и наследования. Первым объектно-ориентированным языком программирования является Симула-67, в котором впервые появились классы[13]. Концепции ООП получили дальнейшее развитие в языке Smalltalk, в котором также были заложены основы систем с оконным управлением[14]. Более поздними примерами объектно-ориентированных языков являются Object Pascal, C++, Java, C# и др. ООП позволяет оптимально организовывать программы, разбивая проблему на составные части, и работая с каждой по отдельности. Программа на объектно-ориентированном языке, решая некоторую задачу, по сути, описывает часть мира, относящуюся к этой задаче. Босова Л.Л.,  Информатика: учебник для 8 класса.
Босова Л.Л.,  Информатика: учебник для 9 класса.
Семакин И.А., Информатика: Базовый курс.
М. Дмитриев, Н. Алексеев «История компьютерной эры».
М. Зарецкая: Энциклопедия Москва «Просвещение».
Ю.С. Голубев-Новожилов: «Программное обеспечение».
Н.В. Макаровой. — М.: Финансы и статисти  1 Начало

1.1 Машинные коды и ассемблер
1.2 Первые языки программирования высокого уровня
1.3 Язык программирования FORTRAN

1.3.1 История языка
1.3.2 Фортран в СССР
1.3.3 Современный Фортран. Достоинства языка


1.4 Язык программирования ALGOL 58

1.4.1 Причина появления языка ALGOL
1.4.2 Свойства языка. Его достоинства и недостатки


1.5 Язык программирования LISP

1.5.1 Развитие языка
1.5.2 Основные достоинства языка


1.6 Язык программирования COBOL

1.6.1 Достоинства и недостатки


1.7 Выводы по данному периоду развития языков программирования 1.1 Машинные коды и ассемблер 1.2 Первые языки программирования высокого уровня 1.3 Язык программирования FORTRAN

1.3.1 История языка
1.3.2 Фортран в СССР
1.3.3 Современный Фортран. Достоинства языка 1.3.1 История языка 1.3.2 Фортран в СССР 1.3.3 Современный Фортран. Достоинства языка 1.4 Язык программирования ALGOL 58

1.4.1 Причина появления языка ALGOL
1.4.2 Свойства языка. Его достоинства и недостатки 1.4.1 Причина появления языка ALGOL 1.4.2 Свойства языка. Его достоинства и недостатки 1.5 Язык программирования LISP

1.5.1 Развитие языка
1.5.2 Основные достоинства языка 1.5.1 Развитие языка 1.5.2 Основные достоинства языка 1.6 Язык программирования COBOL

1.6.1 Достоинства и недостатки 1.6.1 Достоинства и недостатки 1.7 Выводы по данному периоду развития языков программирования 2 Дальнейшее развитие языков 3 Машинный язык 4 Язык ассемблера 5 Языки высокого уровня 6 Появление структурного программирования 7 ООП 8 См. также 9 Примечания 10 Литература 11 Ссылки Алфавит языка значительно шире машинного, что делает его гораздо более выразительным и существенно повышает наглядность и понятность текста; Набор операций, допустимых для использования, не зависит от набора машинных операций, а выбирается из соображений удобства формулирования алгоритмов решения задач определенного класса; Конструкции операторов задаются в удобном для человека виде; Поддерживается широкий набор типов данных. Speakeasy-1972 Simula-1974 FORTH-1969 C Smalltalk-1975 Prolog- 1970 ML Хронология языков программирования ↑ Р.Богатырев. Природа и эволюция сценарных языков. — Мир ПК, 2001. ↑ Е.К. Хеннера. Информатика под редакцией Е.К. Хеннера. — Академия, 2004. ↑ Себеста, 2001, с. 61. ↑ Себеста, 2001, с. 65. ↑ Себеста, 2001, с. 63—64. ↑ Себеста, 2001, с. 68. ↑ Себеста, 2001, с. 76. ↑ Себеста, 2001, с. 78. ↑ Себеста, 2001, с. 79. ↑ David R. Tribble. Go To Statement Considered Harmful:  A Retrospective (англ.) (37.11.2005). Дата обращения: 13 февраля 2015. Архивировано 30 августа 2017 года. ↑ Edsger W. Dijkstra. Notes on Structured Programming (англ.). Техасский университет (апрель 1970). Дата обращения: 13 февраля 2015. Архивировано 17 марта 2019 года. ↑ Йодан Э. Структурное проектирование и конструирование программ. — Пер. с англ. — М.: Мир, 1979. — 415с. — С. 174. ↑ Себеста, 2001, с. 92—93. ↑ Себеста, 2001, с. 111. Роберт У. Себеста. Основные концепции языков программирования. — 5-е изд.. — М.: Вильямс, 2001. — 672 с. — ISBN 5-8459-0192-8. Эволюция языков программирования История Хронология 1C Ада Алгол Ассемблер APL Бейсик Си C++ C# D Delphi Кобол Erlang F# Форт Фортран Go Groovy Haskell Java JavaScript Julia Kotlin Лисп Lua MATLAB Оберон Objective-C OCaml Паскаль Perl PL/SQL PHP Python Ruby Rust Scala UNIX Shell Smalltalk Swift Visual Basic .NET Zig Переработать оформление в соответствии с правилами написания статей. Найти и оформить в виде сносок ссылки на независимые авторитетные источники, подтверждающие написанное. Оформить статью по правилам. Перевести текст с иностранного языка на русский. Языки программирования История программного обеспечения Википедия:Статьи, подозреваемые в наличии оригинальных исследований с декабря 2016 года Википедия:Статьи с шаблонами недостатков по алфавиту Википедия:Статьи без источников (не распределённые по типам) Википедия:Нет источников с января 2020 Википедия:Статьи с утверждениями без источников более 14 дней Википедия:Статьи, нейтральность которых поставлена под сомнение Википедия:Статьи с неэнциклопедическим содержанием Википедия:Статьи без ссылок на источники Википедия:Статьи с проблемами в оформлении Википедия:Незавершённый перевод Википедия:Статьи без ссылок на источники с ноября 2013 года Википедия:Запросы на перевод с английского Страницы, использующие волшебные ссылки ISBN Вы не представились системе Обсуждение Вклад Создать учётную запись Войти Статья Обсуждение Читать Текущая версия Править Править код История Заглавная страница Содержание Избранные статьи Случайная статья Текущие события Пожертвовать Сообщить об ошибке Как править статьи Сообщество Форум Свежие правки Новые страницы Справка Ссылки сюда Связанные правки Служебные страницы Постоянная ссылка Сведения о странице Цитировать страницу Получить короткий URL Скачать QR-код Элемент Викиданных Скачать как PDF Версия для печати العربية Български বাংলা Català Deutsch Ελληνικά English Español فارسی Français עברית हिन्दी Íslenska 日本語 Qaraqalpaqsha 한국어 Português தமிழ் Українська Oʻzbekcha / ўзбекча 中文 Эта страница в последний раз была отредактирована 22 марта 2024 в 09:53. Текст доступен по лицензии Creative Commons «С указанием авторства — С сохранением условий» (CC BY-SA); в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации «Фонд Викимедиа» (Wikimedia Foundation, Inc.) Политика конфиденциальности Описание Википедии Отказ от ответственности Свяжитесь с нами Кодекс поведения Разработчики Статистика Заявление о куки Мобильная версия  

Список терминов: Ссылки:Информационные технологии. Словарь                                                                                                                      CDTOwiki   Навигация  Актуальное  О продукте Навигация Актуальное О продукте Темы   Данные  Инфраструктура и инструменты  Оптимизация процессов  Люди и компетенции  Цифровая образовательная среда  Нормативное регулирование  Кадры для цифровой экономики  Цифровая образовательная среда  Сквозные цифровые технологии  Платформенные технологии Данные Инфраструктура и инструменты Оптимизация процессов Люди и компетенции Цифровая образовательная среда Нормативное регулирование Кадры для цифровой экономики Цифровая образовательная среда Сквозные цифровые технологии Платформенные технологии Разделы   Этика и цифра: кейсы  Исследования  Коллекция ссылок  Источники публикаций  Публикации  Платформенные решения Этика и цифра: кейсы Исследования Коллекция ссылок Источники публикаций Публикации Платформенные решения Тезаурус Процесс, при котором происходит сравнение представленного пользователем образца с шаблоном, зарегистрированным в базе данных, при этом признаки передаваемого пользователем образца сравниваются с зарегистрированным шаблоном и по результатам сравнения возвращается положительное решение о запрошенной идентичности Процесс анализа, изучения, испытания, контроля, независимой экспертизы или иного процесса установления и документирования соответствия предметов, процессов, услуг или документов регламентированным требованиям Публикации - Термины Страницы со слишком большим количеством вызовов ресурсоёмких функций Политика конфиденциальности О CDTOwiki Отказ от ответственности Powered by flaticon.com & pixabay.com Creative Commons Attribution Non-Commercial Share Alike Powered by MediaWikiPowered by Semantic MediaWiki

